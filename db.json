{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/images/image-20240228195010033.png","path":"images/image-20240228195010033.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228200611781.png","path":"images/image-20240228200611781.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228200803273.png","path":"images/image-20240228200803273.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228212912288.png","path":"images/image-20240228212912288.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228213115946.png","path":"images/image-20240228213115946.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228213402353.png","path":"images/image-20240228213402353.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228213543244.png","path":"images/image-20240228213543244.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228213815636.png","path":"images/image-20240228213815636.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228213253912.png","path":"images/image-20240228213253912.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228220453132.png","path":"images/image-20240228220453132.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228220635826.png","path":"images/image-20240228220635826.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228220904427.png","path":"images/image-20240228220904427.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228202210130.png","path":"images/image-20240228202210130.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228220959034.png","path":"images/image-20240228220959034.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228221437713.png","path":"images/image-20240228221437713.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228221542960.png","path":"images/image-20240228221542960.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228222507296.png","path":"images/image-20240228222507296.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228222725206.png","path":"images/image-20240228222725206.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228221620605.png","path":"images/image-20240228221620605.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228222933035.png","path":"images/image-20240228222933035.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228223002094.png","path":"images/image-20240228223002094.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225026914.png","path":"images/image-20240228225026914.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225136150.png","path":"images/image-20240228225136150.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225546405.png","path":"images/image-20240228225546405.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225205976.png","path":"images/image-20240228225205976.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225637596.png","path":"images/image-20240228225637596.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225320769.png","path":"images/image-20240228225320769.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225700596.png","path":"images/image-20240228225700596.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228225727777.png","path":"images/image-20240228225727777.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228230136771.png","path":"images/image-20240228230136771.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228231544486.png","path":"images/image-20240228231544486.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228231647489.png","path":"images/image-20240228231647489.png","modified":1,"renderable":0},{"_id":"source/images/image-20240228232401552.png","path":"images/image-20240228232401552.png","modified":1,"renderable":0},{"_id":"source/images/java-HelloWorld.gif","path":"images/java-HelloWorld.gif","modified":1,"renderable":0},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/error-page.png","path":"img/error-page.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello.md","hash":"99697b5ea003896b692a3cab07d888ed6be03f49","modified":1743776098842},{"_id":"source/images/image-20240228200611781.png","hash":"cac0d07546bdf8b7f8d491ccd63f98ee4a0a458d","modified":1743772234000},{"_id":"source/images/image-20240228200803273.png","hash":"ef25a15b9ff27f714cb4205748acc8d5ee94c4bf","modified":1743772234000},{"_id":"source/images/image-20240228212912288.png","hash":"626ddeea0828f13e0093fb6119e234d7e69458d1","modified":1743772234000},{"_id":"source/images/image-20240228213115946.png","hash":"dff59063edecf8d83d9154ff1ca8d02c54ed532e","modified":1743772234000},{"_id":"source/images/image-20240228213402353.png","hash":"323a88397c9090bfcf3eaba399860540294dc5e4","modified":1743772234000},{"_id":"source/images/image-20240228220635826.png","hash":"e45e72bf5e912e83927e43ae27adddc73abae9b9","modified":1743772234000},{"_id":"source/images/image-20240228213815636.png","hash":"b9abec4ea6a95c032a1571ec9230046955e6f945","modified":1743772234000},{"_id":"source/images/image-20240228220904427.png","hash":"60c40cb434e94e2dac5574898f775b55983a9718","modified":1743772234000},{"_id":"source/images/image-20240228202210130.png","hash":"de1e844d34d5319d52a1eb2ac35b02cefedd6959","modified":1743772234000},{"_id":"source/images/image-20240228220959034.png","hash":"f62a623080990c2c4d04bf4f31a3683fbcc0d752","modified":1743772234000},{"_id":"source/images/image-20240228221542960.png","hash":"8af3f8d49d374adfc8a7c3d403ab5a163e72a008","modified":1743772234000},{"_id":"source/images/image-20240228223002094.png","hash":"d8d0973f36c8c4cd9850210438edc906a976984b","modified":1743772234000},{"_id":"source/images/image-20240228222933035.png","hash":"b9e69d2094dffd8106d0e408caeef6f3a9c61336","modified":1743772234000},{"_id":"source/images/image-20240228225026914.png","hash":"3a75e815d6564fdbbf8d72d5bf78656b0534237d","modified":1743772234000},{"_id":"source/images/image-20240228225637596.png","hash":"802c770a91dba6e880c8ac0835f7cbfa2f9b9d23","modified":1743772234000},{"_id":"source/images/image-20240228225320769.png","hash":"73ab4d222f9eaf639c2fbac9229ac7496de3b806","modified":1743772234000},{"_id":"source/images/image-20240228225700596.png","hash":"079f652dfe312f1c0f9233e0919a151eead03a42","modified":1743772234000},{"_id":"source/images/image-20240228230136771.png","hash":"abc1046625f155ef8addf1fdad82ade3231a8d21","modified":1743772234000},{"_id":"source/images/image-20240228225727777.png","hash":"f0198d03d04e984bb50047dbc231e77858fcd384","modified":1743772234000},{"_id":"source/images/image-20240228231647489.png","hash":"f7c10fcdb33cb69a41bd9ad7cd7c2bf168e78ae3","modified":1743772234000},{"_id":"source/_posts/java/image-20240228200611781.png","hash":"cac0d07546bdf8b7f8d491ccd63f98ee4a0a458d","modified":1743772234000},{"_id":"source/_posts/java/image-20240228200803273.png","hash":"ef25a15b9ff27f714cb4205748acc8d5ee94c4bf","modified":1743772234000},{"_id":"source/_posts/java/image-20240228202210130.png","hash":"de1e844d34d5319d52a1eb2ac35b02cefedd6959","modified":1743772234000},{"_id":"source/_posts/java/image-20240228212912288.png","hash":"626ddeea0828f13e0093fb6119e234d7e69458d1","modified":1743772234000},{"_id":"source/_posts/java/image-20240228213115946.png","hash":"dff59063edecf8d83d9154ff1ca8d02c54ed532e","modified":1743772234000},{"_id":"source/_posts/java/image-20240228213402353.png","hash":"323a88397c9090bfcf3eaba399860540294dc5e4","modified":1743772234000},{"_id":"source/_posts/java/image-20240228213815636.png","hash":"b9abec4ea6a95c032a1571ec9230046955e6f945","modified":1743772234000},{"_id":"source/_posts/java/image-20240228220635826.png","hash":"e45e72bf5e912e83927e43ae27adddc73abae9b9","modified":1743772234000},{"_id":"source/_posts/java/image-20240228220904427.png","hash":"60c40cb434e94e2dac5574898f775b55983a9718","modified":1743772234000},{"_id":"source/_posts/java/image-20240228220959034.png","hash":"f62a623080990c2c4d04bf4f31a3683fbcc0d752","modified":1743772234000},{"_id":"source/_posts/java/image-20240228221542960.png","hash":"8af3f8d49d374adfc8a7c3d403ab5a163e72a008","modified":1743772234000},{"_id":"source/_posts/java/image-20240228222933035.png","hash":"b9e69d2094dffd8106d0e408caeef6f3a9c61336","modified":1743772234000},{"_id":"source/_posts/java/image-20240228223002094.png","hash":"d8d0973f36c8c4cd9850210438edc906a976984b","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225026914.png","hash":"3a75e815d6564fdbbf8d72d5bf78656b0534237d","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225320769.png","hash":"73ab4d222f9eaf639c2fbac9229ac7496de3b806","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225637596.png","hash":"802c770a91dba6e880c8ac0835f7cbfa2f9b9d23","modified":1743772234000},{"_id":"source/_posts/java/image-20240228230136771.png","hash":"abc1046625f155ef8addf1fdad82ade3231a8d21","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225727777.png","hash":"f0198d03d04e984bb50047dbc231e77858fcd384","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225700596.png","hash":"079f652dfe312f1c0f9233e0919a151eead03a42","modified":1743772234000},{"_id":"source/_posts/java/image-20240228231647489.png","hash":"f7c10fcdb33cb69a41bd9ad7cd7c2bf168e78ae3","modified":1743772234000},{"_id":"source/images/image-20240228213543244.png","hash":"0826863613b4229e47cf60014297687c70cd55b7","modified":1743772234000},{"_id":"source/images/image-20240228213253912.png","hash":"006e6376f7640f989d2c437bde7764decd9cb1d1","modified":1743772234000},{"_id":"source/images/image-20240228222507296.png","hash":"b1ec7a2896a0773a744e7b2d1b233b93606832a2","modified":1743772234000},{"_id":"source/images/image-20240228222725206.png","hash":"651c9166ec5481ab2b23a1be1364042295ecf0b1","modified":1743772234000},{"_id":"source/images/image-20240228221620605.png","hash":"be72e5e485c82f2ddc30f986490a55e3a93fdeea","modified":1743772234000},{"_id":"source/images/image-20240228225136150.png","hash":"fce35f3216c335d90fddb85c8bf8b814ec8f3b77","modified":1743772234000},{"_id":"source/images/image-20240228225205976.png","hash":"13ffd999f46ae3402c64fd55ca133df7f2ca40c1","modified":1743772234000},{"_id":"source/images/image-20240228231544486.png","hash":"83de482315ac169f3d0f007457e6d878aa93d435","modified":1743772234000},{"_id":"source/images/image-20240228232401552.png","hash":"5c8000c4b37a73fb8bd24aab85f1b301e79b576b","modified":1743772234000},{"_id":"source/_posts/hello/1.png","hash":"006e6376f7640f989d2c437bde7764decd9cb1d1","modified":1743772234000},{"_id":"source/_posts/java/image-20240228213253912.png","hash":"006e6376f7640f989d2c437bde7764decd9cb1d1","modified":1743772234000},{"_id":"source/_posts/java/image-20240228213543244.png","hash":"0826863613b4229e47cf60014297687c70cd55b7","modified":1743772234000},{"_id":"source/_posts/java/image-20240228221620605.png","hash":"be72e5e485c82f2ddc30f986490a55e3a93fdeea","modified":1743772234000},{"_id":"source/_posts/java/image-20240228222507296.png","hash":"b1ec7a2896a0773a744e7b2d1b233b93606832a2","modified":1743772234000},{"_id":"source/_posts/java/image-20240228222725206.png","hash":"651c9166ec5481ab2b23a1be1364042295ecf0b1","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225136150.png","hash":"fce35f3216c335d90fddb85c8bf8b814ec8f3b77","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225205976.png","hash":"13ffd999f46ae3402c64fd55ca133df7f2ca40c1","modified":1743772234000},{"_id":"source/_posts/java/image-20240228231544486.png","hash":"83de482315ac169f3d0f007457e6d878aa93d435","modified":1743772234000},{"_id":"source/_posts/java/image-20240228232401552.png","hash":"5c8000c4b37a73fb8bd24aab85f1b301e79b576b","modified":1743772234000},{"_id":"source/_posts/java.md","hash":"2147699a3fc02ec3e24fd3ef2474bdfe078570fb","modified":1743776268699},{"_id":"source/_posts/java1.md","hash":"7317b061e6281982fcfa9373af9e2b4548f200f8","modified":1743776187251},{"_id":"source/images/image-20240228195010033.png","hash":"130e200e5b30fc66f2c9effc7822949aea7f4caf","modified":1743772234000},{"_id":"source/_posts/java/image-20240228195010033.png","hash":"130e200e5b30fc66f2c9effc7822949aea7f4caf","modified":1743772234000},{"_id":"source/images/image-20240228220453132.png","hash":"ecf5fadb3ddd0f0b026768d74465fb303ea2efaa","modified":1743772234000},{"_id":"source/_posts/java/image-20240228220453132.png","hash":"ecf5fadb3ddd0f0b026768d74465fb303ea2efaa","modified":1743772234000},{"_id":"source/_posts/java-HelloWorld.gif","hash":"b40828e9d1c44878139cfbfa7aa9ed24324be727","modified":1743772234000},{"_id":"source/images/image-20240228225546405.png","hash":"6b5ff272172025b0b9b26eb234bafb5c55907454","modified":1743772234000},{"_id":"source/images/java-HelloWorld.gif","hash":"b40828e9d1c44878139cfbfa7aa9ed24324be727","modified":1743772234000},{"_id":"source/_posts/hello/java-HelloWorld.gif","hash":"b40828e9d1c44878139cfbfa7aa9ed24324be727","modified":1743772234000},{"_id":"source/_posts/java/image-20240228225546405.png","hash":"6b5ff272172025b0b9b26eb234bafb5c55907454","modified":1743772234000},{"_id":"source/_posts/java/java-HelloWorld.gif","hash":"b40828e9d1c44878139cfbfa7aa9ed24324be727","modified":1743772234000},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1743776696193},{"_id":"themes/butterfly/README.md","hash":"e1b9096ae0c4e5ef0a911aec05dbad4a3aae3173","modified":1743776696193},{"_id":"themes/butterfly/.gitignore","hash":"76e6365d33cec02b90d00699da3c0ddef1cd7efa","modified":1743776696193},{"_id":"themes/butterfly/README_CN.md","hash":"92e45255b8725f0a00450c88fcfd51ec61e1db67","modified":1743776696193},{"_id":"themes/butterfly/package.json","hash":"e3555008acea3e07add4ebddbfa32631df0cbe52","modified":1743776696200},{"_id":"themes/butterfly/_config.yml","hash":"75bb86e72b43fb6bcc1660a31582183fb2f3271c","modified":1743776696194},{"_id":"themes/butterfly/plugins.yml","hash":"a2704f0406484fdae3410e9992cf996f9859356e","modified":1743776696200},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1743776696192},{"_id":"themes/butterfly/languages/default.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1743776696194},{"_id":"themes/butterfly/languages/en.yml","hash":"a2c938b1ef69195aec10c90dc7d1871953548e01","modified":1743776696194},{"_id":"themes/butterfly/languages/ko.yml","hash":"c7d861c58f204f47a5b4d6e118e1f1e8fb8a852f","modified":1743776696194},{"_id":"themes/butterfly/languages/ja.yml","hash":"a281d3cc3e117e90597b783dc5569dba3976d2eb","modified":1743776696194},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"e0bf36edf18cf3380b900be7528b536252990c26","modified":1743776696194},{"_id":"themes/butterfly/languages/zh-HK.yml","hash":"bac3063ad2892be232f7d91361c28585a3cc7eb5","modified":1743776696194},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"bd7ee35aa30964493d2729ef105bb86331b096c3","modified":1743776696194},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1743776696194},{"_id":"themes/butterfly/layout/category.pug","hash":"a7e9805a781e34e38d27462e6ce2a5821c34bb9f","modified":1743776696194},{"_id":"themes/butterfly/layout/index.pug","hash":"a93004cc8ec8050df603d32a6e6e02cd96fd9875","modified":1743776696199},{"_id":"themes/butterfly/layout/page.pug","hash":"7ce2a49c6c41847de4ccea377ade116339984434","modified":1743776696199},{"_id":"themes/butterfly/layout/tag.pug","hash":"ca5333bd262cb58c195c844b593a0eed0c721766","modified":1743776696200},{"_id":"themes/butterfly/layout/post.pug","hash":"65c4a49c65c3fc4d9dc88b9791a75710c698c3a1","modified":1743776696200},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1743776696193},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1743776696193},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"10ce05c8dbde09f53bdabe40b5388de9ccc71a31","modified":1743776696193},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1743776696193},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1743776696193},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"f9b02aac0dbbb2b71c037dd215e70c8b7ec7741c","modified":1743776696194},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"d30413aa2a17bf31e4084f1096523ead7f2a6bf1","modified":1743776696194},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1d11e334b22dbbedcb0f751f9ee9789d4416605e","modified":1743776696194},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"e5e6c05a621483b3542f2884e8ba45e84b1e973a","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"bd45e6fa935ace9cb54499b0491dacfb78ccc354","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"3617840416f26078117f760579fb544dce07e1bc","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"3e65b7bf6bccccbba7e15349f0a44f15c64c5b5e","modified":1743776696196},{"_id":"themes/butterfly/scripts/common/postDesc.js","hash":"272613a71d16f0de6dac883be4839259f774be76","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/404.js","hash":"039fc75f363d79669b0b2177d929cdff6f2ef7a4","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"7b1b16e1e8e08245a345764616956be50487eb53","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"72b6700c7d2d8d7a15f746c3c0d66b1e6ce24c39","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"bac639c404588ea62e601ef0bcd368c3bd0119af","modified":1743776696200},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1743776696200},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"b23108d29fff3e32384d8689c8bcd2ab306a1ae7","modified":1743776696200},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"20a6ebf63439501a4b3fc81e7a2a2ea5d103bace","modified":1743776696200},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"3eb0bbb1288dc7b0ff82cc46ceb53bd666893416","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"0cdf781a8c14d7b50d309e69f282ec7b178804bb","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/getArchiveLength.js","hash":"bf77635e920eaf52bceebc95f87c7c87a7ca8038","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"00c5742ad1c75b3c5684d02ffc6a1921399e5376","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"950b7d0966429bf0f9e6c5e1161e50e545e320b4","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"b9af69d8998d748178348d93a19daccff0550c56","modified":1743776696201},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"45367c4ce827329867dbcc750ec125da9ccb2cfd","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"2f44e1b3ccd170b256eae178299d6fa933a8d490","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/chartjs.js","hash":"195ba802d7e8406c155124a9c939a2318f82938b","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"25eefe10189caf3910a0e5d5b2f2043ae9255531","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"fa3d0a64f7fce4aff7928d4ddd95548978ba001c","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f02fb085a88a2c0c82aeffacc24e1b71c74bd7c0","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"89c6c78d2db43b190055d5690741a79bab4f3e7e","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"cf0bc17d0180231167cc6aa8a00fc64f198cb9f9","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"50d8d8fac5c5b6e26317028895d7d82a2cf46606","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"f589fb6646bd17cf12d77a9b251dd614e1c8b899","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"40bc9a065e3a1423e0e66f4911e00713ca9f5e9e","modified":1743776696201},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"176804f07567aa80f1ed95897a968a996b155dec","modified":1743776696202},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"3c486b149e28edd1a06843f05a5c355000991b82","modified":1743776696202},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1743776696204},{"_id":"themes/butterfly/source/css/var.styl","hash":"d1eec577074ab7b262182885576135bf1896e12c","modified":1743776696204},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1743776696204},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1743776696207},{"_id":"themes/butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1743776696207},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1743776696208},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"fdb5482d04a75bd79946ad1ed291d281d0e9362d","modified":1743776696209},{"_id":"themes/butterfly/source/js/main.js","hash":"5a52047b8520f79864d5a4ee2379a29751aead23","modified":1743776696208},{"_id":"themes/butterfly/source/js/utils.js","hash":"48637ad8e405306772b93837f33400bde1055819","modified":1743776696209},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"e93a36d3c29b5a02c7f26a23f96e1f84b063cbe8","modified":1743776696194},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"e792a435afee1f9491095084a00dc77e3522c1fd","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"9ea75b06f19bf356f340f4a3fc1bdc0713cfe445","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"56a3c32de1a15627ff38c67f1131cdd6ec5ac924","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"1e1a69aa2cbda2e621c741b3802093244b3cc04e","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"83ed05ef1e39f2ee70c3fba2cf96e488d8ffec66","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/structured_data.pug","hash":"1b83ae33961528f128596753fd05067c672d6bff","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"44331c9db74b281b5c5c41439d3407a9076df1a1","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"733184f88e3a586a5fcc9d193ad500556b6c8eed","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"18b984ce184ea53d2dff5a03cc2d0d39d2ec3406","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"7d799c4694adb6e265e3f4b975d7f7f6a7021a17","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"e2d31e0f450ad42c47f7ee96375799342bf2f19b","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"d76ce71ba106e350670c021a3dcae57547d01830","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"a2f7d69ca7ec58f24fe7d4e04ae21d5b62b01567","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"9d2d539555bab495959b9df734ed5c43a9f9e5a9","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"ef7afe0df7a3746744ac8185da7163b7406120ca","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/mixins/indexPostUI.pug","hash":"f3389fa9ae4fa32e3c16573286583bc3023e57ad","modified":1743776696195},{"_id":"themes/butterfly/layout/includes/page/404.pug","hash":"15d32c511e4875066fcbe9cb84c3ada07b5a7c41","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"efb40388e37cca0b5e7c3c66e811a42f8d32c910","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"6b0fa5f048aca8e9cbe56978301af918cf7ac34a","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/page/shuoshuo.pug","hash":"b2423cfc57a5e3a0e1112ff7c18d5c5c720d89d5","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"79ad31eb72a9e14007770b18a426406a25315b38","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/post/outdate-notice.pug","hash":"b7ce9484bc5c97ea6154f0b78fb9b8951fafedbd","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"b96c232e5178d927987791d9ae386dd83679535a","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"db92f25ff3fd061882f81bf74ca560ff66983a0c","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"ed79fef5b5025415ea12eaed970f3fe7f6ef9596","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"d29ee6a07e6716c0dc1d4533c87b19b6076fefd3","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"88f979a0b1a19eeb0db229247833bf9c6865c3b9","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"236c3ce26dd76e80b04d457789475c42da5ac0c8","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/umami_analytics.pug","hash":"bc35a1552d26ecdeeadbf06300078dbb5128a6e5","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"1aba8aa7cd767dc96879d13a13b4c8ceb9023233","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"d8753772889b5d0f4d15639ed6af5e91e53b1d03","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"1dd19a564320d248dbcee7f118a5b96c6466da65","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1743776696199},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"fcddd80cdeb6aa81f342cd9f0102302f6ba087a8","modified":1743776696199},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"d12340a7df4601b9a23f070e16645861aeb3bb0a","modified":1743776696202},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"45f620cd87b9ef2aa9d1e024e697ed6b4eecff34","modified":1743776696199},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"4fcb8222b9548e22f7b76f12d33e3698240cbae0","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"67062d597408068e4a59e95851e98fed34b745da","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"a51edfd3e499e7d38c32241c40e8e4d371efca73","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"ba174889e770ae9f6683379b9eae9d8c94253080","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"4cc02bcbaa4a1933a82a9ea57a603fe2d059fc77","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5692bcf8929f7ef12b10d860da6cb90ca55752c0","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"094108f2a4e351a2fa496d6bd3e2388151416b3f","modified":1743776696202},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"7d7554573c005399bc8c2264a85896d2d51be1e1","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"543eaf9c7df7e0db841e5946ee5f9082c3c46290","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"ef8e8549fe7ad4b99793844a93b4a89f77f417d5","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"d9cdf564a822a585e67fd5bac8573ba87eeb3743","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"084dc4dfb41f55e237a9d6cf8c2f5dba729b83be","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"a0f5835f04358122e8b1d38dd3e8da09a1b5b431","modified":1743776696203},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"0af7c8754f04bdd9a02a14d880774753bd2e35ee","modified":1743776696203},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"ad66212554468b7067590308ed4cf40524fea662","modified":1743776696203},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4c9849df9c68d892c7df0ca28123aeb0dc9dc424","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"205ccc7d0ec6ce1193b46bc0c9ce0385594581fb","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5abe5480d83ff8b452a780a484d50a44091475bf","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"c4cda7b0c99015df29ce00fdfddd2f7679653754","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"dcff804c4c237e1e908481b44c1ac4e39ac0da34","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"1f8d715faf3b91b53426e38195c0920afb3bfa1c","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"992d192db7d1c96e995b85ed11c20c571d33fbad","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/shuoshuo.styl","hash":"79bb1d9a27822ed5675d1e52f5dbd0e2f5d5010a","modified":1743776696203},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"7543bb688876a946538d66b991c71b94b5216277","modified":1743776696203},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"d8a8275a68a1421c4c09b604cf78bea16c1d0463","modified":1743776696203},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"6c4cbdadd9a49029fe0c59e29808d873e5b6b6ee","modified":1743776696203},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"1f2b86df86df81c3a59377b29102314ffc73dfa6","modified":1743776696203},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"de8437a058a315d14d7e7034066f095b7b3ed4b4","modified":1743776696203},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"30d1f809efd252ed0233d96d4374efd2b01d2292","modified":1743776696203},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1743776696203},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"d27dbccaf3de1c9158d19e4fd49a25953cb5778d","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"3be8d0a75e7cc96548667cae0cb6a474279bd0b5","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"216f52fefc2274b542b549d8470503e6f1a308fb","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/series.styl","hash":"0657169849bc4bf4d93b5492ade040c8f58c1901","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"3a88eedcb694da79e92581ce50cb1a430b1fb615","modified":1743776696204},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"e846ddaef494d46cdfa2379deacfe74fa1cc5264","modified":1743776696204},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1743776696204},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"7119f2f2943de71999d3dd6ba5c60cde846f114b","modified":1743776696209},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"a2b783230a9143de69004cfc914d9f55e6fc1660","modified":1743776696209},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"fb0b341ac8cb3ce466d1853cea4704f1e3e5ba7f","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"b03ee8625149191f9d5d057bbc9824b68d8dd0c4","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f0a90d8e39915a74b16ef22e851f179415cd7eaa","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"cbfbcf34a24d21ba2b21cf9eedb76f4c3c563c5a","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"b5db4203a1392385838c73549ddeae0a4be67eba","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"7884883ec15792f7e54daacb3c62b851dde2b66a","modified":1743776696196},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"5b29badecbbe828112c001156023fc0566045cf6","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"24d094fd917947c0ca7492fa094328b1a183b873","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"e8438941085def0591a72fc9b0d705dbf107f54f","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"62466b251052cae609b6369d4cb4b6a85320757d","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"89c63a5f0c0ab6314de7158fbc8fcbc84997fc55","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"f2ea5249b3e6670f6c8c77868f4f42c502e43830","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"c81fa7d8a5cb96d1ae07bfa8c46b84a58161add1","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"8af585e6d6f73ee57114eefad574dc6e8ea9f570","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"592b2251db6c1abeb8b0eebe3b2e6d9aa0dec445","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"58914c58a190e3bc0aa37cb581e77e442b563501","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"7a80231fc71822e503879383a2d9611edf1d72dd","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"84f7cfde00f929fa3dc40349bcab060ec68f1b9f","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"53d99831f29aeb2e336ed1407d79590041f77002","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"30a7d157890de69deab28baa47fb7bb28b040efd","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"24f18b0c67803210d53abbf9c1d454c000b06eee","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"e2bf15357485cd502414b3b20f5b1f762a2fd014","modified":1743776696197},{"_id":"themes/butterfly/layout/includes/third-party/math/chartjs.pug","hash":"732eb1118ea1a73aa5c164d639097c614f8e9953","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"af66d13204030d47537b9e31a6173e63589ce7ff","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"b83db9fa64d42a0bfd97efb660e09be3f166a144","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"ca2fc5928ca292f29fd8333c73733344994096fb","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"db2f4fff80a1166476ea76ae004aa186df11bad3","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"f5ee1c9c8ffa4bca972d30f4de69268b8d47f052","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"e51e896ccb13900de38dc81cf44dc789e2418a12","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"efef352c1d122409575386bf3894dce8e87032e2","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"7f0ede1cd3fed2669c94a8e1b21bc0b183f310b8","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"013756ff3363344987cc00fc9bd833baf193c341","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"f8557548d2ad8dd149c562193991c6c6cda02415","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"187302dbc916852ff2fdf47061e272c061611dda","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"2622b4cf9189fa23e4a422aaf9ef272e4f2c6137","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"27fa75affebc6e84a487c62bceff783bde595256","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"fa4b4194749d05f7249f365f2b89c0281057ce54","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"72e2970b23570e308f8af5d8ba8e5e3321d01bbf","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"a7c07dbc1e970a5b247091458e1ee9b144a3366d","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"34edfebf0cace0852806be774910ccb0e0914650","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"d2e12a9fc302a4efe52c90d44896fbd73e193a1f","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"d376ec17fb19fcdcf0d2ad71330190146d3af879","modified":1743776696198},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ec6c685080634ac46ffbea1b8f10313388888f43","modified":1743776696198},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"9f02598b5e4296aec6470639d4bac4c9ac46392e","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"ef52ebf1e8e751a412f9456fdaeee7d88afd9a72","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"077ec530831be1d80e93da380406b9f5abd0918a","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"1883c91d43bff10aae55122a21e0b064b6f5c9dd","modified":1743776696202},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"de4bb5fc2dfca368b35e4c1109c92f7abc9e2245","modified":1743776696202},{"_id":"source/images/image-20240228221437713.png","hash":"9777edaad36a042437404218aca2c4c9aa8d9522","modified":1743772234000},{"_id":"source/_posts/java/image-20240228221437713.png","hash":"9777edaad36a042437404218aca2c4c9aa8d9522","modified":1743772234000},{"_id":"themes/butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1743776696207}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"hello","date":"2025-04-04T14:02:54.000Z","_content":"\n![img](/images/1.png)\n","source":"_posts/hello.md","raw":"---\ntitle: hello\ndate: 2025-04-04 22:02:54\ntags:\n---\n\n![img](/images/1.png)\n","slug":"hello","published":1,"updated":"2025-04-04T14:14:58.842Z","comments":1,"layout":"post","photos":[],"_id":"cm92vmg0t0000k7q19yirchpd","content":"<p><img src=\"/images/1.png\" alt=\"img\"></p>\n","excerpt":"","more":"<p><img src=\"/images/1.png\" alt=\"img\"></p>\n"},{"title":"java 初学者学习笔记","date":"2025-04-04T13:56:53.000Z","_content":"\n\n## 1，Java基础语法\n\n一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n\n- **对象**：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n- **类**：类是一个模板，它描述一类对象的行为和状态。\n- **方法**：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。\n- **实例变量**：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\n\n### 1-1 第一个Java程序\n\n下面看一个简单的 Java 程序，它将打印字符串 *Hello World*\n\n```Java\npublic class HelloWorld {\n    /* 第一个Java程序\n     * 它将打印字符串 Hello World\n     */\n    public static void main(String []args) {\n        System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n}\n```\n\n下面将逐步介绍如何保存、编译以及运行这个程序：\n\n- 打开代码编辑器，把上面的代码添加进去；\n- 把文件名保存为：HelloWorld.java；\n- 打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\\n- 在命令行窗口输入 **javac HelloWorld.java** 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。\n- 再键输入 **java HelloWorld** 按下回车键就可以运行程序了\n\n你将会在窗口看到 Hello World\n\n```shell\nC : > javac HelloWorld.java\nC : > java HelloWorld \nHello World\n```\n\nGif 图演示：\n\n![img](/images/java-HelloWorld.gif)\n\n### 1-2 基本语法\n\n编写 Java 程序时，应注意以下几点：\n\n- **大小写敏感**：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。\n- **类名**：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 **MyFirstJavaClass** 。\n- **方法名**：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。\n- **源文件名**：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 **.java**。（如果文件名和类名不相同则会导致编译错误）。\n- **主方法入口**：所有的 Java 程序由 **public static void main(String []args)** 方法开始执行。\n\n### 1-3 Java 标识符\n\nJava 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。\n\n关于 Java 标识符，有以下几点需要注意：\n\n- 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n- 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n- 关键字不能用作标识符\n- 标识符是大小写敏感的\n- 合法标识符举例：age、$salary、_value、__1_value\n- 非法标识符举例：123abc、-salary\n\n### 1-4 Java修饰符\n\n像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：\n\n- 访问控制修饰符 : default, public , protected, private\n- 非访问控制修饰符 : final, abstract, static, synchronized\n\n在后面的章节中我们会深入讨论 Java 修饰符。\n\n### 1-5 Java 变量\n\nJava 中主要有如下几种类型的变量\n\n- 局部变量\n- 类变量（静态变量）\n- 成员变量（非静态变量）\n\n### 1-6 Java 数组\n\n数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。\n\n### 1-7 Java 枚举\n\nava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。\n\n例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。\n\n```java\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM , LARGE }\n   FreshJuiceSize size;\n}\n \npublic class FreshJuiceTest {\n   public static void main(String []args){\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;\n   }\n}\n```\n\n### 1-8 Java 关键字\n\n![image-20240228195010033](/images/image-20240228195010033.png)\n\n### 1-9 Java注释\n\n类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。\n\n```Java\npublic class HelloWorld {\n   /* 这是第一个Java程序\n    *它将打印Hello World\n    * 这是一个多行注释的示例\n    */\n    public static void main(String []args){\n       // 这是单行注释的示例\n       /* 这个也是单行注释的示例 */\n       System.out.println(\"Hello World\"); \n    }\n}\n```\n\n### 1-10 Java 空行\n\n空白行或者有注释的行，Java 编译器都会忽略掉。\n\n### 1-11 继承\n\n在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。\n\n利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。\n\n------\n\n### 1-12 接口\n\n在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。\n\n接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。\n\n## 2，Java对象和类\n\n### 2-1 Java中的对象\n\n现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。\n\n拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。\n\n对比现实对象和软件对象，它们之间十分相似。\n\n软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。\n\n在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。\n\n### 2-2 Java中的类\n\n类可以看成是创建Java对象的模板。\n\n通过下面一个简单的类来理解下Java中类的定义：\n\n```Java\npublic class Dog{\n  String breed;\n  int age;\n  String color;\n  void barking(){\n  }\n \n  void hungry(){\n  }\n \n  void sleeping(){\n  }\n}\n```\n\n一个类可以包含以下类型变量：\n\n- **局部变量**：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。\n- **成员变量**：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。\n- **类变量**：类变量也声明在类中，方法体之外，但必须声明为static类型。\n\n一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。\n\n------\n\n### 2-3 构造方法\n\n每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。\n\n在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。\n\n下面是一个构造方法示例：\n\n```Java\npublic class Puppy{\n    public Puppy(){\n    }\n \n    public Puppy(String name){\n        // 这个构造器仅有一个参数：name\n    }\n}\n```\n\n### 2-4 创建对象\n\n对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：\n\n- **声明**：声明一个对象，包括对象名称和对象类型。\n- **实例化**：使用关键字new来创建一个对象。\n- **初始化**：使用new创建对象时，会调用构造方法初始化对象。\n\n下面是一个创建对象的例子：\n\n```java\npublic class Puppy{\n   public Puppy(String name){\n      //这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n   public static void main(String[] args){\n      // 下面的语句将创建一个Puppy对象\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n```\n\n编译并运行上面的程序，会打印出下面的结果：\n\n```\n小狗的名字是 : tommy\n```\n\n### 2-5 访问实例变量和方法\n\n通过已创建的对象来访问成员变量和成员方法，如下所示：\n\n```Java\n/* 实例化对象 */\nObject referenceVariable = new Constructor();\n/* 访问类中的变量 */\nreferenceVariable.variableName;\n/* 访问类中的方法 */\nreferenceVariable.methodName();\n```\n\n### 2-6 实例\n\n下面的例子展示如何访问实例变量和调用成员方法：\n\n```java\npublic class Puppy{\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n \n   public void setAge( int age ){\n       puppyAge = age;\n   }\n \n   public int getAge( ){\n       System.out.println(\"小狗的年龄为 : \" + puppyAge ); \n       return puppyAge;\n   }\n \n   public static void main(String[] args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"变量值 : \" + myPuppy.puppyAge ); \n   }\n}\n```\n\n编译并运行上面的程序，产生如下结果：\n\n```\n小狗的名字是 : tommy\n小狗的年龄为 : 2\n变量值 : 2\n```\n\n### 2-7 源文件声明规则\n\n在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。\n\n- 一个源文件中只能有一个public类\n- 一个源文件可以有多个非public类\n- 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。\n- 如果一个类定义在某个包中，那么package语句应该在源文件的首行。\n- 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。\n- import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\n\n类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。\n\n除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。\n\n### 2-8 Java包\n\n包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。\n\n### 2-9 Import语句\n\n在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。\n\n例如，下面的命令行将会命令编译器载入java_installation//images/io路径下的所有类\n\n```java\nimport java.io.*;\n```\n\n### 2-10 一个简单的例子\n\n在该例子中，我们创建两个类：**Employee** 和 **EmployeeTest**。\n\n首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。\n\nEmployee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee{\n   String name;\n   int age;\n   String designation;\n   double salary;\n   // Employee 类的构造器\n   public Employee(String name){\n      this.name = name;\n   }\n   // 设置age的值\n   public void empAge(int empAge){\n      age =  empAge;\n   }\n   /* 设置designation的值*/\n   public void empDesignation(String empDesig){\n      designation = empDesig;\n   }\n   /* 设置salary的值*/\n   public void empSalary(double empSalary){\n      salary = empSalary;\n   }\n   /* 打印信息 */\n   public void printEmployee(){\n      System.out.println(\"名字:\"+ name );\n      System.out.println(\"年龄:\" + age );\n      System.out.println(\"职位:\" + designation );\n      System.out.println(\"薪水:\" + salary);\n   }\n}\n```\n\n程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。\n\n下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。\n\n将下面的代码保存在 EmployeeTest.java文件中。\n\n**EmployeeTest.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class EmployeeTest{\n \n   public static void main(String[] args){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"RUNOOB1\");\n      Employee empTwo = new Employee(\"RUNOOB2\");\n \n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"高级程序员\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n \n      empTwo.empAge(21);\n      empTwo.empDesignation(\"菜鸟程序员\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n\n编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：\n\n```Java\n$ javac EmployeeTest.java\n$ java EmployeeTest \n名字:RUNOOB1\n年龄:26\n职位:高级程序员\n薪水:1000.0\n名字:RUNOOB2\n年龄:21\n职位:菜鸟程序员\n薪水:500.0\n```\n\n## 3，Java基本数据类型\n\n### 3-1 内置数据类型\n\nJava语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。\n\n#### 3-1-1 **byte：**\n\n- byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n- 最小值是 **-128（-2^7）**；\n- 最大值是 **127（2^7-1）**；\n- 默认值是 **0**；\n- byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n- 例子：byte a = 100，byte b = -50。\n\n#### 3-1-2 **short：**\n\n- short 数据类型是 16 位、有符号的以二进制补码表示的整数\n- 最小值是 **-32768（-2^15）**；\n- 最大值是 **32767（2^15 - 1）**；\n- Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n- 默认值是 **0**；\n- 例子：short s = 1000，short r = -20000。\n\n#### 3-1-3 **int：**\n\n- int 数据类型是32位、有符号的以二进制补码表示的整数；\n- 最小值是 **-2,147,483,648（-2^31）**；\n- 最大值是 **2,147,483,647（2^31 - 1）**；\n- 一般地整型变量默认为 int 类型；\n- 默认值是 **0** ；\n- 例子：int a = 100000, int b = -200000。\n\n#### 3-1-4 **long：**\n\n- long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n- 最小值是 **-9,223,372,036,854,775,808（-2^63）**；\n- 最大值是 **9,223,372,036,854,775,807（2^63 -1）**；\n- 这种类型主要使用在需要比较大整数的系统上；\n- 默认值是 **0L**；\n- 例子： long a = 100000L，Long b = -200000L。\n  \"L\"理论上不分大小写，但是若写成\"l\"容易与数字\"1\"混淆，不容易分辩。所以最好大写。\n\n#### 3-1-5 **float：**\n\n- float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\n- float 在储存大型浮点数组的时候可节省内存空间；\n- 默认值是 **0.0f**；\n- 浮点数不能用来表示精确的值，如货币；\n- 例子：float f1 = 234.5f。\n\n#### 3-1-6 **double：**\n\n- double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；\n- 浮点数的默认类型为double类型；\n- double类型同样不能表示精确的值，如货币；\n- 默认值是 **0.0d**；\n- 例子：double d1 = 123.4。\n\n#### 3-1-7 **boolean：**\n\n- boolean数据类型表示一位的信息；\n- 只有两个取值：true 和 false；\n- 这种类型只作为一种标志来记录 true/false 情况；\n- 默认值是 **false**；\n- 例子：boolean one = true。\n\n#### 3-1-8 **char：**\n\n- char类型是一个单一的 16 位 Unicode 字符；\n- 最小值是 **\\u0000**（即为0）；\n- 最大值是 **\\uffff**（即为65,535）；\n- char 数据类型可以储存任何字符；\n- 例子：char letter = 'A';。\n\n### 3-2 实例\n\n对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：\n\n```Java\npublic class PrimitiveTypeTest {  \n    public static void main(String[] args) {  \n        // byte  \n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);  \n        System.out.println(\"包装类：java.lang.Byte\");  \n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);  \n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);  \n        System.out.println();  \n  \n        // short  \n        System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);  \n        System.out.println(\"包装类：java.lang.Short\");  \n        System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);  \n        System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);  \n        System.out.println();  \n  \n        // int  \n        System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);  \n        System.out.println(\"包装类：java.lang.Integer\");  \n        System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);  \n        System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);  \n        System.out.println();  \n  \n        // long  \n        System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);  \n        System.out.println(\"包装类：java.lang.Long\");  \n        System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);  \n        System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);  \n        System.out.println();  \n  \n        // float  \n        System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);  \n        System.out.println(\"包装类：java.lang.Float\");  \n        System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);  \n        System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);  \n        System.out.println();  \n  \n        // double  \n        System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);  \n        System.out.println(\"包装类：java.lang.Double\");  \n        System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);  \n        System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);  \n        System.out.println();  \n  \n        // char  \n        System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);  \n        System.out.println(\"包装类：java.lang.Character\");  \n        // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  \n        System.out.println(\"最小值：Character.MIN_VALUE=\"  \n                + (int) Character.MIN_VALUE);  \n        // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  \n        System.out.println(\"最大值：Character.MAX_VALUE=\"  \n                + (int) Character.MAX_VALUE);  \n    }  \n}\n```\n\n编译以上代码输出结果如下所示：\n\n```Java\n基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127\n\n基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308\n\n基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\n```\n\nFloat和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的\"E+数字\"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。\n\n实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。\n\n### 3-3 类型默认值\n\n下表列出了 Java 各个类型的默认值：\n\n![image-20240228200611781](/images/image-20240228200611781.png)\n\n### 3-4 实例\n\n```Java\npublic class Test {\n    static boolean bool;\n    static byte by;\n    static char ch;\n    static double d;\n    static float f;\n    static int i;\n    static long l;\n    static short sh;\n    static String str;\n \n    public static void main(String[] args) {\n        System.out.println(\"Bool :\" + bool);\n        System.out.println(\"Byte :\" + by);\n        System.out.println(\"Character:\" + ch);\n        System.out.println(\"Double :\" + d);\n        System.out.println(\"Float :\" + f);\n        System.out.println(\"Integer :\" + i);\n        System.out.println(\"Long :\" + l);\n        System.out.println(\"Short :\" + sh);\n        System.out.println(\"String :\" + str);\n    }\n}\n```\n\n实例输出结果为：\n\n```Java\nBool     :false\nByte     :0\nCharacter:\nDouble   :0.0\nFloat    :0.0\nInteger  :0\nLong     :0\nShort    :0\nString   :null\n```\n\n### 3-5 引用类型\n\n- 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\n- 对象、数组都是引用数据类型。\n- 所有引用类型的默认值都是null。\n- 一个引用变量可以用来引用任何与之兼容的类型。\n- 例子：Site site = new Site(\"Runoob\")。\n\n### 3-6 Java 常量\n\n常量在程序运行时是不能被修改的。\n\n在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：\n\n```Java\nfinal double PI = 3.1415927;\n```\n\n虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。\n\n字面量可以赋给任何内置类型的变量。例如：\n\n```Java\nbyte a = 68;\nchar a = 'A'\n```\n\nbyte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。\n\n当使用常量的时候，前缀 **0** 表示 8 进制，而前缀 **0x** 代表 16 进制, 例如：\n\n```Java\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n```\n\n和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：\n\n```Java\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n字符串常量和字符常量都可以包含任何Unicode字符。例如：\n\n```Java\nchar a = '\\u0001';\nString a = \"\\u0001\";\n```\n\nJava语言支持一些特殊的转义字符序列。\n\n![image-20240228200803273](/images/image-20240228200803273.png)\n\n### 3-7 自动类型转换\n\n**整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。**\n\n转换从低级到高级。\n\n```Java\n低  ------------------------------------>  高\n\nbyte,short,char—> int —> long—> float —> double \n```\n\n数据类型转换必须满足如下规则：\n\n- \\1. 不能对boolean类型进行类型转换。\n\n- \\2. 不能把对象类型转换成不相关类的对象。\n\n- \\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n- \\4. 转换过程中可能导致溢出或损失精度，例如：\n\n  ```Java\n  int i =128;   \n  byte b = (byte)i;\n  ```\n\n  因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n- \\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n  ```Java\n  (int)23.7 == 23;        \n  (int)-45.89f == -45\n  ```\n\n**自动类型转换**\n\n必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。\n\n```Java\npublic class ZiDongLeiZhuan{\n        public static void main(String[] args){\n            char c1='a';//定义一个char类型\n            int i1 = c1;//char自动类型转换为int\n            System.out.println(\"char自动类型转换为int后的值等于\"+i1);\n            char c2 = 'A';//定义一个char类型\n            int i2 = c2+1;//char 类型和 int 类型计算\n            System.out.println(\"char类型和int计算后的值等于\"+i2);\n        }\n}\n```\n\n运行结果为:\n\n```\nchar自动类型转换为int后的值等于97\nchar类型和int计算后的值等于66\n```\n\n**解析：**c1 的值为字符 **a** ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 **i2=65+1=66**。\n\n### 3-8 强制类型转换\n\n- \\1. 条件是转换的数据类型必须是兼容的。\n- \\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：\n\n\n\n实例\n\n```Java\npublic class QiangZhiZhuanHuan{\n    public static void main(String[] args){\n        int i1 = 123;\n        byte b = (byte)i1;//强制类型转换为byte\n        System.out.println(\"int强制类型转换为byte后的值等于\"+b);\n    }\n}\n```\n\n- 运行结果：\n\n  ```\n  int强制类型转换为byte后的值等于123\n  ```\n\n### 3-9  隐含强制类型转换\n\n- \\1. 整数的默认类型是 int。\n- \\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。\n\n这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。\n\n## 4，Java变量类型\n\n- 在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n- type identifier [ = value][, identifier [= value] ...] ;\n\n- 格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。\n\n\n以下列出了一些变量的声明实例。注意有些包含了初始化过程。\n\n```Java\nint a, b, c;         // 声明三个int型整数：a、 b、c\nint d = 3, e = 4, f = 5; // 声明三个整数并赋予初值\nbyte z = 22;         // 声明并初始化 z\nString s = \"runoob\";  // 声明并初始化字符串 s\ndouble pi = 3.14159; // 声明了双精度浮点型变量 pi\nchar x = 'x';        // 声明变量 x 的值是字符 'x'。\n```\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n**实例**\n\n```Java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n \n    String str=\"hello world\";  // 实例变量\n \n    public void method(){\n \n        int i =0;  // 局部变量\n \n    }\n}\n```\n\n### 4-1 Java局部变量\n\n- 局部变量声明在方法、构造方法或者语句块中；\n- 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n- 访问修饰符不能用于局部变量；\n- 局部变量只在声明它的方法、构造方法或者语句块中可见；\n- 局部变量是在栈上分配的。\n- 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n#### 4-1-1 **实例 1**\n\n在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是: \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n小狗的年龄是: 7\n```\n\n#### 4-1-2 实例 2\n\n在下面的例子中 age 变量没有初始化，所以在编译时会出错：\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是 : \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n```\n\n### 4-2 实例变量\n\n- 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n- 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n- 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n- 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n- 实例变量可以声明在使用前或者使用后；\n- 访问修饰符可以修饰实例变量；\n- 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；\n- 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n- 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n**实例**\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class Employee{\n   // 这个实例变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"名字 : \" + name );\n      System.out.println(\"薪水 : \" + salary);\n   }\n \n   public static void main(String[] args){\n      Employee empOne = new Employee(\"RUNOOB\");\n      empOne.setSalary(1000.0);\n      empOne.printEmp();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ javac Employee.java \n$ java Employee\n名字 : RUNOOB\n薪水 : 1000.0\n```\n\n### 4-3 类变量（静态变量）\n\n- 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n- 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n- 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。\n- 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。\n- 静态变量在第一次被访问时创建，在程序结束时销毁。\n- 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。\n- 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n- 静态变量可以通过：*ClassName.VariableName*的方式访问。\n- 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n实例：\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee {\n    //salary是静态的私有变量\n    private static double salary;\n    // DEPARTMENT是一个常量\n    public static final String DEPARTMENT = \"开发人员\";\n    public static void main(String[] args){\n    salary = 10000;\n        System.out.println(DEPARTMENT+\"平均工资:\"+salary);\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n开发人员平均工资:10000.0\n```\n\n**注意：**如果其他类想要访问该变量，可以这样访问：**Employee.DEPARTMENT**。\n\n本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。\n\n## 5，Java修饰符\n\nJava语言提供了很多修饰符，主要分为以下两类：\n\n- 访问修饰符\n- 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：\n\n```Java\npublic class ClassName {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 5-1 访问控制修饰符\n\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n- **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n- **private** : 在同一类内可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**\n- **public** : 对所有类可见。使用对象：类、接口、变量、方法\n- **protected** : 对同一包内的类和所有子类可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**。\n\n我们可以通过以下表来说明访问权限：\n\n![image-20240228202210130](/images/image-20240228202210130.png)\n\n**默认访问修饰符-不使用任何关键字**\n\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 **public static final**,而接口里的方法默认情况下访问权限为 **public**。\n\n如下例所示，变量和方法的声明可以不使用任何修饰符。\n\n**实例**\n\n```Java\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n\n### 5-2 私有访问修饰符-private\n\n私有访问修饰符是最严格的访问级别，所以被声明为 **private** 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 **private**。\n\n声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。\n\nPrivate 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n\n下面的类使用了私有访问修饰符：\n\n```Java\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n\n实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）\n\n### 5-3 公有访问修饰符-public\n\n被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n\n以下函数使用了公有访问控制：\n\n```Java\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\nJava 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。\n\n### 5-4 受保护的访问修饰符-protected\n\nprotected 需要从以下两个点来分析说明：\n\n- **子类与基类在同一包中**：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；\n- **子类与基类不在同一包中**：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。\n\nprotected 可以修饰数据成员，构造方法，方法成员，**不能修饰类（内部类除外）**。\n\n子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。\n\n```Java\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n \nclass StreamingAudioPlayer extends AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n\n如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。\n\n如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。\n\n如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。\n\n### 5-5 访问控制和继承\n\n请注意以下方法继承的规则：\n\n- 父类中声明为 public 的方法在子类中也必须为 public。\n- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。\n- 父类中声明为 private 的方法，不能够被继承。\n\n### 5-6 非访问修饰符\n\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\n\nstatic 修饰符，用来修饰类方法和类变量。\n\nfinal 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\nabstract 修饰符，用来创建抽象类和抽象方法。\n\nsynchronized 和 volatile 修饰符，主要用于线程的编程。\n\n#### 5-6-1 static 修饰符\n\n- **静态变量：**\n\n  static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n- **静态方法：**\n\n  static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n对类变量和方法的访问可以直接使用 **classname.variablename** 和 **classname.methodname** 的方式访问。\n\n如下例所示，static修饰符用来创建类方法和类变量。\n\n```Java\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n \n   private static void addInstance() {\n      numInstances++;\n   }\n \n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n \n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" +\n      InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n          }\n      System.out.println(\"Created \" +\n      InstanceCounter.getCount() + \" instances\");\n   }\n}\n```\n\n以上实例运行编辑结果如下:\n\n```Java\nStarting with 0 instances\nCreated 500 instances\n```\n\n#### 5-6-2 final 修饰符\n\n**final 变量：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n```Java\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n \n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\n\n**inal 方法**\n\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\n声明 final 方法的主要目的是防止该方法的内容被修改。\n\n如下所示，使用 final 修饰符声明方法。\n\n```Java\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\n**final 类**\n\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n```Java\npublic final class Test {\n   // 类体\n}\n```\n\n### 5-7 abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n```Java\nabstract class Caravan{\n   private double price;\n   private String model;\n   private String year;\n   public abstract void goFast(); //抽象方法\n   public abstract void changeColor();\n}\n```\n\n**抽象方法**\n\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n\n抽象方法不能被声明成 final 和 static。\n\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n\n抽象方法的声明以分号结尾，例如：**public abstract sample();**。\n\n```Java\npublic abstract class SuperClass{\n    abstract void m(); //抽象方法\n}\n \nclass SubClass extends SuperClass{\n     //实现抽象方法\n      void m(){\n          .........\n      }\n}\n```\n\n### synchronized 修饰符\n\nsynchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。\n\n```Java\npublic synchronized void showDetails(){\n.......\n}\n```\n\n### transient 修饰符\n\n序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n\n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n\n```Java\npublic transient int limit = 55;   // 不会持久化\npublic int b; // 持久化\n```\n\n### volatile 修饰符\n\nvolatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。\n\n```javascript\npublic class MyRunnable implements Runnable\n{\n    private volatile boolean active;\n    public void run()\n    {\n        active = true;\n        while (active) // 第一行\n        {\n            // 代码\n        }\n    }\n    public void stop()\n    {\n        active = false; // 第二行\n    }\n}\n```\n\n通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 ***第一行\\*** 中缓冲区的 active 值被使用，那么在 ***第二行\\*** 的 active 值为 false 时循环不会停止。\n\n但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。\n\n## 6，Java运算符\n\n### 6-1 算术运算符\n\n算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。\n\n表格中的实例假设整数变量A的值为10，变量B的值为20：\n\n![image-20240228212912288](/images/image-20240228212912288.png)\n\n下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     int c = 25;\n     int d = 25;\n     System.out.println(\"a + b = \" + (a + b) );\n     System.out.println(\"a - b = \" + (a - b) );\n     System.out.println(\"a * b = \" + (a * b) );\n     System.out.println(\"b / a = \" + (b / a) );\n     System.out.println(\"b % a = \" + (b % a) );\n     System.out.println(\"c % a = \" + (c % a) );\n     System.out.println(\"a++   = \" +  (a++) );\n     System.out.println(\"a--   = \" +  (a--) );\n     // 查看  d++ 与 ++d 的不同\n     System.out.println(\"d++   = \" +  (d++) );\n     System.out.println(\"++d   = \" +  (++d) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na + b = 30\na - b = -10\na * b = 200\nb / a = 2\nb % a = 0\nc % a = 5\na++   = 10\na--   = 11\nd++   = 25\n++d   = 27\n```\n\n### 6-2 自增自减运算符\n\n**1、自增（++）自减（--）运算符**是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 3;//定义一个变量；\n        int b = ++a;//自增运算\n        int c = 3;\n        int d = --c;//自减运算\n        System.out.println(\"进行自增运算后的值等于\"+b);\n        System.out.println(\"进行自减运算后的值等于\"+d);\n    }\n}\n```\n\n运行结果为：\n\n```\n进行自增运算后的值等于4\n进行自减运算后的值等于2\n```\n\n解析：\n\n- int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4\n- int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2\n\n**2、前缀自增自减法(++a,--a):** 先进行自增或者自减运算，再进行表达式运算。\n\n**3、后缀自增自减法(a++,a--):** 先进行表达式运算，再进行自增或者自减运算 实例：\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        int b = 5;\n        int x = 2*++a;\n        int y = 2*b++;\n        System.out.println(\"自增运算符前缀运算后a=\"+a+\",x=\"+x);\n        System.out.println(\"自增运算符后缀运算后b=\"+b+\",y=\"+y);\n    }\n}\n```\n\n运行结果为：\n\n```\n自增运算符前缀运算后a=6，x=12\n自增运算符后缀运算后b=6，y=10\n```\n\n### 6-3 关系运算符\n\n下表为Java支持的关系运算符\n\n表格中的实例整数变量A的值为10，变量B的值为20：\n\n![image-20240228213115946](/images/image-20240228213115946.png)\n\n下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     System.out.println(\"a == b = \" + (a == b) );\n     System.out.println(\"a != b = \" + (a != b) );\n     System.out.println(\"a > b = \" + (a > b) );\n     System.out.println(\"a < b = \" + (a < b) );\n     System.out.println(\"b >= a = \" + (b >= a) );\n     System.out.println(\"b <= a = \" + (b <= a) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na == b = false\na != b = true\na > b = false\na < b = true\nb >= a = true\nb <= a = false\n```\n\n### 6-4 位运算符\n\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。\n\n位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：\n\n```Java\nA = 0011 1100\nB = 0000 1101\n-----------------\nA&B = 0000 1100\nA | B = 0011 1101\nA ^ B = 0011 0001\n~A= 1100 0011\n```\n\n下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：\n\n![image-20240228213253912](/images/image-20240228213253912.png)\n\n下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     int a = 60; /* 60 = 0011 1100 */ \n     int b = 13; /* 13 = 0000 1101 */\n     int c = 0;\n     c = a & b;       /* 12 = 0000 1100 */\n     System.out.println(\"a & b = \" + c );\n \n     c = a | b;       /* 61 = 0011 1101 */\n     System.out.println(\"a | b = \" + c );\n \n     c = a ^ b;       /* 49 = 0011 0001 */\n     System.out.println(\"a ^ b = \" + c );\n \n     c = ~a;          /*-61 = 1100 0011 */\n     System.out.println(\"~a = \" + c );\n \n     c = a << 2;     /* 240 = 1111 0000 */\n     System.out.println(\"a << 2 = \" + c );\n \n     c = a >> 2;     /* 15 = 1111 */\n     System.out.println(\"a >> 2  = \" + c );\n  \n     c = a >>> 2;     /* 15 = 0000 1111 */\n     System.out.println(\"a >>> 2 = \" + c );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2  = 15\na >>> 2 = 15\n```\n\n### 6-5 逻辑运算符\n\n下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假\n\n![image-20240228213402353](/images/image-20240228213402353.png)\n\n下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     boolean a = true;\n     boolean b = false;\n     System.out.println(\"a && b = \" + (a&&b));\n     System.out.println(\"a || b = \" + (a||b) );\n     System.out.println(\"!(a && b) = \" + !(a && b));\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na && b = false\na || b = true\n!(a && b) = true\n```\n\n### 6-6 短路逻辑运算符\n\n当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。\n\n```Java\npublic class LuoJi{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        boolean b = (a<4)&&(a++<10);\n        System.out.println(\"使用短路逻辑运算符的结果为\"+b);\n        System.out.println(\"a的结果为\"+a);\n    }\n}\n```\n\n运行结果为：\n\n```\n使用短路逻辑运算符的结果为false\na的结果为5\n```\n\n**解析：** *该程序使用到了短路逻辑运算符(&&)，首先判断 a<4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++<10 的判断，所以 a 的值为 5。*\n\n### 6-7 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n![image-20240228213543244](/images/image-20240228213543244.png)\n\n面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        int c = 0;\n        c = a + b;\n        System.out.println(\"c = a + b = \" + c );\n        c += a ;\n        System.out.println(\"c += a  = \" + c );\n        c -= a ;\n        System.out.println(\"c -= a = \" + c );\n        c *= a ;\n        System.out.println(\"c *= a = \" + c );\n        a = 10;\n        c = 15;\n        c /= a ;\n        System.out.println(\"c /= a = \" + c );\n        a = 10;\n        c = 15;\n        c %= a ;\n        System.out.println(\"c %= a  = \" + c );\n        c <<= 2 ;\n        System.out.println(\"c <<= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c &= a ;\n        System.out.println(\"c &= a  = \" + c );\n        c ^= a ;\n        System.out.println(\"c ^= a   = \" + c );\n        c |= a ;\n        System.out.println(\"c |= a   = \" + c );\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nc = a + b = 30\nc += a  = 40\nc -= a = 30\nc *= a = 300\nc /= a = 1\nc %= a  = 5\nc <<= 2 = 20\nc >>= 2 = 5\nc >>= 2 = 1\nc &= a  = 0\nc ^= a   = 10\nc |= a   = 10\n```\n\n### 6-8 条件运算符（?:）\n\n条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。\n\n```Java\nvariable x = (expression) ? value if true : value if false\n```\n\n```Java\n// Test.java 文件代码：\n    \npublic class Test {\n   public static void main(String[] args){\n      int a , b;\n      a = 10;\n      // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30\n      b = (a == 1) ? 20 : 30;\n      System.out.println( \"Value of b is : \" +  b );\n \n      // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30\n      b = (a == 10) ? 20 : 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nValue of b is : 30\nValue of b is : 20\n```\n\n### 6-9 instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\ntrue\n```\n\n### 6-10 Java运算符优先级\n\n当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。\n\n例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。\n\n再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。\n\n下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。\n\n![image-20240228213815636](/images/image-20240228213815636.png)\n\n## 7，Java循环结构\n\n### 7-1 while 循环\n\nwhile是最基本的循环，它的结构为：\n\n```Java\nwhile( 布尔表达式 ) {\n  //循环内容\n}\n```\n\n只要布尔表达式为 true，循环就会一直执行下去。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n   public static void main(String args[]) {\n      int x = 10;\n      while( x < 20 ) {\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-2 do…while 循环\n\n对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。\n\ndo…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。\n\n```Java\ndo {\n       //代码语句\n}while(布尔表达式);\n```\n\n**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int x = 10;\n \n      do{\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }while( x < 20 );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-3 for循环\n\n虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。\n\nfor循环执行的次数是在执行前就确定的。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    //代码语句\n}\n```\n\n关于 for 循环有以下几点说明：\n\n- 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。\n- 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。\n- 执行一次循环后，更新循环控制变量。\n- 再次检测布尔表达式。循环执行上面的过程。\n\n实例\n\n**Test.java 文件代码**\n\n```java\npublic class Test {\n   public static void main(String args[]) {\n \n      for(int x = 10; x < 20; x = x+1) {\n         System.out.print(\"value of x : \" + x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-4 Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\n```java\nfor(声明语句 : 表达式)\n{\n   //代码句子\n}\n```\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10,20,30,40,50,\nJames,Larry,Tom,Lacy,\n```\n\n### 7-5 break 关键字\n\nbreak 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。\n\nbreak 跳出最里层的循环，并且继续执行该循环下面的语句。\n\n语法\n\nbreak 的用法很简单，就是循环结构中的一条语句：\n\n```\nbreak;\n```\n\n实例\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         // x 等于 30 时跳出循环\n         if( x == 30 ) {\n            break;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n10\n20\n```\n\n### 7-6 continue 关键字\n\ncontinue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。\n\n在 for 循环中，continue 语句使程序立即跳转到更新语句。\n\n在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。\n\n语法\n\ncontinue 就是循环体中一条简单的语句：\n\n```\ncontinue;\n```\n\n实例\n\n```java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         if( x == 30 ) {\n        continue;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10\n20\n40\n50\n```\n\n## 8，Java条件语句\n\n### 8-1 if...else语句\n\nif 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。\n\n语法\n\nif…else 的用法如下：\n\n```Java\nif(布尔表达式){\n   //如果布尔表达式的值为true\n}else{\n   //如果布尔表达式的值为false\n}\n```\n\n实例\n\n```Java\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n \n      if( x < 20 ){\n         System.out.print(\"这是 if 语句\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n这是 else 语句\n```\n\n### 8-2 if...else if...else 语句\n\nif 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。\n\n使用 if，else if，else 语句的时候，需要注意下面几点：\n\n- if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。\n- if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。\n- 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。\n\n**语法**\n\nif...else 语法格式如下:\n\n```java\nif(布尔表达式 1){\n   //如果布尔表达式 1的值为true执行代码\n}else if(布尔表达式 2){\n   //如果布尔表达式 2的值为true执行代码\n}else if(布尔表达式 3){\n   //如果布尔表达式 3的值为true执行代码\n}else {\n   //如果以上布尔表达式都不为true执行代码\n}\n```\n\n**实例**\n\n```Java\n// Test.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int x = 30;\n \n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\nValue of X is 30\n```\n\n### 8-3 嵌套的 if…else 语句\n\n使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。\n\n**语法**\n\n嵌套的 if…else 语法格式如下：\n\n```java\nif(布尔表达式 1){\n   ////如果布尔表达式 1的值为true执行代码\n   if(布尔表达式 2){\n      ////如果布尔表达式 2的值为true执行代码\n   }\n}\n```\n\n你可以像 if 语句一样嵌套 else if...else。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n \n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n以上代码编译运行结果如下：\n\n```java\nX = 30 and Y = 10\n```\n\n## 9，Java switch case 语句\n\nswitch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。\n\n**语法**\n\nswitch case 语句语法格式如下：\n\n```Java\nswitch(expression){\n    case value :\n       //语句\n       break; //可选\n    case value :\n       //语句\n       break; //可选\n    //你可以有任意数量的case语句\n    default : //可选\n       //语句\n}\n```\n\nswitch case 语句有如下规则：\n\n- switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。\n- switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。\n- case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。\n- 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。\n- 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。\n- switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。\n\n**switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。**\n\n**实例**\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n \n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n            break;\n         case 'F' :\n            System.out.println(\"你需要再努力努力\");\n            break;\n         default :\n            System.out.println(\"未知等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```Java\n良好\n你的等级是 C\n```\n\n如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int i = 5;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\ndefault\n```\n\n如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。\n\n```Java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\ndefault\n```\n\n如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         case 3:\n            System.out.println(\"3\"); break;\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\n3\n```\n\n## 10，Java Number & Math 类\n\n一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：**byte、int、long、double** 等。\n\n```Java\nint a = 5000;\nfloat b = 13.65f;\nbyte c = 0x4a;\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。\n\n所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。\n\n这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。\n\n下面是一个使用 Integer 对象的实例：\n\n```java\n// Test.java 文件代码：\n\npublic class Test{\n \n   public static void main(String args[]){\n      Integer x = 5;\n      x =  x + 10;\n      System.out.println(x); \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n15\n```\n\n当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。\n\n### 10-1 Java Math 类\n\nJava 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。\n\nMath 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。\n\n```java\nTest.java 文件代码：\npublic class Test {  \n    public static void main (String []args)  \n    {  \n        System.out.println(\"90 度的正弦值：\" + Math.sin(Math.PI/2));  \n        System.out.println(\"0度的余弦值：\" + Math.cos(0));  \n        System.out.println(\"60度的正切值：\" + Math.tan(Math.PI/3));  \n        System.out.println(\"1的反正切值： \" + Math.atan(1));  \n        System.out.println(\"π/2的角度值：\" + Math.toDegrees(Math.PI/2));  \n        System.out.println(Math.PI);  \n    }  \n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n90 度的正弦值：1.0\n0度的余弦值：1.0\n60度的正切值：1.7320508075688767\n1的反正切值： 0.7853981633974483\nπ/2的角度值：90.0\n3.141592653589793\n```\n\n### 10-2 Number & Math 类方法\n\n下面的表中列出的是 Number & Math 类常用的一些方法：\n\n![image-20240228220453132](/images/image-20240228220453132.png)\n\n### 10-3 Math 的 floor,round 和 ceil 方法实例比较\n\n![image-20240228220635826](/images/image-20240228220635826.png)\n\n**floor,round 和 ceil 实例：**\n\n```java\npublic class Main {   \n  public static void main(String[] args) {   \n    double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };   \n    for (double num : nums) {   \n      test(num);   \n    }   \n  }   \n  \n  private static void test(double num) {   \n    System.out.println(\"Math.floor(\" + num + \")=\" + Math.floor(num));   \n    System.out.println(\"Math.round(\" + num + \")=\" + Math.round(num));   \n    System.out.println(\"Math.ceil(\" + num + \")=\" + Math.ceil(num));   \n  }   \n}\n```\n\n以上实例执行输出结果为：\n\n```java\nMath.floor(1.4)=1.0\nMath.round(1.4)=1\nMath.ceil(1.4)=2.0\nMath.floor(1.5)=1.0\nMath.round(1.5)=2\nMath.ceil(1.5)=2.0\nMath.floor(1.6)=1.0\nMath.round(1.6)=2\nMath.ceil(1.6)=2.0\nMath.floor(-1.4)=-2.0\nMath.round(-1.4)=-1\nMath.ceil(-1.4)=-1.0\nMath.floor(-1.5)=-2.0\nMath.round(-1.5)=-1\nMath.ceil(-1.5)=-1.0\nMath.floor(-1.6)=-2.0\nMath.round(-1.6)=-2\nMath.ceil(-1.6)=-1.0\n```\n\n## 11，Java Character 类\n\nCharacter 类用于对单个字符进行操作。\n\nCharacter 类在对象中包装一个基本类型 **char** 的值\n\n```Java\nchar ch = 'a';\n \n// Unicode 字符表示形式\nchar uniChar = '\\u039A'; \n \n// 字符数组\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。\n\nCharacter类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：\n\n```Java\nCharacter ch = new Character('a');\n```\n\n在某些情况下，Java编译器会自动创建一个Character对象。\n\n例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。\n\n```Java\n// 原始字符 'a' 装箱到 Character 对象 ch 中\nCharacter ch = 'a';\n \n// 原始字符 'x' 用 test 方法装箱\n// 返回拆箱的值到 'c'\nchar c = test('x');\n```\n\n### 11-1 转义序列\n\n前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。\n\n下面列表展示了Java的转义序列：\n\n![image-20240228220904427](/images/image-20240228220904427.png)\n\n**实例**\n\n当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。\n\n以下实例转义双引号并输出：\n\n```Java\nTest.java 文件代码：\npublic class Test {\n \n   public static void main(String args[]) {\n      System.out.println(\"访问\\\"菜鸟教程!\\\"\");\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n访问\"菜鸟教程!\"\n```\n\n### 11-2 Character 方法\n\n下面是Character类的方法：\n\n![image-20240228220959034](/images/image-20240228220959034.png)\n\n## 12，Java String 类\n\n### 12-1 创建字符串\n\n创建字符串最简单的方式如下:\n\n```Java\nString greeting = \"菜鸟教程\";\n```\n\n在代码中遇到字符串常量时，这里的值是 \"**菜鸟教程**\"\"，编译器会使用该值创建一个 String 对象。\n\n和其它对象一样，可以使用关键字和构造方法来创建 String 对象。\n\nString 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo{\n   public static void main(String args[]){\n      char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'};\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nrunoob\n```\n\n**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。\n\n如果需要对字符串做很多修改，那么应该选择使用 [StringBuffer & StringBuilder 类](http://it028.com/java-stringbuffer.html)。\n\n### 12-2 字符串长度\n\n用于获取有关对象的信息的方法称为访问器方法。\n\nString 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。\n\n下面的代码执行后，len 变量等于 14:\n\n```java\n// StringDemo.java 文件代码：\npublic class StringDemo {\n    public static void main(String args[]) {\n        String site = \"www.runoob.com\";\n        int len = site.length();\n        System.out.println( \"菜鸟教程网址长度 : \" + len );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程网址长度 : 14\n```\n\n### 12-3 连接字符串\n\nString 类提供了连接两个字符串的方法：\n\nstring1.concat(string2);\n\n返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：\n\n```\n\"我的名字是 \".concat(\"Runoob\");\n```\n\n更常用的是使用'+'操作符来连接字符串，如：\n\n```\n\"Hello,\" + \" runoob\" + \"!\"\n```\n\n结果如下:\n\n```\n\"Hello, runoob!\"\n```\n\n下面是一个例子:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo {\n    public static void main(String args[]) {     \n        String string1 = \"菜鸟教程网址：\";     \n        System.out.println(\"1、\" + string1 + \"www.runoob.com\");  \n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1、菜鸟教程网址：www.runoob.com\n```\n\n### 12-4 创建格式化字符串\n\n我们知道输出格式化数字可以使用 printf() 和 format() 方法。\n\nString 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。\n\nString 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。\n\n如下所示：\n\n```java\nSystem.out.printf(\"浮点型变量的值为 \" +\n                  \"%f, 整型变量的值为 \" +\n                  \" %d, 字符串变量的值为 \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n```\n\n你也可以这样写\n\n```java\nString fs;\nfs = String.format(\"浮点型变量的值为 \" +\n                   \"%f, 整型变量的值为 \" +\n                   \" %d, 字符串变量的值为 \" +\n                   \" %s\", floatVar, intVar, stringVar);\n```\n\n### 12-5 String 方法\n\n下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm('https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html') 文档:\n\n![image-20240228221437713](/images/image-20240228221437713.png)\n\n## 13，Java StringBuffer 和 StringBuilder 类\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n```Java\nTest.java 文件代码：\npublic class Test{\n  public static void main(String args[]){\n    StringBuffer sBuffer = new StringBuffer(\"菜鸟教程官网：\");\n    sBuffer.append(\"www\");\n    sBuffer.append(\".runoob\");\n    sBuffer.append(\".com\");\n    System.out.println(sBuffer);  \n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程官网：www.runoob.com\n```\n\n### 13-1 StringBuffer 方法\n\n以下是 StringBuffer 类支持的主要方法\n\n![image-20240228221542960](/images/image-20240228221542960.png)\n\n下面的列表里的方法和 String 类的方法类似：\n\n![image-20240228221620605](/images/image-20240228221620605.png)\n\n## 14，Java数组\n\n### 14-1 声明数组变量\n\n首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：\n\n```Java\ndataType[] arrayRefVar;   // 首选的方法\n \n或\n \ndataType arrayRefVar[];  // 效果相同，但不是首选方法\n```\n\n**注意:** 建议使用 **dataType[] arrayRefVar** 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。\n\n下面是这两种语法的代码示例：\n\n```Java\ndouble[] myList;         // 首选的方法\n \n或\n \ndouble myList[];         //  效果相同，但不是首选方法\n```\n\n### 14-2 创建数组\n\nJava语言使用new操作符来创建数组，语法如下：\n\n```\narrayRefVar = new dataType[arraySize];\n```\n\n上面的语法语句做了两件事：\n\n- 一、使用 dataType[arraySize] 创建了一个数组。\n- 二、把新创建的数组的引用赋值给变量 arrayRefVar。\n\n数组变量的声明，和创建数组可以用一条语句完成，如下所示：\n\n```\ndataType[] arrayRefVar = new dataType[arraySize];\n```\n\n另外，你还可以使用如下的方式创建数组。\n\n```\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n```\n\n数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。\n\n**实例**\n\n下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。\n\n```Java\nTestArray.java 文件代码：\npublic class TestArray {\n   public static void main(String[] args) {\n      // 数组大小\n      int size = 10;\n      // 定义数组\n      double[] myList = new double[size];\n      myList[0] = 5.6;\n      myList[1] = 4.5;\n      myList[2] = 3.3;\n      myList[3] = 13.2;\n      myList[4] = 4.0;\n      myList[5] = 34.33;\n      myList[6] = 34.0;\n      myList[7] = 45.45;\n      myList[8] = 99.993;\n      myList[9] = 11123;\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < size; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"总和为： \" + total);\n   }\n}\n```\n\n以上实例输出结果为：\n\n```\n总和为： 11367.373\n```\n\n### 14-3 处理数组\n\n数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。\n\n**示例**\n\n该实例完整地展示了如何创建、初始化和操纵数组：\n\n```Java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      // 查找最大元素\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n```\n\n### 14-4 For-Each 循环\n\nJDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。\n\n语法格式如下：\n\n```java\nfor(type element: array)\n{\n    System.out.println(element);\n}\n```\n\n**实例**\n\n该实例用来显示数组 myList 中的所有元素：\n\n```java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1.9\n2.9\n3.4\n3.5\n```\n\n### 14-5 数组作为函数的参数\n\n数组可以作为参数传递给方法。\n\n例如，下面的例子就是一个打印 int 数组中元素的方法:\n\n```java\npublic static void printArray(int[] array) {\n  for (int i = 0; i < array.length; i++) {\n    System.out.print(array[i] + \" \");\n  }\n}\n```\n\n下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：\n\n```java\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n```\n\n### 14-6 数组作为函数的返回值\n\n```java\npublic static int[] reverse(int[] list) {\n  int[] result = new int[list.length];\n \n  for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n    result[j] = list[i];\n  }\n  return result;\n}\n```\n\n### 14-7 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：\n\n```java\nString str[][] = new String[3][4];\n```\n\n#### 14-7-1 多维数组的动态初始化（以二维数组为例）\n\n1. 直接为每一维分配空间，格式如下：\n\n```java\ntype[][] typeName = new type[typeLength1][typeLength2];\n```\n\ntype 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。\n\n例如：\n\n```java\nint a[][] = new int[2][3];\n```\n\n解析：\n\n二维数组 a 可以看成一个两行三列的数组。\n\n2，从最高维开始，分别为每一维分配空间，例如：\n\n```Java\nString s[][] = new String[2][];\ns[0] = new String[2];\ns[1] = new String[3];\ns[0][0] = new String(\"Good\");\ns[0][1] = new String(\"Luck\");\ns[1][0] = new String(\"to\");\ns[1][1] = new String(\"you\");\ns[1][2] = new String(\"!\");\n```\n\n解析：\n\n**s[0]=new String[2]** 和 **s[1]=new String[3]** 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 **s0=new String(\"Good\")** 等操作。\n\n#### 14-7-2 多维数组的引用（以二维数组为例）\n\n对二维数组中的每个元素，引用方式为 **arrayName[index1][index2]**，例如：\n\n```Java\nnum[1][0];\n```\n\n### 14-8 Arrays 类\n\njava.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。\n\n具有以下功能：\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n具体说明请查看下表：\n\n![image-20240228222507296](/images/image-20240228222507296.png)\n\n## 15，Java 日期时间\n\njava.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。\n\n第一个构造函数使用当前日期和时间来初始化对象。\n\n```Java\nDate( )\n```\n\n第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。\n\n```\nDate(long millisec)\n```\n\nDate对象创建以后，可以调用下面的方法。\n\n![image-20240228222725206](/images/image-20240228222725206.png)\n\n### 15-1 获取当前日期时间\n\nJava中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用 toString() 函数显示日期时间\n       System.out.println(date.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nMon May 04 09:51:52 CDT 2013\n```\n\n### 15-2 日期比较\n\nJava使用以下三种方法来比较两个日期：\n\n- 使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。\n- 使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。\n- 使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。\n\n### 15-3 使用 SimpleDateFormat 格式化日期\n\nSimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：\n\n```Java\nimport  java.util.*;\nimport java.text.*;\n \npublic class DateDemo {\n   public static void main(String args[]) {\n \n      Date dNow = new Date( );\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n \n      System.out.println(\"当前时间为: \" + ft.format(dNow));\n   }\n}\n```\n\n```\nSimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n```\n\n这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。\n\n**注意**:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。\n\n以上实例编译运行结果如下:\n\n```\n当前时间为: 2018-09-06 10:16:34\n```\n\n### 15-4 日期和时间的格式化编码\n\n时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：\n\n![image-20240228222933035](/images/image-20240228222933035.png)\n\n### 15-5 使用printf格式化日期\n\nprintf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 **%t** 开头并且以下面表格中的一个字母结尾。\n\n![image-20240228223002094](/images/image-20240228223002094.png)\n\n**实例**\n\n```Java\nimport java.util.Date;\n \npublic class DateDemo {\n \n  public static void main(String args[]) {\n     // 初始化 Date 对象\n     Date date = new Date();\n \n     //c的使用  \n    System.out.printf(\"全部日期和时间信息：%tc%n\",date);          \n    //f的使用  \n    System.out.printf(\"年-月-日格式：%tF%n\",date);  \n    //d的使用  \n    System.out.printf(\"月/日/年格式：%tD%n\",date);  \n    //r的使用  \n    System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\",date);  \n    //t的使用  \n    System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\",date);  \n    //R的使用  \n    System.out.printf(\"HH:MM格式（24时制）：%tR\",date);  \n  }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  \n年-月-日格式：2012-09-10  \n月/日/年格式：09/10/12  \nHH:MM:SS PM格式（12时制）：10:43:36 上午  \nHH:MM:SS格式（24时制）：10:43:36  \nHH:MM格式（24时制）：10:43  \n```\n\n如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。\n\n索引必须紧跟在%后面，而且必须以$结束。例如\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用toString()显示日期和时间\n       System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n或者，你可以使用 < 标志。它表明先前被格式化的参数要被再次使用。例如：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 显示格式化时间\n       System.out.printf(\"%s %tB %<te, %<tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：\n\n```Java\nimport java.util.*;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       Date date=new Date();                                      \n        //b的使用，月份简称  \n        String str=String.format(Locale.US,\"英文月份简称：%tb\",date);       \n        System.out.println(str);                                                                              \n        System.out.printf(\"本地月份简称：%tb%n\",date);  \n        //B的使用，月份全称  \n        str=String.format(Locale.US,\"英文月份全称：%tB\",date);  \n        System.out.println(str);  \n        System.out.printf(\"本地月份全称：%tB%n\",date);  \n        //a的使用，星期简称  \n        str=String.format(Locale.US,\"英文星期的简称：%ta\",date);  \n        System.out.println(str);  \n        //A的使用，星期全称  \n        System.out.printf(\"本地星期的简称：%tA%n\",date);  \n        //C的使用，年前两位  \n        System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\",date);  \n        //y的使用，年后两位  \n        System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\",date);  \n        //j的使用，一年的天数  \n        System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\",date);  \n        //m的使用，月份  \n        System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\",date);  \n        //d的使用，日（二位，不够补零）  \n        System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\",date);  \n        //e的使用，日（一位不补零）  \n        System.out.printf(\"月份的日（前面不补0）：%te\",date);  \n   }\n}\n```\n\n输出结果为：\n\n```Java\n英文月份简称：May\n本地月份简称：五月\n英文月份全称：May\n本地月份全称：五月\n英文星期的简称：Thu\n本地星期的简称：星期四\n年的前两位数字（不足两位前面补0）：20\n年的后两位数字（不足两位前面补0）：17\n一年中的天数（即年的第几天）：124\n两位数字的月份（不足两位前面补0）：05\n两位数字的日（不足两位前面补0）：04\n月份的日（前面不补0）：4\n```\n\n------\n\n### 15-6 解析字符串为时间\n\nSimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：\n\n```Java\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n \n      System.out.print(input + \" Parses as \"); \n \n      Date t; \n \n      try { \n          t = ft.parse(input); \n          System.out.println(t); \n      } catch (ParseException e) { \n          System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ java DateDemo\n1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818\n$ java DateDemo 2007-12-01\n2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007\n```\n\n### 15-7 Java 休眠(sleep)\n\nsleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。\n\n你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：\n\n```Java\nimport java.util.*;\n  \npublic class SleepDemo {\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(1000*3);   // 休眠3秒\n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) { \n          System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nThu Sep 17 10:20:30 CST 2015\n\nThu Sep 17 10:20:33 CST 2015\n```\n\n### 15-8 测量时间\n\n下面的一个例子表明如何测量时间间隔（以毫秒为单位）：\n\n```Java\nimport java.util.*;\n  \npublic class DiffDemo {\n \n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nFri Jan 08 09:48:47 CST 2016\n\nFri Jan 08 09:48:50 CST 2016\n\nDifference is : 3019\n```\n\n### 15-9 Calendar类\n\n我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。\n\nCalendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。\n\nCalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。\n\n#### 15-9-1 创建一个代表系统当前日期的Calendar对象\n\n```Java\nCalendar c = Calendar.getInstance();//默认是当前日期\n```\n\n#### 15-9-2 创建一个指定日期的Calendar对象\n\n使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。\n\n```Java\n//创建一个代表2009年6月12日的Calendar对象\nCalendar c1 = Calendar.getInstance();\nc1.set(2009, 6 - 1, 12);\n```\n\n#### 15-9-3 Calendar类对象字段类型\n\nCalendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想\n\n![image-20240228225026914](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225026914.png)\n\n#### 15-9-4 Calendar类对象信息的设置\n\n**Set设置**\n\n如：\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n调用：\n\n```\npublic final void set(int year,int month,int date)\nc1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12\n```\n\n利用字段类型设置\n\n如果只设定某个字段，例如日期的值，则可以使用如下set方法：\n\n```\npublic void set(int field,int value)\n```\n\n把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算\n\n```\nc1.set(Calendar.DATE,10);\n```\n\n把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算\n\n```\nc1.set(Calendar.YEAR,2008);\n```\n\n其他字段属性set的意义以此类推\n\n**Add设置**\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, 10);\n```\n\n把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, -10);\n```\n\n其他字段属性的add的意义以此类推\n\n#### 15-9-5 Calendar类对象信息的获得\n\n```Java\nCalendar c1 = Calendar.getInstance();\n// 获得年份\nint year = c1.get(Calendar.YEAR);\n// 获得月份\nint month = c1.get(Calendar.MONTH) + 1;\n// 获得日期\nint date = c1.get(Calendar.DATE);\n// 获得小时\nint hour = c1.get(Calendar.HOUR_OF_DAY);\n// 获得分钟\nint minute = c1.get(Calendar.MINUTE);\n// 获得秒\nint second = c1.get(Calendar.SECOND);\n// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）\nint day = c1.get(Calendar.DAY_OF_WEEK);\n```\n\n### 15-10 GregorianCalendar类\n\nCalendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。\n\nCalendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。\n\n下面列出GregorianCalendar对象的几个构造方法：\n\n![image-20240228225136150](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225136150.png)\n\n这里是GregorianCalendar 类提供的一些有用的方法列表：\n\n![image-20240228225205976](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225205976.png)\n\n```Java\nimport java.util.*;\n  \npublic class GregorianCalendarDemo {\n \n   public static void main(String args[]) {\n      String months[] = {\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n      \"May\", \"Jun\", \"Jul\", \"Aug\",\n      \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // 初始化 Gregorian 日历\n      // 使用当前时间和日期\n      // 默认为本地时间和时区\n      GregorianCalendar gcalendar = new GregorianCalendar();\n      // 显示当前时间和日期的信息\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n      \n      // 测试当前年份是否为闰年\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"当前年份是闰年\");\n      }\n      else {\n         System.out.println(\"当前年份不是闰年\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nDate: Apr 22 2009\nTime: 11:25:27\n当前年份不是闰年\n```\n\n关于 Calender 类的完整列表，你可以参考标准的 [Java文档](http://it028.com/index-10.htm)。\n\n## 16，Java 正则表达式\n\n正则表达式定义了字符串的模式。\n\n正则表达式可以用来搜索、编辑或处理文本。\n\n正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。\n\n### 16-1 正则表达式实例\n\n一个字符串其实就是一个简单的正则表达式，例如 **Hello World** 正则表达式匹配 \"Hello World\" 字符串。\n\n**.**（点号）也是一个正则表达式，它匹配任何一个字符如：\"a\" 或 \"1\"。\n\n下表列出了一些正则表达式的实例及描述：\n\n![image-20240228225320769](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225320769.png)\n\nJava 正则表达式和 Perl 的是最为相似的。\n\njava.util.regex 包主要包括以下三个类：\n\n- Pattern 类：\n\n  pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\n\n- Matcher 类：\n\n  Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\n\n- PatternSyntaxException：\n\n  PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\n\n以下实例中使用了正则表达式 **.\\*runoob.\\*** 用于查找字符串中是否包了 **runoob** 子串：\n\n```Java\nimport java.util.regex.*;\n \nclass RegexExample1{\n   public static void main(String args[]){\n      String content = \"I am noob \" +\n        \"from runoob.com.\";\n \n      String pattern = \".*runoob.*\";\n \n      boolean isMatch = Pattern.matches(pattern, content);\n      System.out.println(\"字符串中是否包含了 'runoob' 子字符串? \" + isMatch);\n   }\n}\n```\n\n实例输出结果为：\n\n```\n字符串中是否包含了 'runoob' 子字符串? true\n```\n\n### 16-2 捕获组\n\n捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。\n\n例如，正则表达式 (dog) 创建了单一分组，组里包含\"d\"，\"o\"，和\"g\"。\n\n捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：\n\n- ((A)(B(C)))\n- (A)\n- (B(C))\n- (C)\n\n可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。\n\n还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    public static void main( String args[] ){\n \n      // 按指定模式在字符串查找\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(\\\\D*)(\\\\d+)(.*)\";\n \n      // 创建 Pattern 对象\n      Pattern r = Pattern.compile(pattern);\n \n      // 现在创建 matcher 对象\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n         System.out.println(\"Found value: \" + m.group(3) ); \n      } else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT\nFound value: 3000\nFound value: ! OK?\n```\n\n------\n\n### 16-3 正则表达式语法\n\n在其他语言中，**\\\\** 表示：**我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。**\n\n在 Java 中，**\\\\** 表示：**我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。**\n\n所以，在其他的语言中（如Perl），一个反斜杠 **\\** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 **\\\\** 代表其他语言中的一个 **\\**，这也就是为什么表示一位数字的正则表达式是 **\\\\d**，而表示一个普通的反斜杠是 **\\\\\\\\**。\n\n![image-20240228225546405](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225546405.png)\n\n### 16-4 Matcher 类的方法\n\n#### 16-4-1 索引方法\n\n索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：\n\n![image-20240228225637596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225637596.png)\n\n#### 16-4-2 研究方法\n\n研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：\n\n![image-20240228225700596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225700596.png)\n\n#### 16-4-3 替换方法\n\n替换方法是替换输入字符串里文本的方法：\n\n![image-20240228225727777](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225727777.png)\n\n#### 16-4-4 start 和 end 方法\n\n下面是一个对单词 \"cat\" 出现在输入字符串中出现次数进行计数的例子：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"\\\\bcat\\\\b\";\n    private static final String INPUT =\n                                    \"cat cat cat cattie cat\";\n \n    public static void main( String args[] ){\n       Pattern p = Pattern.compile(REGEX);\n       Matcher m = p.matcher(INPUT); // 获取 matcher 对象\n       int count = 0;\n \n       while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n```\n\n可以看到这个例子是使用单词边界，以确保字母 \"c\" \"a\" \"t\" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。\n\nStart 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。\n\n#### 16-4-5 matches 和 lookingAt 方法\n\nmatches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。\n\nlookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。\n\n这两个方法经常在输入字符串的开始使用。\n\n我们通过下面这个例子，来解释这个功能：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"foo\";\n    private static final String INPUT = \"fooooooooooooooooo\";\n    private static final String INPUT2 = \"ooooofoooooooooooo\";\n    private static Pattern pattern;\n    private static Matcher matcher;\n    private static Matcher matcher2;\n \n    public static void main( String args[] ){\n       pattern = Pattern.compile(REGEX);\n       matcher = pattern.matcher(INPUT);\n       matcher2 = pattern.matcher(INPUT2);\n \n       System.out.println(\"Current REGEX is: \"+REGEX);\n       System.out.println(\"Current INPUT is: \"+INPUT);\n       System.out.println(\"Current INPUT2 is: \"+INPUT2);\n \n \n       System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n       System.out.println(\"matches(): \"+matcher.matches());\n       System.out.println(\"lookingAt(): \"+matcher2.lookingAt());\n   }\n```\n\n以上实例编译运行结果如下：\n\n```\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nCurrent INPUT2 is: ooooofoooooooooooo\nlookingAt(): true\nmatches(): false\nlookingAt(): false\n```\n\n#### 16-4-6 replaceFirst 和 replaceAll 方法\n\nreplaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。\n\n下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static String REGEX = \"dog\";\n    private static String INPUT = \"The dog says meow. \" +\n                                    \"All dogs say meow.\";\n    private static String REPLACE = \"cat\";\n \n    public static void main(String[] args) {\n       Pattern p = Pattern.compile(REGEX);\n       // get a matcher object\n       Matcher m = p.matcher(INPUT); \n       INPUT = m.replaceAll(REPLACE);\n       System.out.println(INPUT);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe cat says meow. All cats say meow.\n```\n\n#### 16-4-7 appendReplacement 和 appendTail 方法\n\nMatcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：\n\n看下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoobkkk\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      // 获取 matcher 对象\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()){\n         m.appendReplacement(sb,REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n-foo-foo-foo-kkk\n```\n\n#### 16-4-8 PatternSyntaxException 类的方法\n\nPatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。\n\nPatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。\n\n![image-20240228230136771](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228230136771.png)\n\n## 17，Java 方法\n\n在前面几个章节中我们经常使用到 **System.out.println()**，那么它是什么呢？\n\n- println() 是一个方法。\n- System 是系统类。\n- out 是标准输出对象。\n\n这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。\n\n\n\n### 17-1 那么什么是方法呢？\n\nJava方法是语句的集合，它们在一起执行一个功能。\n\n- 方法是解决一类问题的步骤的有序组合\n- 方法包含于类或对象中\n- 方法在程序中被创建，在其他地方被引用\n\n### 17-2 方法的优点\n\n- \\1. 使程序变得更简短而清晰。\n- \\2. 有利于程序维护。\n- \\3. 可以提高程序开发的效率。\n- \\4. 提高了代码的重用性。\n\n### 17-3 方法的命名规则\n\n- 1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：**addPerson**。\n- 2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：**test<MethodUnderTest>_<state>**，例如 **testPop_emptyStack**。\n\n------\n\n### 17-4 方法的定义\n\n一般情况下，定义一个方法包含以下语法：\n\n```Java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n\n方法包含一个方法头和一个方法体。下面是一个方法的所有部分：\n\n- **修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。\n- **返回值类型 ：**方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字**void**。\n- **方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。\n- **参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。\n- **方法体：**方法体包含具体的语句，定义该方法的功能。\n\n```Java\npublic static int age(int birthday){...}\n```\n\n参数可以有多个：\n\n```Java\nstatic float interest(float principal, int year){...}\n```\n\n**注意：** 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。\n\n下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。\n\n```Java\n/** 返回两个整型变量数据的较大值 */\npublic static int max(int num1, int num2) {\n   int result;\n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n```\n\n### 17-5 方法调用\n\nJava 支持两种调用方法的方式，根据方法是否返回值来选择。\n\n当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。\n\n当方法返回一个值的时候，方法调用通常被当做一个值。例如：\n\n```Java\nint larger = max(30, 40);\n```\n\n如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：\n\n```Java\nSystem.out.println(\"欢迎访问菜鸟教程！\");\n```\n\n下面的例子演示了如何定义一个方法，以及如何调用它：\n\n```Java\n// TestMax.java 文件代码：\n\npublic class TestMax {\n   /** 主方法 */\n   public static void main(String[] args) {\n      int i = 5;\n      int j = 2;\n      int k = max(i, j);\n      System.out.println( i + \" 和 \" + j + \" 比较，最大值是：\" + k);\n   }\n \n   /** 返回两个整数变量较大的值 */\n   public static int max(int num1, int num2) {\n      int result;\n      if (num1 > num2)\n         result = num1;\n      else\n         result = num2;\n \n      return result; \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n5 和 2 比较，最大值是：5\n```\n\n这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。\n\nmain 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。\n\n### 17-6 void 关键字\n\n本节说明如何声明和调用一个 void 方法。\n\n下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。\n\n```java\nTestVoidMethod.java 文件代码：\npublic class TestVoidMethod {\n  public static void main(String[] args) {\n    printGrade(78.5);\n  }\n \n  public static void printGrade(double score) {\n    if (score >= 90.0) {\n       System.out.println('A');\n    }\n    else if (score >= 80.0) {\n       System.out.println('B');\n    }\n    else if (score >= 70.0) {\n       System.out.println('C');\n    }\n    else if (score >= 60.0) {\n       System.out.println('D');\n    }\n    else {\n       System.out.println('F');\n    }\n  }\n}\n```\n\n\n\n以上实例编译运行结果如下：\n\n```\nC\n```\n\n这里printGrade方法是一个void类型方法，它不返回值。\n\n一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。\n\n------\n\n### 17-7 通过值传递参数\n\n调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。\n\n例如，下面的方法连续n次打印一个消息：\n\n```java\n// TestVoidMethod.java 文件代码：\npublic static void nPrintln(String message, int n) {\n  for (int i = 0; i < n; i++) {\n    System.out.println(message);\n  }\n}\n```\n\n**示例**\n\n下面的例子演示按值传递的效果。\n\n该程序创建一个方法，该方法用于交换两个变量。\n\n```java\n// TestPassByValue.java 文件代码：\npublic class TestPassByValue {\n  public static void main(String[] args) {\n    int num1 = 1;\n    int num2 = 2;\n \n    System.out.println(\"交换前 num1 的值为：\" +\n                        num1 + \" ，num2 的值为：\" + num2);\n \n    // 调用swap方法\n    swap(num1, num2);\n    System.out.println(\"交换后 num1 的值为：\" +\n                       num1 + \" ，num2 的值为：\" + num2);\n  }\n  /** 交换两个变量的方法 */\n  public static void swap(int n1, int n2) {\n    System.out.println(\"\\t进入 swap 方法\");\n    System.out.println(\"\\t\\t交换前 n1 的值为：\" + n1\n                         + \"，n2 的值：\" + n2);\n    // 交换 n1 与 n2的值\n    int temp = n1;\n    n1 = n2;\n    n2 = temp;\n \n    System.out.println(\"\\t\\t交换后 n1 的值为 \" + n1\n                         + \"，n2 的值：\" + n2);\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n交换前 num1 的值为：1 ，num2 的值为：2\n    进入 swap 方法\n        交换前 n1 的值为：1，n2 的值：2\n        交换后 n1 的值为 2，n2 的值：1\n交换后 num1 的值为：1 ，num2 的值为：2\n```\n\n传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。\n\n------\n\n### 17-8 方法的重载\n\n上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？\n\n解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：\n\n```java\npublic static double max(double num1, double num2) {\n  if (num1 > num2)\n    return num1;\n  else\n    return num2;\n}\n```\n\n如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；\n\n如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；\n\n就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。\n\nJava编译器根据方法签名判断哪个方法应该被调用。\n\n方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。\n\n重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。\n\n### 17-9 变量作用域\n\n- 变量的范围是程序中该变量可以被引用的部分。\n- 方法内定义的变量被称为局部变量。\n- 局部变量的作用范围从声明开始，直到包含它的块结束。\n- 局部变量必须声明才可以使用。\n- 方法的参数范围涵盖整个方法。参数实际上是一个局部变量。\n- for循环的初始化部分声明的变量，其作用范围在整个循环。\n- 但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：\n- 你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。\n\n### 17-10 命令行参数的使用\n\n有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。\n\n命令行参数是在执行程序时候紧跟在程序名字后面的信息。\n\n\n\n下面的程序打印所有的命令行参数：\n\n```java\nCommandLine.java 文件代码：\npublic class CommandLine {\n   public static void main(String args[]){ \n      for(int i=0; i<args.length; i++){\n         System.out.println(\"args[\" + i + \"]: \" + args[i]);\n      }\n   }\n}\n```\n\n如下所示，运行这个程序：\n\n```\n$ javac CommandLine.java \n$ java CommandLine this is a command line 200 -100\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n```\n\n------\n\n### 17-11 构造方法\n\n- 当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。\n- 通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。\n- 不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。\n- 一旦你定义了自己的构造方法，默认构造方法就会失效。\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass() {\n    x = 10;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n```\n\n大多时候需要一个有参数的构造方法。\n\n**实例**\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass(int i ) {\n    x = i;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n  public static void main(String args[]) {\n    MyClass t1 = new MyClass( 10 );\n    MyClass t2 = new MyClass( 20 );\n    System.out.println(t1.x + \" \" + t2.x);\n  }\n}\n```\n\n运行结果如下：\n\n```\n10 20\n```\n\n### 17-12 可变参数\n\nJDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。\n\n方法的可变参数的声明如下所示：\n\n```\ntypeName... parameterName\n```\n\n在方法声明中，在指定参数类型后加一个省略号(...) 。\n\n一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。\n\n```java\npublic class VarargsDemo {\n    public static void main(String args[]) {\n        // 调用可变参数的方法\n        printMax(34, 3, 3, 2, 56.5);\n        printMax(new double[]{1, 2, 3});\n    }\n \n    public static void printMax( double... numbers) {\n        if (numbers.length == 0) {\n            System.out.println(\"No argument passed\");\n            return;\n        }\n \n        double result = numbers[0];\n \n        for (int i = 1; i <  numbers.length; i++){\n            if (numbers[i] >  result) {\n                result = numbers[i];\n            }\n        }\n        System.out.println(\"The max value is \" + result);\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe max value is 56.5\nThe max value is 3.0\n```\n\n### 17-13 finalize() 方法\n\nJava 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。\n\n例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。\n\n在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。\n\nfinalize() 一般格式是：\n\n```java\nprotected void finalize()\n{\n   // 在这里终结代码\n}\n```\n\n关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。\n\n当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。\n\n```java\n// FinalizationDemo.java 文件代码：\npublic class FinalizationDemo {  \n  public static void main(String[] args) {  \n    Cake c1 = new Cake(1);  \n    Cake c2 = new Cake(2);  \n    Cake c3 = new Cake(3);  \n      \n    c2 = c3 = null;  \n    System.gc(); //调用Java垃圾收集器\n  }  \n}  \n \nclass Cake extends Object {  \n  private int id;  \n  public Cake(int id) {  \n    this.id = id;  \n    System.out.println(\"Cake Object \" + id + \"is created\");  \n  }  \n    \n  protected void finalize() throws java.lang.Throwable {  \n    super.finalize();  \n    System.out.println(\"Cake Object \" + id + \"is disposed\");  \n  }  \n}\n```\n\n运行以上代码，输出结果如下：\n\n```\n$ javac FinalizationDemo.java \n$ java FinalizationDemo\nCake Object 1is created\nCake Object 2is created\nCake Object 3is created\nCake Object 3is disposed\nCake Object 2is disposed\n```\n\n## 18，Java 流(Stream)、文件(File)和IO\n\n- Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n- Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n- 一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n- Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。\n- 但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。\n\n### 18-1 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n下面是创建 BufferedReader 的基本语法：\n\n```Java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\nBufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。\n\n### 18-2 从控制台读取多字符输入\n\n从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：\n\n```Java\nint read( ) throws IOException\n```\n\n每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。\n\n下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 \"q\"。\n\n```java\n// BRRead.java 文件代码：\n//使用 BufferedReader 在控制台读取字符\n \nimport java.io.*;\n \npublic class BRRead {\n    public static void main(String args[]) throws IOException {\n        char c;\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"输入字符, 按下 'q' 键退出。\");\n        // 读取字符\n        do {\n            c = (char) br.read();\n            System.out.println(c);\n        } while (c != 'q');\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n输入字符, 按下 'q' 键退出。\nrunoob\nr\nu\nn\no\no\nb\n\n\nq\nq\n```\n\n### 18-3 从控制台读取字符串\n\n从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。\n\n它的一般格式是：\n\n```java\nString readLine( ) throws IOException\n```\n\n下面的程序读取和显示字符行直到你输入了单词\"end\"。\n\n```java\n//使用 BufferedReader 在控制台读取字符\nimport java.io.*;\n \npublic class BRReadLines {\n    public static void main(String args[]) throws IOException {\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String str;\n        System.out.println(\"Enter lines of text.\");\n        System.out.println(\"Enter 'end' to quit.\");\n        do {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nEnter lines of text.\nEnter 'end' to quit.\nThis is line one\nThis is line one\nThis is line two\nThis is line two\nend\nend\n```\n\n> JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm('https://www.runoob.com//images/sqlite-c-cpp.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-c-cpp.html') 类来获取控制台的输入。\n\n### 18-4 控制台输出\n\n在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\nPrintStream 定义 write() 的最简单格式如下所示：\n\n```java\nvoid write(int byteval)\n```\n\n该方法将 byteval 的低八位字节写到流中。\n\n下面的例子用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕：\n\n```java\nWriteDemo.java 文件代码：\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\n运行以上实例在输出窗口输出 \"A\" 字符\n\n```\nA\n```\n\n**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 18-5 读写文件\n\n如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。\n\n#### 18-5-1 FileInputStream\n\n- 该流用于从文件读取数据，它的对象可以用关键字 new 来创建。\n- 有多种构造方法可用来创建对象。\n- 可以使用字符串类型的文件名来创建一个输入流对象来读取文件：\n\n```java\nInputStream f = new FileInputStream(\"C://images/hello\");\n```\n\n- 也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); InputStream out = new FileInputStream(f);\n```\n\n- 创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。\n\n![image-20240228231544486](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231544486.png)\n\n除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：\n\n- [ByteArrayInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-php.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-php.html')\n- [DataInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-perl.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-perl.html')\n\n------\n\n#### 18-5-2 FileOutputStream\n\n该类用来创建一个文件并向文件中写数据。\n\n如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。\n\n有两个构造方法可以用来创建 FileOutputStream 对象。\n\n使用字符串类型的文件名来创建一个输出流对象：\n\n```java\nOutputStream f = new FileOutputStream(\"C://images/hello\")\n```\n\n也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); \nOutputStream f = new FileOutputStream(f);\n```\n\n创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。\n\n![image-20240228231647489](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231647489.png)\n\n除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：\n\n- [ByteArrayOutputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-python.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-python.html')\n- [DataOutputStream](javascript:if(confirm('https://www.runoob.com//images/execute_sql_online.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/execute_sql_online.php')\n\n下面是一个演示 InputStream 和 OutputStream 用法的例子\n\n```java\n// fileStreamTest.java 文件代码：\n\nimport java.io.*;\n \npublic class fileStreamTest {\n    public static void main(String args[]) {\n        try {\n            byte bWrite[] = { 11, 21, 3, 40, 5 };\n            OutputStream os = new FileOutputStream(\"test.txt\");\n            for (int x = 0; x < bWrite.length; x++) {\n                os.write(bWrite[x]); // writes the bytes\n            }\n            os.close();\n \n            InputStream is = new FileInputStream(\"test.txt\");\n            int size = is.available();\n \n            for (int i = 0; i < size; i++) {\n                System.out.print((char) is.read() + \"  \");\n            }\n            is.close();\n        } catch (IOException e) {\n            System.out.print(\"Exception\");\n        }\n    }\n}\n```\n\n上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。\n\n以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：\n\n```java\nfileStreamTest2.java 文件代码：\n//文件名 :fileStreamTest2.java\nimport java.io.*;\n \npublic class fileStreamTest2 {\n    public static void main(String[] args) throws IOException {\n \n        File f = new File(\"a.txt\");\n        FileOutputStream fop = new FileOutputStream(f);\n        // 构建FileOutputStream对象,文件不存在会自动新建\n \n        OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\");\n        // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk\n \n        writer.append(\"中文输入\");\n        // 写入到缓冲区\n \n        writer.append(\"\\r\\n\");\n        // 换行\n \n        writer.append(\"English\");\n        // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入\n \n        writer.close();\n        // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉\n \n        fop.close();\n        // 关闭输出流,释放系统资源\n \n        FileInputStream fip = new FileInputStream(f);\n        // 构建FileInputStream对象\n \n        InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\");\n        // 构建InputStreamReader对象,编码与写入相同\n \n        StringBuffer sb = new StringBuffer();\n        while (reader.ready()) {\n            sb.append((char) reader.read());\n            // 转成char加到StringBuffer对象中\n        }\n        System.out.println(sb.toString());\n        reader.close();\n        // 关闭读取流\n \n        fip.close();\n        // 关闭输入流,释放系统资源\n \n    }\n}\n```\n\n### 18-6 文件和I/O\n\n还有一些关于文件和I/O的类，我们也需要知道：\n\n- [File Class(类)](javascript:if(confirm('https://www.runoob.com//images/book.sqlite3.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/book.sqlite3.php')\n- [FileReader Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite-jdbc  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-jdbc')\n- [FileWriter Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite3.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite3.html')\n\n------\n\n### 18-7 Java中的目录\n\n#### 18-7-1 创建目录：\n\nFile类中有两个方法可以用来创建文件夹：\n\n- **mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。\n- **mkdirs()**方法创建一个文件夹和它的所有父文件夹。\n\n下面的例子创建 \"/tmp/user//images/bin\"文件夹：\n\n```java\nCreateDir.java 文件代码：\nimport java.io.File;\n \npublic class CreateDir {\n    public static void main(String args[]) {\n        String dirname = \"/tmp/user//images/bin\";\n        File d = new File(dirname);\n        // 现在创建目录\n        d.mkdirs();\n    }\n}\n```\n\n编译并执行上面代码来创建目录 \"/tmp/user//images/bin\"。\n\n**注意：** Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (/) ，路径依然能够被正确解析。\n\n#### 18-7-2 读取目录\n\n一个目录其实就是一个 File 对象，它包含其他文件和文件夹。\n\n如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。\n\n可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。\n\n下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：\n\n```java\n// DirList.java 文件代码：\nimport java.io.File;\n \npublic class DirList {\n    public static void main(String args[]) {\n        String dirname = \"/tmp\";\n        File f1 = new File(dirname);\n        if (f1.isDirectory()) {\n            System.out.println(\"目录 \" + dirname);\n            String s[] = f1.list();\n            for (int i = 0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                    System.out.println(s[i] + \" 是一个目录\");\n                } else {\n                    System.out.println(s[i] + \" 是一个文件\");\n                }\n            }\n        } else {\n            System.out.println(dirname + \" 不是一个目录\");\n        }\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n目录 /tmp\nbin 是一个目录\nlib 是一个目录\ndemo 是一个目录\ntest.txt 是一个文件\nREADME 是一个文件\nindex.html 是一个文件\ninclude 是一个目录\n```\n\n#### 18-7-3 删除目录或文件\n\n删除文件可以使用 **java.io.File.delete()** 方法。\n\n以下代码会删除目录 **/tmp//images/**，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。\n\n测试目录结构：\n\n```\n/tmp//images/\n|-- 1.log\n|-- test\n```\n\n```java\nimport java.io.File;\n \npublic class DeleteFileDemo {\n    public static void main(String args[]) {\n        // 这里修改为自己的测试目录\n        File folder = new File(\"/tmp//images/\");\n        deleteFolder(folder);\n    }\n \n    // 删除文件及目录\n    public static void deleteFolder(File folder) {\n        File[] files = folder.listFiles();\n        if (files != null) {\n            for (File f : files) {\n                if (f.isDirectory()) {\n                    deleteFolder(f);\n                } else {\n                    f.delete();\n                }\n            }\n        }\n        folder.delete();\n    }\n}\n```\n\n## 19，Java Scanner 类\n\njava.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。\n\n下面是创建 Scanner 对象的基本语法：\n\n```Java\nScanner s = new Scanner(System.in);\n```\n\n接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：\n\n### 19-1 使用 next 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner; \n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // next方式接收字符串\n        System.out.println(\"next方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNext()) {\n            String str1 = scan.next();\n            System.out.println(\"输入的数据为：\" + str1);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnext方式接收：\nrunoob com\n输入的数据为：runoob\n```\n\n可以看到 com 字符串并未输出，接下来我们看 nextLine。\n\n### 19-2 使用 nextLine 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // nextLine方式接收字符串\n        System.out.println(\"nextLine方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNextLine()) {\n            String str2 = scan.nextLine();\n            System.out.println(\"输入的数据为：\" + str2);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnextLine方式接收：\nrunoob com\n输入的数据为：runoob com\n```\n\n可以看到 com 字符串输出。\n\n### 19-3 next() 与 nextLine() 区别\n\nnext():\n\n- 1、一定要读取到有效字符后才可以结束输入。\n- 2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。\n- 3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。\n- next() 不能得到带有空格的字符串。\n\nnextLine()：\n\n- 1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。\n- 2、可以获得空白。\n\n如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n        int i = 0;\n        float f = 0.0f;\n        System.out.print(\"输入整数：\");\n        if (scan.hasNextInt()) {\n            // 判断输入的是否是整数\n            i = scan.nextInt();\n            // 接收整数\n            System.out.println(\"整数数据：\" + i);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是整数！\");\n        }\n        System.out.print(\"输入小数：\");\n        if (scan.hasNextFloat()) {\n            // 判断输入的是否是小数\n            f = scan.nextFloat();\n            // 接收小数\n            System.out.println(\"小数数据：\" + f);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是小数！\");\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\n输入整数：12\n整数数据：12\n输入小数：1.2\n小数数据：1.2\n```\n\n以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：\n\n```java\n // ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \nclass ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n \n        double sum = 0;\n        int m = 0;\n \n        while (scan.hasNextDouble()) {\n            double x = scan.nextDouble();\n            m = m + 1;\n            sum = sum + x;\n        }\n \n        System.out.println(m + \"个数的和为\" + sum);\n        System.out.println(m + \"个数的平均值是\" + (sum / m));\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```java\n$ javac ScannerDemo.java\n$ java ScannerDemo\n12\n23\n15\n21.4\nend\n4个数的和为71.4\n4个数的平均值是17.85\n```\n\n## 20，Java异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查\n\n### 20-1 异常方法\n\n![image-20240228232401552](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228232401552.png)\n\n### 20-2 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```Java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。\n\n```Java\n// ExcepTest.java 文件代码：\n// 文件名 : ExcepTest.java\nimport java.io.*;\npublic class ExcepTest{\n \n   public static void main(String args[]){\n      try{\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      }catch(ArrayIndexOutOfBoundsException e){\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n```\n\n以上代码编译运行输出结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n```\n\n### 20-3 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n多重捕获块的语法如下所示：\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}\n```\n\n- 上面的代码段包含了 3 个 catch块。\n- 可以在 try 语句后面添加任意数量的 catch 块。\n- 如果保护代码中发生异常，异常被抛给第一个 catch 块。\n- 如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n- 如果不匹配，它会被传递给第二个 catch 块。\n- 如此，直到异常被捕获或者通过所有的 catch 块。\n\n\n\n该实例展示了怎么使用多重 try/catch。\n\n```java\ntry {\n    file = new FileInputStream(fileName);\n    x = (byte) file.read();\n} catch(FileNotFoundException f) { // Not valid!\n    f.printStackTrace();\n    return -1;\n} catch(IOException i) {\n    i.printStackTrace();\n    return -1;\n}\n```\n\n### 20-4 throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### 20-5 finally关键字\n\n- finally 关键字用来创建在 try 代码块后面执行的代码块。\n- 无论是否发生异常，finally 代码块中的代码总会被执行。\n- 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n- finally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n\n\n```java\nExcepTest.java 文件代码：\npublic class ExcepTest{\n  public static void main(String args[]){\n    int a[] = new int[2];\n    try{\n       System.out.println(\"Access element three :\" + a[3]);\n    }catch(ArrayIndexOutOfBoundsException e){\n       System.out.println(\"Exception thrown  :\" + e);\n    }\n    finally{\n       a[0] = 6;\n       System.out.println(\"First element value: \" +a[0]);\n       System.out.println(\"The finally statement is executed\");\n    }\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n```\n\n注意下面事项：\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n### 20-6 声明自定义异常\n\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。\n\n- 所有异常都必须是 Throwable 的子类。\n- 如果希望写一个检查性异常类，则需要继承 Exception 类。\n- 如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。\n\n可以像下面这样定义自己的异常类：\n\n```java\nclass MyException extends Exception{ }\n```\n\n- 只继承Exception 类来创建的异常类是检查性异常类。\n- 下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。\n- 一个异常类和其它任何类一样，包含有变量和方法。\n\n以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。\n\n```java\n// InsufficientFundsException.java 文件代码：\n// 文件名InsufficientFundsException.java\nimport java.io.*;\n \n//自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n{\n  //此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\n  private double amount;\n  public InsufficientFundsException(double amount)\n  {\n    this.amount = amount;\n  } \n  public double getAmount()\n  {\n    return amount;\n  }\n}\n```\n\n为了展示如何使用我们自定义的异常类，\n\n在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。\n\n```java\n// 文件名称 CheckingAccount.java\nimport java.io.*;\n \n//此类模拟银行账户\npublic class CheckingAccount\n{\n  //balance为余额，number为卡号\n   private double balance;\n   private int number;\n   public CheckingAccount(int number)\n   {\n      this.number = number;\n   }\n  //方法：存钱\n   public void deposit(double amount)\n   {\n      balance += amount;\n   }\n  //方法：取钱\n   public void withdraw(double amount) throws\n                              InsufficientFundsException\n   {\n      if(amount <= balance)\n      {\n         balance -= amount;\n      }\n      else\n      {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n  //方法：返回余额\n   public double getBalance()\n   {\n      return balance;\n   }\n  //方法：返回卡号\n   public int getNumber()\n   {\n      return number;\n   }\n}\n```\n\n下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。\n\n```java\n//文件名称 BankDemo.java\npublic class BankDemo\n{\n   public static void main(String [] args)\n   {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      try\n      {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      }catch(InsufficientFundsException e)\n      {\n         System.out.println(\"Sorry, but you are short $\"\n                                  + e.getAmount());\n         e.printStackTrace();\n      }\n    }\n}\n```\n\n编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：\n\n```\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n        at CheckingAccount.withdraw(CheckingAccount.java:25)\n        at BankDemo.main(BankDemo.java:13)\n```\n\n### 20-7 通用异常\n\n在Java中定义了两种类型的异常和错误。\n\n- **JVM(Java****虚拟机****)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。\n- **程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。\n","source":"_posts/java.md","raw":"---\ntitle: java 初学者学习笔记\ndate: 2025-04-04 21:56:53\ntags:\n---\n\n\n## 1，Java基础语法\n\n一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n\n- **对象**：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n- **类**：类是一个模板，它描述一类对象的行为和状态。\n- **方法**：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。\n- **实例变量**：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\n\n### 1-1 第一个Java程序\n\n下面看一个简单的 Java 程序，它将打印字符串 *Hello World*\n\n```Java\npublic class HelloWorld {\n    /* 第一个Java程序\n     * 它将打印字符串 Hello World\n     */\n    public static void main(String []args) {\n        System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n}\n```\n\n下面将逐步介绍如何保存、编译以及运行这个程序：\n\n- 打开代码编辑器，把上面的代码添加进去；\n- 把文件名保存为：HelloWorld.java；\n- 打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\\n- 在命令行窗口输入 **javac HelloWorld.java** 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。\n- 再键输入 **java HelloWorld** 按下回车键就可以运行程序了\n\n你将会在窗口看到 Hello World\n\n```shell\nC : > javac HelloWorld.java\nC : > java HelloWorld \nHello World\n```\n\nGif 图演示：\n\n![img](/images/java-HelloWorld.gif)\n\n### 1-2 基本语法\n\n编写 Java 程序时，应注意以下几点：\n\n- **大小写敏感**：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。\n- **类名**：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 **MyFirstJavaClass** 。\n- **方法名**：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。\n- **源文件名**：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 **.java**。（如果文件名和类名不相同则会导致编译错误）。\n- **主方法入口**：所有的 Java 程序由 **public static void main(String []args)** 方法开始执行。\n\n### 1-3 Java 标识符\n\nJava 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。\n\n关于 Java 标识符，有以下几点需要注意：\n\n- 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n- 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n- 关键字不能用作标识符\n- 标识符是大小写敏感的\n- 合法标识符举例：age、$salary、_value、__1_value\n- 非法标识符举例：123abc、-salary\n\n### 1-4 Java修饰符\n\n像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：\n\n- 访问控制修饰符 : default, public , protected, private\n- 非访问控制修饰符 : final, abstract, static, synchronized\n\n在后面的章节中我们会深入讨论 Java 修饰符。\n\n### 1-5 Java 变量\n\nJava 中主要有如下几种类型的变量\n\n- 局部变量\n- 类变量（静态变量）\n- 成员变量（非静态变量）\n\n### 1-6 Java 数组\n\n数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。\n\n### 1-7 Java 枚举\n\nava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。\n\n例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。\n\n```java\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM , LARGE }\n   FreshJuiceSize size;\n}\n \npublic class FreshJuiceTest {\n   public static void main(String []args){\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;\n   }\n}\n```\n\n### 1-8 Java 关键字\n\n![image-20240228195010033](/images/image-20240228195010033.png)\n\n### 1-9 Java注释\n\n类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。\n\n```Java\npublic class HelloWorld {\n   /* 这是第一个Java程序\n    *它将打印Hello World\n    * 这是一个多行注释的示例\n    */\n    public static void main(String []args){\n       // 这是单行注释的示例\n       /* 这个也是单行注释的示例 */\n       System.out.println(\"Hello World\"); \n    }\n}\n```\n\n### 1-10 Java 空行\n\n空白行或者有注释的行，Java 编译器都会忽略掉。\n\n### 1-11 继承\n\n在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。\n\n利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。\n\n------\n\n### 1-12 接口\n\n在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。\n\n接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。\n\n## 2，Java对象和类\n\n### 2-1 Java中的对象\n\n现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。\n\n拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。\n\n对比现实对象和软件对象，它们之间十分相似。\n\n软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。\n\n在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。\n\n### 2-2 Java中的类\n\n类可以看成是创建Java对象的模板。\n\n通过下面一个简单的类来理解下Java中类的定义：\n\n```Java\npublic class Dog{\n  String breed;\n  int age;\n  String color;\n  void barking(){\n  }\n \n  void hungry(){\n  }\n \n  void sleeping(){\n  }\n}\n```\n\n一个类可以包含以下类型变量：\n\n- **局部变量**：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。\n- **成员变量**：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。\n- **类变量**：类变量也声明在类中，方法体之外，但必须声明为static类型。\n\n一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。\n\n------\n\n### 2-3 构造方法\n\n每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。\n\n在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。\n\n下面是一个构造方法示例：\n\n```Java\npublic class Puppy{\n    public Puppy(){\n    }\n \n    public Puppy(String name){\n        // 这个构造器仅有一个参数：name\n    }\n}\n```\n\n### 2-4 创建对象\n\n对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：\n\n- **声明**：声明一个对象，包括对象名称和对象类型。\n- **实例化**：使用关键字new来创建一个对象。\n- **初始化**：使用new创建对象时，会调用构造方法初始化对象。\n\n下面是一个创建对象的例子：\n\n```java\npublic class Puppy{\n   public Puppy(String name){\n      //这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n   public static void main(String[] args){\n      // 下面的语句将创建一个Puppy对象\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n```\n\n编译并运行上面的程序，会打印出下面的结果：\n\n```\n小狗的名字是 : tommy\n```\n\n### 2-5 访问实例变量和方法\n\n通过已创建的对象来访问成员变量和成员方法，如下所示：\n\n```Java\n/* 实例化对象 */\nObject referenceVariable = new Constructor();\n/* 访问类中的变量 */\nreferenceVariable.variableName;\n/* 访问类中的方法 */\nreferenceVariable.methodName();\n```\n\n### 2-6 实例\n\n下面的例子展示如何访问实例变量和调用成员方法：\n\n```java\npublic class Puppy{\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n \n   public void setAge( int age ){\n       puppyAge = age;\n   }\n \n   public int getAge( ){\n       System.out.println(\"小狗的年龄为 : \" + puppyAge ); \n       return puppyAge;\n   }\n \n   public static void main(String[] args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"变量值 : \" + myPuppy.puppyAge ); \n   }\n}\n```\n\n编译并运行上面的程序，产生如下结果：\n\n```\n小狗的名字是 : tommy\n小狗的年龄为 : 2\n变量值 : 2\n```\n\n### 2-7 源文件声明规则\n\n在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。\n\n- 一个源文件中只能有一个public类\n- 一个源文件可以有多个非public类\n- 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。\n- 如果一个类定义在某个包中，那么package语句应该在源文件的首行。\n- 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。\n- import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\n\n类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。\n\n除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。\n\n### 2-8 Java包\n\n包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。\n\n### 2-9 Import语句\n\n在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。\n\n例如，下面的命令行将会命令编译器载入java_installation//images/io路径下的所有类\n\n```java\nimport java.io.*;\n```\n\n### 2-10 一个简单的例子\n\n在该例子中，我们创建两个类：**Employee** 和 **EmployeeTest**。\n\n首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。\n\nEmployee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee{\n   String name;\n   int age;\n   String designation;\n   double salary;\n   // Employee 类的构造器\n   public Employee(String name){\n      this.name = name;\n   }\n   // 设置age的值\n   public void empAge(int empAge){\n      age =  empAge;\n   }\n   /* 设置designation的值*/\n   public void empDesignation(String empDesig){\n      designation = empDesig;\n   }\n   /* 设置salary的值*/\n   public void empSalary(double empSalary){\n      salary = empSalary;\n   }\n   /* 打印信息 */\n   public void printEmployee(){\n      System.out.println(\"名字:\"+ name );\n      System.out.println(\"年龄:\" + age );\n      System.out.println(\"职位:\" + designation );\n      System.out.println(\"薪水:\" + salary);\n   }\n}\n```\n\n程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。\n\n下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。\n\n将下面的代码保存在 EmployeeTest.java文件中。\n\n**EmployeeTest.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class EmployeeTest{\n \n   public static void main(String[] args){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"RUNOOB1\");\n      Employee empTwo = new Employee(\"RUNOOB2\");\n \n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"高级程序员\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n \n      empTwo.empAge(21);\n      empTwo.empDesignation(\"菜鸟程序员\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n\n编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：\n\n```Java\n$ javac EmployeeTest.java\n$ java EmployeeTest \n名字:RUNOOB1\n年龄:26\n职位:高级程序员\n薪水:1000.0\n名字:RUNOOB2\n年龄:21\n职位:菜鸟程序员\n薪水:500.0\n```\n\n## 3，Java基本数据类型\n\n### 3-1 内置数据类型\n\nJava语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。\n\n#### 3-1-1 **byte：**\n\n- byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n- 最小值是 **-128（-2^7）**；\n- 最大值是 **127（2^7-1）**；\n- 默认值是 **0**；\n- byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n- 例子：byte a = 100，byte b = -50。\n\n#### 3-1-2 **short：**\n\n- short 数据类型是 16 位、有符号的以二进制补码表示的整数\n- 最小值是 **-32768（-2^15）**；\n- 最大值是 **32767（2^15 - 1）**；\n- Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n- 默认值是 **0**；\n- 例子：short s = 1000，short r = -20000。\n\n#### 3-1-3 **int：**\n\n- int 数据类型是32位、有符号的以二进制补码表示的整数；\n- 最小值是 **-2,147,483,648（-2^31）**；\n- 最大值是 **2,147,483,647（2^31 - 1）**；\n- 一般地整型变量默认为 int 类型；\n- 默认值是 **0** ；\n- 例子：int a = 100000, int b = -200000。\n\n#### 3-1-4 **long：**\n\n- long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n- 最小值是 **-9,223,372,036,854,775,808（-2^63）**；\n- 最大值是 **9,223,372,036,854,775,807（2^63 -1）**；\n- 这种类型主要使用在需要比较大整数的系统上；\n- 默认值是 **0L**；\n- 例子： long a = 100000L，Long b = -200000L。\n  \"L\"理论上不分大小写，但是若写成\"l\"容易与数字\"1\"混淆，不容易分辩。所以最好大写。\n\n#### 3-1-5 **float：**\n\n- float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\n- float 在储存大型浮点数组的时候可节省内存空间；\n- 默认值是 **0.0f**；\n- 浮点数不能用来表示精确的值，如货币；\n- 例子：float f1 = 234.5f。\n\n#### 3-1-6 **double：**\n\n- double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；\n- 浮点数的默认类型为double类型；\n- double类型同样不能表示精确的值，如货币；\n- 默认值是 **0.0d**；\n- 例子：double d1 = 123.4。\n\n#### 3-1-7 **boolean：**\n\n- boolean数据类型表示一位的信息；\n- 只有两个取值：true 和 false；\n- 这种类型只作为一种标志来记录 true/false 情况；\n- 默认值是 **false**；\n- 例子：boolean one = true。\n\n#### 3-1-8 **char：**\n\n- char类型是一个单一的 16 位 Unicode 字符；\n- 最小值是 **\\u0000**（即为0）；\n- 最大值是 **\\uffff**（即为65,535）；\n- char 数据类型可以储存任何字符；\n- 例子：char letter = 'A';。\n\n### 3-2 实例\n\n对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：\n\n```Java\npublic class PrimitiveTypeTest {  \n    public static void main(String[] args) {  \n        // byte  \n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);  \n        System.out.println(\"包装类：java.lang.Byte\");  \n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);  \n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);  \n        System.out.println();  \n  \n        // short  \n        System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);  \n        System.out.println(\"包装类：java.lang.Short\");  \n        System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);  \n        System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);  \n        System.out.println();  \n  \n        // int  \n        System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);  \n        System.out.println(\"包装类：java.lang.Integer\");  \n        System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);  \n        System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);  \n        System.out.println();  \n  \n        // long  \n        System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);  \n        System.out.println(\"包装类：java.lang.Long\");  \n        System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);  \n        System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);  \n        System.out.println();  \n  \n        // float  \n        System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);  \n        System.out.println(\"包装类：java.lang.Float\");  \n        System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);  \n        System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);  \n        System.out.println();  \n  \n        // double  \n        System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);  \n        System.out.println(\"包装类：java.lang.Double\");  \n        System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);  \n        System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);  \n        System.out.println();  \n  \n        // char  \n        System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);  \n        System.out.println(\"包装类：java.lang.Character\");  \n        // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  \n        System.out.println(\"最小值：Character.MIN_VALUE=\"  \n                + (int) Character.MIN_VALUE);  \n        // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  \n        System.out.println(\"最大值：Character.MAX_VALUE=\"  \n                + (int) Character.MAX_VALUE);  \n    }  \n}\n```\n\n编译以上代码输出结果如下所示：\n\n```Java\n基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127\n\n基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308\n\n基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\n```\n\nFloat和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的\"E+数字\"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。\n\n实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。\n\n### 3-3 类型默认值\n\n下表列出了 Java 各个类型的默认值：\n\n![image-20240228200611781](/images/image-20240228200611781.png)\n\n### 3-4 实例\n\n```Java\npublic class Test {\n    static boolean bool;\n    static byte by;\n    static char ch;\n    static double d;\n    static float f;\n    static int i;\n    static long l;\n    static short sh;\n    static String str;\n \n    public static void main(String[] args) {\n        System.out.println(\"Bool :\" + bool);\n        System.out.println(\"Byte :\" + by);\n        System.out.println(\"Character:\" + ch);\n        System.out.println(\"Double :\" + d);\n        System.out.println(\"Float :\" + f);\n        System.out.println(\"Integer :\" + i);\n        System.out.println(\"Long :\" + l);\n        System.out.println(\"Short :\" + sh);\n        System.out.println(\"String :\" + str);\n    }\n}\n```\n\n实例输出结果为：\n\n```Java\nBool     :false\nByte     :0\nCharacter:\nDouble   :0.0\nFloat    :0.0\nInteger  :0\nLong     :0\nShort    :0\nString   :null\n```\n\n### 3-5 引用类型\n\n- 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\n- 对象、数组都是引用数据类型。\n- 所有引用类型的默认值都是null。\n- 一个引用变量可以用来引用任何与之兼容的类型。\n- 例子：Site site = new Site(\"Runoob\")。\n\n### 3-6 Java 常量\n\n常量在程序运行时是不能被修改的。\n\n在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：\n\n```Java\nfinal double PI = 3.1415927;\n```\n\n虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。\n\n字面量可以赋给任何内置类型的变量。例如：\n\n```Java\nbyte a = 68;\nchar a = 'A'\n```\n\nbyte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。\n\n当使用常量的时候，前缀 **0** 表示 8 进制，而前缀 **0x** 代表 16 进制, 例如：\n\n```Java\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n```\n\n和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：\n\n```Java\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n字符串常量和字符常量都可以包含任何Unicode字符。例如：\n\n```Java\nchar a = '\\u0001';\nString a = \"\\u0001\";\n```\n\nJava语言支持一些特殊的转义字符序列。\n\n![image-20240228200803273](/images/image-20240228200803273.png)\n\n### 3-7 自动类型转换\n\n**整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。**\n\n转换从低级到高级。\n\n```Java\n低  ------------------------------------>  高\n\nbyte,short,char—> int —> long—> float —> double \n```\n\n数据类型转换必须满足如下规则：\n\n- \\1. 不能对boolean类型进行类型转换。\n\n- \\2. 不能把对象类型转换成不相关类的对象。\n\n- \\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n- \\4. 转换过程中可能导致溢出或损失精度，例如：\n\n  ```Java\n  int i =128;   \n  byte b = (byte)i;\n  ```\n\n  因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n- \\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n  ```Java\n  (int)23.7 == 23;        \n  (int)-45.89f == -45\n  ```\n\n**自动类型转换**\n\n必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。\n\n```Java\npublic class ZiDongLeiZhuan{\n        public static void main(String[] args){\n            char c1='a';//定义一个char类型\n            int i1 = c1;//char自动类型转换为int\n            System.out.println(\"char自动类型转换为int后的值等于\"+i1);\n            char c2 = 'A';//定义一个char类型\n            int i2 = c2+1;//char 类型和 int 类型计算\n            System.out.println(\"char类型和int计算后的值等于\"+i2);\n        }\n}\n```\n\n运行结果为:\n\n```\nchar自动类型转换为int后的值等于97\nchar类型和int计算后的值等于66\n```\n\n**解析：**c1 的值为字符 **a** ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 **i2=65+1=66**。\n\n### 3-8 强制类型转换\n\n- \\1. 条件是转换的数据类型必须是兼容的。\n- \\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：\n\n\n\n实例\n\n```Java\npublic class QiangZhiZhuanHuan{\n    public static void main(String[] args){\n        int i1 = 123;\n        byte b = (byte)i1;//强制类型转换为byte\n        System.out.println(\"int强制类型转换为byte后的值等于\"+b);\n    }\n}\n```\n\n- 运行结果：\n\n  ```\n  int强制类型转换为byte后的值等于123\n  ```\n\n### 3-9  隐含强制类型转换\n\n- \\1. 整数的默认类型是 int。\n- \\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。\n\n这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。\n\n## 4，Java变量类型\n\n- 在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n- type identifier [ = value][, identifier [= value] ...] ;\n\n- 格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。\n\n\n以下列出了一些变量的声明实例。注意有些包含了初始化过程。\n\n```Java\nint a, b, c;         // 声明三个int型整数：a、 b、c\nint d = 3, e = 4, f = 5; // 声明三个整数并赋予初值\nbyte z = 22;         // 声明并初始化 z\nString s = \"runoob\";  // 声明并初始化字符串 s\ndouble pi = 3.14159; // 声明了双精度浮点型变量 pi\nchar x = 'x';        // 声明变量 x 的值是字符 'x'。\n```\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n**实例**\n\n```Java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n \n    String str=\"hello world\";  // 实例变量\n \n    public void method(){\n \n        int i =0;  // 局部变量\n \n    }\n}\n```\n\n### 4-1 Java局部变量\n\n- 局部变量声明在方法、构造方法或者语句块中；\n- 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n- 访问修饰符不能用于局部变量；\n- 局部变量只在声明它的方法、构造方法或者语句块中可见；\n- 局部变量是在栈上分配的。\n- 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n#### 4-1-1 **实例 1**\n\n在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是: \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n小狗的年龄是: 7\n```\n\n#### 4-1-2 实例 2\n\n在下面的例子中 age 变量没有初始化，所以在编译时会出错：\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是 : \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n```\n\n### 4-2 实例变量\n\n- 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n- 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n- 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n- 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n- 实例变量可以声明在使用前或者使用后；\n- 访问修饰符可以修饰实例变量；\n- 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；\n- 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n- 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n**实例**\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class Employee{\n   // 这个实例变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"名字 : \" + name );\n      System.out.println(\"薪水 : \" + salary);\n   }\n \n   public static void main(String[] args){\n      Employee empOne = new Employee(\"RUNOOB\");\n      empOne.setSalary(1000.0);\n      empOne.printEmp();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ javac Employee.java \n$ java Employee\n名字 : RUNOOB\n薪水 : 1000.0\n```\n\n### 4-3 类变量（静态变量）\n\n- 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n- 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n- 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。\n- 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。\n- 静态变量在第一次被访问时创建，在程序结束时销毁。\n- 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。\n- 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n- 静态变量可以通过：*ClassName.VariableName*的方式访问。\n- 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n实例：\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee {\n    //salary是静态的私有变量\n    private static double salary;\n    // DEPARTMENT是一个常量\n    public static final String DEPARTMENT = \"开发人员\";\n    public static void main(String[] args){\n    salary = 10000;\n        System.out.println(DEPARTMENT+\"平均工资:\"+salary);\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n开发人员平均工资:10000.0\n```\n\n**注意：**如果其他类想要访问该变量，可以这样访问：**Employee.DEPARTMENT**。\n\n本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。\n\n## 5，Java修饰符\n\nJava语言提供了很多修饰符，主要分为以下两类：\n\n- 访问修饰符\n- 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：\n\n```Java\npublic class ClassName {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 5-1 访问控制修饰符\n\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n- **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n- **private** : 在同一类内可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**\n- **public** : 对所有类可见。使用对象：类、接口、变量、方法\n- **protected** : 对同一包内的类和所有子类可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**。\n\n我们可以通过以下表来说明访问权限：\n\n![image-20240228202210130](/images/image-20240228202210130.png)\n\n**默认访问修饰符-不使用任何关键字**\n\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 **public static final**,而接口里的方法默认情况下访问权限为 **public**。\n\n如下例所示，变量和方法的声明可以不使用任何修饰符。\n\n**实例**\n\n```Java\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n\n### 5-2 私有访问修饰符-private\n\n私有访问修饰符是最严格的访问级别，所以被声明为 **private** 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 **private**。\n\n声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。\n\nPrivate 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n\n下面的类使用了私有访问修饰符：\n\n```Java\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n\n实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）\n\n### 5-3 公有访问修饰符-public\n\n被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n\n以下函数使用了公有访问控制：\n\n```Java\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\nJava 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。\n\n### 5-4 受保护的访问修饰符-protected\n\nprotected 需要从以下两个点来分析说明：\n\n- **子类与基类在同一包中**：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；\n- **子类与基类不在同一包中**：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。\n\nprotected 可以修饰数据成员，构造方法，方法成员，**不能修饰类（内部类除外）**。\n\n子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。\n\n```Java\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n \nclass StreamingAudioPlayer extends AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n\n如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。\n\n如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。\n\n如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。\n\n### 5-5 访问控制和继承\n\n请注意以下方法继承的规则：\n\n- 父类中声明为 public 的方法在子类中也必须为 public。\n- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。\n- 父类中声明为 private 的方法，不能够被继承。\n\n### 5-6 非访问修饰符\n\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\n\nstatic 修饰符，用来修饰类方法和类变量。\n\nfinal 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\nabstract 修饰符，用来创建抽象类和抽象方法。\n\nsynchronized 和 volatile 修饰符，主要用于线程的编程。\n\n#### 5-6-1 static 修饰符\n\n- **静态变量：**\n\n  static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n- **静态方法：**\n\n  static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n对类变量和方法的访问可以直接使用 **classname.variablename** 和 **classname.methodname** 的方式访问。\n\n如下例所示，static修饰符用来创建类方法和类变量。\n\n```Java\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n \n   private static void addInstance() {\n      numInstances++;\n   }\n \n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n \n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" +\n      InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n          }\n      System.out.println(\"Created \" +\n      InstanceCounter.getCount() + \" instances\");\n   }\n}\n```\n\n以上实例运行编辑结果如下:\n\n```Java\nStarting with 0 instances\nCreated 500 instances\n```\n\n#### 5-6-2 final 修饰符\n\n**final 变量：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n```Java\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n \n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\n\n**inal 方法**\n\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\n声明 final 方法的主要目的是防止该方法的内容被修改。\n\n如下所示，使用 final 修饰符声明方法。\n\n```Java\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\n**final 类**\n\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n```Java\npublic final class Test {\n   // 类体\n}\n```\n\n### 5-7 abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n```Java\nabstract class Caravan{\n   private double price;\n   private String model;\n   private String year;\n   public abstract void goFast(); //抽象方法\n   public abstract void changeColor();\n}\n```\n\n**抽象方法**\n\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n\n抽象方法不能被声明成 final 和 static。\n\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n\n抽象方法的声明以分号结尾，例如：**public abstract sample();**。\n\n```Java\npublic abstract class SuperClass{\n    abstract void m(); //抽象方法\n}\n \nclass SubClass extends SuperClass{\n     //实现抽象方法\n      void m(){\n          .........\n      }\n}\n```\n\n### synchronized 修饰符\n\nsynchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。\n\n```Java\npublic synchronized void showDetails(){\n.......\n}\n```\n\n### transient 修饰符\n\n序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n\n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n\n```Java\npublic transient int limit = 55;   // 不会持久化\npublic int b; // 持久化\n```\n\n### volatile 修饰符\n\nvolatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。\n\n```javascript\npublic class MyRunnable implements Runnable\n{\n    private volatile boolean active;\n    public void run()\n    {\n        active = true;\n        while (active) // 第一行\n        {\n            // 代码\n        }\n    }\n    public void stop()\n    {\n        active = false; // 第二行\n    }\n}\n```\n\n通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 ***第一行\\*** 中缓冲区的 active 值被使用，那么在 ***第二行\\*** 的 active 值为 false 时循环不会停止。\n\n但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。\n\n## 6，Java运算符\n\n### 6-1 算术运算符\n\n算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。\n\n表格中的实例假设整数变量A的值为10，变量B的值为20：\n\n![image-20240228212912288](/images/image-20240228212912288.png)\n\n下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     int c = 25;\n     int d = 25;\n     System.out.println(\"a + b = \" + (a + b) );\n     System.out.println(\"a - b = \" + (a - b) );\n     System.out.println(\"a * b = \" + (a * b) );\n     System.out.println(\"b / a = \" + (b / a) );\n     System.out.println(\"b % a = \" + (b % a) );\n     System.out.println(\"c % a = \" + (c % a) );\n     System.out.println(\"a++   = \" +  (a++) );\n     System.out.println(\"a--   = \" +  (a--) );\n     // 查看  d++ 与 ++d 的不同\n     System.out.println(\"d++   = \" +  (d++) );\n     System.out.println(\"++d   = \" +  (++d) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na + b = 30\na - b = -10\na * b = 200\nb / a = 2\nb % a = 0\nc % a = 5\na++   = 10\na--   = 11\nd++   = 25\n++d   = 27\n```\n\n### 6-2 自增自减运算符\n\n**1、自增（++）自减（--）运算符**是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 3;//定义一个变量；\n        int b = ++a;//自增运算\n        int c = 3;\n        int d = --c;//自减运算\n        System.out.println(\"进行自增运算后的值等于\"+b);\n        System.out.println(\"进行自减运算后的值等于\"+d);\n    }\n}\n```\n\n运行结果为：\n\n```\n进行自增运算后的值等于4\n进行自减运算后的值等于2\n```\n\n解析：\n\n- int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4\n- int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2\n\n**2、前缀自增自减法(++a,--a):** 先进行自增或者自减运算，再进行表达式运算。\n\n**3、后缀自增自减法(a++,a--):** 先进行表达式运算，再进行自增或者自减运算 实例：\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        int b = 5;\n        int x = 2*++a;\n        int y = 2*b++;\n        System.out.println(\"自增运算符前缀运算后a=\"+a+\",x=\"+x);\n        System.out.println(\"自增运算符后缀运算后b=\"+b+\",y=\"+y);\n    }\n}\n```\n\n运行结果为：\n\n```\n自增运算符前缀运算后a=6，x=12\n自增运算符后缀运算后b=6，y=10\n```\n\n### 6-3 关系运算符\n\n下表为Java支持的关系运算符\n\n表格中的实例整数变量A的值为10，变量B的值为20：\n\n![image-20240228213115946](/images/image-20240228213115946.png)\n\n下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     System.out.println(\"a == b = \" + (a == b) );\n     System.out.println(\"a != b = \" + (a != b) );\n     System.out.println(\"a > b = \" + (a > b) );\n     System.out.println(\"a < b = \" + (a < b) );\n     System.out.println(\"b >= a = \" + (b >= a) );\n     System.out.println(\"b <= a = \" + (b <= a) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na == b = false\na != b = true\na > b = false\na < b = true\nb >= a = true\nb <= a = false\n```\n\n### 6-4 位运算符\n\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。\n\n位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：\n\n```Java\nA = 0011 1100\nB = 0000 1101\n-----------------\nA&B = 0000 1100\nA | B = 0011 1101\nA ^ B = 0011 0001\n~A= 1100 0011\n```\n\n下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：\n\n![image-20240228213253912](/images/image-20240228213253912.png)\n\n下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     int a = 60; /* 60 = 0011 1100 */ \n     int b = 13; /* 13 = 0000 1101 */\n     int c = 0;\n     c = a & b;       /* 12 = 0000 1100 */\n     System.out.println(\"a & b = \" + c );\n \n     c = a | b;       /* 61 = 0011 1101 */\n     System.out.println(\"a | b = \" + c );\n \n     c = a ^ b;       /* 49 = 0011 0001 */\n     System.out.println(\"a ^ b = \" + c );\n \n     c = ~a;          /*-61 = 1100 0011 */\n     System.out.println(\"~a = \" + c );\n \n     c = a << 2;     /* 240 = 1111 0000 */\n     System.out.println(\"a << 2 = \" + c );\n \n     c = a >> 2;     /* 15 = 1111 */\n     System.out.println(\"a >> 2  = \" + c );\n  \n     c = a >>> 2;     /* 15 = 0000 1111 */\n     System.out.println(\"a >>> 2 = \" + c );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2  = 15\na >>> 2 = 15\n```\n\n### 6-5 逻辑运算符\n\n下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假\n\n![image-20240228213402353](/images/image-20240228213402353.png)\n\n下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     boolean a = true;\n     boolean b = false;\n     System.out.println(\"a && b = \" + (a&&b));\n     System.out.println(\"a || b = \" + (a||b) );\n     System.out.println(\"!(a && b) = \" + !(a && b));\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na && b = false\na || b = true\n!(a && b) = true\n```\n\n### 6-6 短路逻辑运算符\n\n当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。\n\n```Java\npublic class LuoJi{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        boolean b = (a<4)&&(a++<10);\n        System.out.println(\"使用短路逻辑运算符的结果为\"+b);\n        System.out.println(\"a的结果为\"+a);\n    }\n}\n```\n\n运行结果为：\n\n```\n使用短路逻辑运算符的结果为false\na的结果为5\n```\n\n**解析：** *该程序使用到了短路逻辑运算符(&&)，首先判断 a<4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++<10 的判断，所以 a 的值为 5。*\n\n### 6-7 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n![image-20240228213543244](/images/image-20240228213543244.png)\n\n面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        int c = 0;\n        c = a + b;\n        System.out.println(\"c = a + b = \" + c );\n        c += a ;\n        System.out.println(\"c += a  = \" + c );\n        c -= a ;\n        System.out.println(\"c -= a = \" + c );\n        c *= a ;\n        System.out.println(\"c *= a = \" + c );\n        a = 10;\n        c = 15;\n        c /= a ;\n        System.out.println(\"c /= a = \" + c );\n        a = 10;\n        c = 15;\n        c %= a ;\n        System.out.println(\"c %= a  = \" + c );\n        c <<= 2 ;\n        System.out.println(\"c <<= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c &= a ;\n        System.out.println(\"c &= a  = \" + c );\n        c ^= a ;\n        System.out.println(\"c ^= a   = \" + c );\n        c |= a ;\n        System.out.println(\"c |= a   = \" + c );\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nc = a + b = 30\nc += a  = 40\nc -= a = 30\nc *= a = 300\nc /= a = 1\nc %= a  = 5\nc <<= 2 = 20\nc >>= 2 = 5\nc >>= 2 = 1\nc &= a  = 0\nc ^= a   = 10\nc |= a   = 10\n```\n\n### 6-8 条件运算符（?:）\n\n条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。\n\n```Java\nvariable x = (expression) ? value if true : value if false\n```\n\n```Java\n// Test.java 文件代码：\n    \npublic class Test {\n   public static void main(String[] args){\n      int a , b;\n      a = 10;\n      // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30\n      b = (a == 1) ? 20 : 30;\n      System.out.println( \"Value of b is : \" +  b );\n \n      // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30\n      b = (a == 10) ? 20 : 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nValue of b is : 30\nValue of b is : 20\n```\n\n### 6-9 instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\ntrue\n```\n\n### 6-10 Java运算符优先级\n\n当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。\n\n例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。\n\n再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。\n\n下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。\n\n![image-20240228213815636](/images/image-20240228213815636.png)\n\n## 7，Java循环结构\n\n### 7-1 while 循环\n\nwhile是最基本的循环，它的结构为：\n\n```Java\nwhile( 布尔表达式 ) {\n  //循环内容\n}\n```\n\n只要布尔表达式为 true，循环就会一直执行下去。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n   public static void main(String args[]) {\n      int x = 10;\n      while( x < 20 ) {\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-2 do…while 循环\n\n对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。\n\ndo…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。\n\n```Java\ndo {\n       //代码语句\n}while(布尔表达式);\n```\n\n**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int x = 10;\n \n      do{\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }while( x < 20 );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-3 for循环\n\n虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。\n\nfor循环执行的次数是在执行前就确定的。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    //代码语句\n}\n```\n\n关于 for 循环有以下几点说明：\n\n- 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。\n- 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。\n- 执行一次循环后，更新循环控制变量。\n- 再次检测布尔表达式。循环执行上面的过程。\n\n实例\n\n**Test.java 文件代码**\n\n```java\npublic class Test {\n   public static void main(String args[]) {\n \n      for(int x = 10; x < 20; x = x+1) {\n         System.out.print(\"value of x : \" + x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-4 Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\n```java\nfor(声明语句 : 表达式)\n{\n   //代码句子\n}\n```\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10,20,30,40,50,\nJames,Larry,Tom,Lacy,\n```\n\n### 7-5 break 关键字\n\nbreak 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。\n\nbreak 跳出最里层的循环，并且继续执行该循环下面的语句。\n\n语法\n\nbreak 的用法很简单，就是循环结构中的一条语句：\n\n```\nbreak;\n```\n\n实例\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         // x 等于 30 时跳出循环\n         if( x == 30 ) {\n            break;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n10\n20\n```\n\n### 7-6 continue 关键字\n\ncontinue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。\n\n在 for 循环中，continue 语句使程序立即跳转到更新语句。\n\n在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。\n\n语法\n\ncontinue 就是循环体中一条简单的语句：\n\n```\ncontinue;\n```\n\n实例\n\n```java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         if( x == 30 ) {\n        continue;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10\n20\n40\n50\n```\n\n## 8，Java条件语句\n\n### 8-1 if...else语句\n\nif 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。\n\n语法\n\nif…else 的用法如下：\n\n```Java\nif(布尔表达式){\n   //如果布尔表达式的值为true\n}else{\n   //如果布尔表达式的值为false\n}\n```\n\n实例\n\n```Java\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n \n      if( x < 20 ){\n         System.out.print(\"这是 if 语句\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n这是 else 语句\n```\n\n### 8-2 if...else if...else 语句\n\nif 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。\n\n使用 if，else if，else 语句的时候，需要注意下面几点：\n\n- if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。\n- if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。\n- 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。\n\n**语法**\n\nif...else 语法格式如下:\n\n```java\nif(布尔表达式 1){\n   //如果布尔表达式 1的值为true执行代码\n}else if(布尔表达式 2){\n   //如果布尔表达式 2的值为true执行代码\n}else if(布尔表达式 3){\n   //如果布尔表达式 3的值为true执行代码\n}else {\n   //如果以上布尔表达式都不为true执行代码\n}\n```\n\n**实例**\n\n```Java\n// Test.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int x = 30;\n \n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\nValue of X is 30\n```\n\n### 8-3 嵌套的 if…else 语句\n\n使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。\n\n**语法**\n\n嵌套的 if…else 语法格式如下：\n\n```java\nif(布尔表达式 1){\n   ////如果布尔表达式 1的值为true执行代码\n   if(布尔表达式 2){\n      ////如果布尔表达式 2的值为true执行代码\n   }\n}\n```\n\n你可以像 if 语句一样嵌套 else if...else。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n \n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n以上代码编译运行结果如下：\n\n```java\nX = 30 and Y = 10\n```\n\n## 9，Java switch case 语句\n\nswitch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。\n\n**语法**\n\nswitch case 语句语法格式如下：\n\n```Java\nswitch(expression){\n    case value :\n       //语句\n       break; //可选\n    case value :\n       //语句\n       break; //可选\n    //你可以有任意数量的case语句\n    default : //可选\n       //语句\n}\n```\n\nswitch case 语句有如下规则：\n\n- switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。\n- switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。\n- case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。\n- 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。\n- 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。\n- switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。\n\n**switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。**\n\n**实例**\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n \n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n            break;\n         case 'F' :\n            System.out.println(\"你需要再努力努力\");\n            break;\n         default :\n            System.out.println(\"未知等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```Java\n良好\n你的等级是 C\n```\n\n如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int i = 5;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\ndefault\n```\n\n如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。\n\n```Java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\ndefault\n```\n\n如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         case 3:\n            System.out.println(\"3\"); break;\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\n3\n```\n\n## 10，Java Number & Math 类\n\n一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：**byte、int、long、double** 等。\n\n```Java\nint a = 5000;\nfloat b = 13.65f;\nbyte c = 0x4a;\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。\n\n所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。\n\n这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。\n\n下面是一个使用 Integer 对象的实例：\n\n```java\n// Test.java 文件代码：\n\npublic class Test{\n \n   public static void main(String args[]){\n      Integer x = 5;\n      x =  x + 10;\n      System.out.println(x); \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n15\n```\n\n当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。\n\n### 10-1 Java Math 类\n\nJava 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。\n\nMath 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。\n\n```java\nTest.java 文件代码：\npublic class Test {  \n    public static void main (String []args)  \n    {  \n        System.out.println(\"90 度的正弦值：\" + Math.sin(Math.PI/2));  \n        System.out.println(\"0度的余弦值：\" + Math.cos(0));  \n        System.out.println(\"60度的正切值：\" + Math.tan(Math.PI/3));  \n        System.out.println(\"1的反正切值： \" + Math.atan(1));  \n        System.out.println(\"π/2的角度值：\" + Math.toDegrees(Math.PI/2));  \n        System.out.println(Math.PI);  \n    }  \n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n90 度的正弦值：1.0\n0度的余弦值：1.0\n60度的正切值：1.7320508075688767\n1的反正切值： 0.7853981633974483\nπ/2的角度值：90.0\n3.141592653589793\n```\n\n### 10-2 Number & Math 类方法\n\n下面的表中列出的是 Number & Math 类常用的一些方法：\n\n![image-20240228220453132](/images/image-20240228220453132.png)\n\n### 10-3 Math 的 floor,round 和 ceil 方法实例比较\n\n![image-20240228220635826](/images/image-20240228220635826.png)\n\n**floor,round 和 ceil 实例：**\n\n```java\npublic class Main {   \n  public static void main(String[] args) {   \n    double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };   \n    for (double num : nums) {   \n      test(num);   \n    }   \n  }   \n  \n  private static void test(double num) {   \n    System.out.println(\"Math.floor(\" + num + \")=\" + Math.floor(num));   \n    System.out.println(\"Math.round(\" + num + \")=\" + Math.round(num));   \n    System.out.println(\"Math.ceil(\" + num + \")=\" + Math.ceil(num));   \n  }   \n}\n```\n\n以上实例执行输出结果为：\n\n```java\nMath.floor(1.4)=1.0\nMath.round(1.4)=1\nMath.ceil(1.4)=2.0\nMath.floor(1.5)=1.0\nMath.round(1.5)=2\nMath.ceil(1.5)=2.0\nMath.floor(1.6)=1.0\nMath.round(1.6)=2\nMath.ceil(1.6)=2.0\nMath.floor(-1.4)=-2.0\nMath.round(-1.4)=-1\nMath.ceil(-1.4)=-1.0\nMath.floor(-1.5)=-2.0\nMath.round(-1.5)=-1\nMath.ceil(-1.5)=-1.0\nMath.floor(-1.6)=-2.0\nMath.round(-1.6)=-2\nMath.ceil(-1.6)=-1.0\n```\n\n## 11，Java Character 类\n\nCharacter 类用于对单个字符进行操作。\n\nCharacter 类在对象中包装一个基本类型 **char** 的值\n\n```Java\nchar ch = 'a';\n \n// Unicode 字符表示形式\nchar uniChar = '\\u039A'; \n \n// 字符数组\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。\n\nCharacter类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：\n\n```Java\nCharacter ch = new Character('a');\n```\n\n在某些情况下，Java编译器会自动创建一个Character对象。\n\n例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。\n\n```Java\n// 原始字符 'a' 装箱到 Character 对象 ch 中\nCharacter ch = 'a';\n \n// 原始字符 'x' 用 test 方法装箱\n// 返回拆箱的值到 'c'\nchar c = test('x');\n```\n\n### 11-1 转义序列\n\n前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。\n\n下面列表展示了Java的转义序列：\n\n![image-20240228220904427](/images/image-20240228220904427.png)\n\n**实例**\n\n当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。\n\n以下实例转义双引号并输出：\n\n```Java\nTest.java 文件代码：\npublic class Test {\n \n   public static void main(String args[]) {\n      System.out.println(\"访问\\\"菜鸟教程!\\\"\");\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n访问\"菜鸟教程!\"\n```\n\n### 11-2 Character 方法\n\n下面是Character类的方法：\n\n![image-20240228220959034](/images/image-20240228220959034.png)\n\n## 12，Java String 类\n\n### 12-1 创建字符串\n\n创建字符串最简单的方式如下:\n\n```Java\nString greeting = \"菜鸟教程\";\n```\n\n在代码中遇到字符串常量时，这里的值是 \"**菜鸟教程**\"\"，编译器会使用该值创建一个 String 对象。\n\n和其它对象一样，可以使用关键字和构造方法来创建 String 对象。\n\nString 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo{\n   public static void main(String args[]){\n      char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'};\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nrunoob\n```\n\n**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。\n\n如果需要对字符串做很多修改，那么应该选择使用 [StringBuffer & StringBuilder 类](http://it028.com/java-stringbuffer.html)。\n\n### 12-2 字符串长度\n\n用于获取有关对象的信息的方法称为访问器方法。\n\nString 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。\n\n下面的代码执行后，len 变量等于 14:\n\n```java\n// StringDemo.java 文件代码：\npublic class StringDemo {\n    public static void main(String args[]) {\n        String site = \"www.runoob.com\";\n        int len = site.length();\n        System.out.println( \"菜鸟教程网址长度 : \" + len );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程网址长度 : 14\n```\n\n### 12-3 连接字符串\n\nString 类提供了连接两个字符串的方法：\n\nstring1.concat(string2);\n\n返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：\n\n```\n\"我的名字是 \".concat(\"Runoob\");\n```\n\n更常用的是使用'+'操作符来连接字符串，如：\n\n```\n\"Hello,\" + \" runoob\" + \"!\"\n```\n\n结果如下:\n\n```\n\"Hello, runoob!\"\n```\n\n下面是一个例子:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo {\n    public static void main(String args[]) {     \n        String string1 = \"菜鸟教程网址：\";     \n        System.out.println(\"1、\" + string1 + \"www.runoob.com\");  \n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1、菜鸟教程网址：www.runoob.com\n```\n\n### 12-4 创建格式化字符串\n\n我们知道输出格式化数字可以使用 printf() 和 format() 方法。\n\nString 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。\n\nString 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。\n\n如下所示：\n\n```java\nSystem.out.printf(\"浮点型变量的值为 \" +\n                  \"%f, 整型变量的值为 \" +\n                  \" %d, 字符串变量的值为 \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n```\n\n你也可以这样写\n\n```java\nString fs;\nfs = String.format(\"浮点型变量的值为 \" +\n                   \"%f, 整型变量的值为 \" +\n                   \" %d, 字符串变量的值为 \" +\n                   \" %s\", floatVar, intVar, stringVar);\n```\n\n### 12-5 String 方法\n\n下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm('https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html') 文档:\n\n![image-20240228221437713](/images/image-20240228221437713.png)\n\n## 13，Java StringBuffer 和 StringBuilder 类\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n```Java\nTest.java 文件代码：\npublic class Test{\n  public static void main(String args[]){\n    StringBuffer sBuffer = new StringBuffer(\"菜鸟教程官网：\");\n    sBuffer.append(\"www\");\n    sBuffer.append(\".runoob\");\n    sBuffer.append(\".com\");\n    System.out.println(sBuffer);  \n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程官网：www.runoob.com\n```\n\n### 13-1 StringBuffer 方法\n\n以下是 StringBuffer 类支持的主要方法\n\n![image-20240228221542960](/images/image-20240228221542960.png)\n\n下面的列表里的方法和 String 类的方法类似：\n\n![image-20240228221620605](/images/image-20240228221620605.png)\n\n## 14，Java数组\n\n### 14-1 声明数组变量\n\n首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：\n\n```Java\ndataType[] arrayRefVar;   // 首选的方法\n \n或\n \ndataType arrayRefVar[];  // 效果相同，但不是首选方法\n```\n\n**注意:** 建议使用 **dataType[] arrayRefVar** 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。\n\n下面是这两种语法的代码示例：\n\n```Java\ndouble[] myList;         // 首选的方法\n \n或\n \ndouble myList[];         //  效果相同，但不是首选方法\n```\n\n### 14-2 创建数组\n\nJava语言使用new操作符来创建数组，语法如下：\n\n```\narrayRefVar = new dataType[arraySize];\n```\n\n上面的语法语句做了两件事：\n\n- 一、使用 dataType[arraySize] 创建了一个数组。\n- 二、把新创建的数组的引用赋值给变量 arrayRefVar。\n\n数组变量的声明，和创建数组可以用一条语句完成，如下所示：\n\n```\ndataType[] arrayRefVar = new dataType[arraySize];\n```\n\n另外，你还可以使用如下的方式创建数组。\n\n```\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n```\n\n数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。\n\n**实例**\n\n下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。\n\n```Java\nTestArray.java 文件代码：\npublic class TestArray {\n   public static void main(String[] args) {\n      // 数组大小\n      int size = 10;\n      // 定义数组\n      double[] myList = new double[size];\n      myList[0] = 5.6;\n      myList[1] = 4.5;\n      myList[2] = 3.3;\n      myList[3] = 13.2;\n      myList[4] = 4.0;\n      myList[5] = 34.33;\n      myList[6] = 34.0;\n      myList[7] = 45.45;\n      myList[8] = 99.993;\n      myList[9] = 11123;\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < size; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"总和为： \" + total);\n   }\n}\n```\n\n以上实例输出结果为：\n\n```\n总和为： 11367.373\n```\n\n### 14-3 处理数组\n\n数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。\n\n**示例**\n\n该实例完整地展示了如何创建、初始化和操纵数组：\n\n```Java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      // 查找最大元素\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n```\n\n### 14-4 For-Each 循环\n\nJDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。\n\n语法格式如下：\n\n```java\nfor(type element: array)\n{\n    System.out.println(element);\n}\n```\n\n**实例**\n\n该实例用来显示数组 myList 中的所有元素：\n\n```java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1.9\n2.9\n3.4\n3.5\n```\n\n### 14-5 数组作为函数的参数\n\n数组可以作为参数传递给方法。\n\n例如，下面的例子就是一个打印 int 数组中元素的方法:\n\n```java\npublic static void printArray(int[] array) {\n  for (int i = 0; i < array.length; i++) {\n    System.out.print(array[i] + \" \");\n  }\n}\n```\n\n下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：\n\n```java\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n```\n\n### 14-6 数组作为函数的返回值\n\n```java\npublic static int[] reverse(int[] list) {\n  int[] result = new int[list.length];\n \n  for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n    result[j] = list[i];\n  }\n  return result;\n}\n```\n\n### 14-7 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：\n\n```java\nString str[][] = new String[3][4];\n```\n\n#### 14-7-1 多维数组的动态初始化（以二维数组为例）\n\n1. 直接为每一维分配空间，格式如下：\n\n```java\ntype[][] typeName = new type[typeLength1][typeLength2];\n```\n\ntype 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。\n\n例如：\n\n```java\nint a[][] = new int[2][3];\n```\n\n解析：\n\n二维数组 a 可以看成一个两行三列的数组。\n\n2，从最高维开始，分别为每一维分配空间，例如：\n\n```Java\nString s[][] = new String[2][];\ns[0] = new String[2];\ns[1] = new String[3];\ns[0][0] = new String(\"Good\");\ns[0][1] = new String(\"Luck\");\ns[1][0] = new String(\"to\");\ns[1][1] = new String(\"you\");\ns[1][2] = new String(\"!\");\n```\n\n解析：\n\n**s[0]=new String[2]** 和 **s[1]=new String[3]** 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 **s0=new String(\"Good\")** 等操作。\n\n#### 14-7-2 多维数组的引用（以二维数组为例）\n\n对二维数组中的每个元素，引用方式为 **arrayName[index1][index2]**，例如：\n\n```Java\nnum[1][0];\n```\n\n### 14-8 Arrays 类\n\njava.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。\n\n具有以下功能：\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n具体说明请查看下表：\n\n![image-20240228222507296](/images/image-20240228222507296.png)\n\n## 15，Java 日期时间\n\njava.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。\n\n第一个构造函数使用当前日期和时间来初始化对象。\n\n```Java\nDate( )\n```\n\n第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。\n\n```\nDate(long millisec)\n```\n\nDate对象创建以后，可以调用下面的方法。\n\n![image-20240228222725206](/images/image-20240228222725206.png)\n\n### 15-1 获取当前日期时间\n\nJava中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用 toString() 函数显示日期时间\n       System.out.println(date.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nMon May 04 09:51:52 CDT 2013\n```\n\n### 15-2 日期比较\n\nJava使用以下三种方法来比较两个日期：\n\n- 使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。\n- 使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。\n- 使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。\n\n### 15-3 使用 SimpleDateFormat 格式化日期\n\nSimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：\n\n```Java\nimport  java.util.*;\nimport java.text.*;\n \npublic class DateDemo {\n   public static void main(String args[]) {\n \n      Date dNow = new Date( );\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n \n      System.out.println(\"当前时间为: \" + ft.format(dNow));\n   }\n}\n```\n\n```\nSimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n```\n\n这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。\n\n**注意**:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。\n\n以上实例编译运行结果如下:\n\n```\n当前时间为: 2018-09-06 10:16:34\n```\n\n### 15-4 日期和时间的格式化编码\n\n时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：\n\n![image-20240228222933035](/images/image-20240228222933035.png)\n\n### 15-5 使用printf格式化日期\n\nprintf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 **%t** 开头并且以下面表格中的一个字母结尾。\n\n![image-20240228223002094](/images/image-20240228223002094.png)\n\n**实例**\n\n```Java\nimport java.util.Date;\n \npublic class DateDemo {\n \n  public static void main(String args[]) {\n     // 初始化 Date 对象\n     Date date = new Date();\n \n     //c的使用  \n    System.out.printf(\"全部日期和时间信息：%tc%n\",date);          \n    //f的使用  \n    System.out.printf(\"年-月-日格式：%tF%n\",date);  \n    //d的使用  \n    System.out.printf(\"月/日/年格式：%tD%n\",date);  \n    //r的使用  \n    System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\",date);  \n    //t的使用  \n    System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\",date);  \n    //R的使用  \n    System.out.printf(\"HH:MM格式（24时制）：%tR\",date);  \n  }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  \n年-月-日格式：2012-09-10  \n月/日/年格式：09/10/12  \nHH:MM:SS PM格式（12时制）：10:43:36 上午  \nHH:MM:SS格式（24时制）：10:43:36  \nHH:MM格式（24时制）：10:43  \n```\n\n如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。\n\n索引必须紧跟在%后面，而且必须以$结束。例如\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用toString()显示日期和时间\n       System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n或者，你可以使用 < 标志。它表明先前被格式化的参数要被再次使用。例如：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 显示格式化时间\n       System.out.printf(\"%s %tB %<te, %<tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：\n\n```Java\nimport java.util.*;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       Date date=new Date();                                      \n        //b的使用，月份简称  \n        String str=String.format(Locale.US,\"英文月份简称：%tb\",date);       \n        System.out.println(str);                                                                              \n        System.out.printf(\"本地月份简称：%tb%n\",date);  \n        //B的使用，月份全称  \n        str=String.format(Locale.US,\"英文月份全称：%tB\",date);  \n        System.out.println(str);  \n        System.out.printf(\"本地月份全称：%tB%n\",date);  \n        //a的使用，星期简称  \n        str=String.format(Locale.US,\"英文星期的简称：%ta\",date);  \n        System.out.println(str);  \n        //A的使用，星期全称  \n        System.out.printf(\"本地星期的简称：%tA%n\",date);  \n        //C的使用，年前两位  \n        System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\",date);  \n        //y的使用，年后两位  \n        System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\",date);  \n        //j的使用，一年的天数  \n        System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\",date);  \n        //m的使用，月份  \n        System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\",date);  \n        //d的使用，日（二位，不够补零）  \n        System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\",date);  \n        //e的使用，日（一位不补零）  \n        System.out.printf(\"月份的日（前面不补0）：%te\",date);  \n   }\n}\n```\n\n输出结果为：\n\n```Java\n英文月份简称：May\n本地月份简称：五月\n英文月份全称：May\n本地月份全称：五月\n英文星期的简称：Thu\n本地星期的简称：星期四\n年的前两位数字（不足两位前面补0）：20\n年的后两位数字（不足两位前面补0）：17\n一年中的天数（即年的第几天）：124\n两位数字的月份（不足两位前面补0）：05\n两位数字的日（不足两位前面补0）：04\n月份的日（前面不补0）：4\n```\n\n------\n\n### 15-6 解析字符串为时间\n\nSimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：\n\n```Java\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n \n      System.out.print(input + \" Parses as \"); \n \n      Date t; \n \n      try { \n          t = ft.parse(input); \n          System.out.println(t); \n      } catch (ParseException e) { \n          System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ java DateDemo\n1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818\n$ java DateDemo 2007-12-01\n2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007\n```\n\n### 15-7 Java 休眠(sleep)\n\nsleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。\n\n你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：\n\n```Java\nimport java.util.*;\n  \npublic class SleepDemo {\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(1000*3);   // 休眠3秒\n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) { \n          System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nThu Sep 17 10:20:30 CST 2015\n\nThu Sep 17 10:20:33 CST 2015\n```\n\n### 15-8 测量时间\n\n下面的一个例子表明如何测量时间间隔（以毫秒为单位）：\n\n```Java\nimport java.util.*;\n  \npublic class DiffDemo {\n \n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nFri Jan 08 09:48:47 CST 2016\n\nFri Jan 08 09:48:50 CST 2016\n\nDifference is : 3019\n```\n\n### 15-9 Calendar类\n\n我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。\n\nCalendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。\n\nCalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。\n\n#### 15-9-1 创建一个代表系统当前日期的Calendar对象\n\n```Java\nCalendar c = Calendar.getInstance();//默认是当前日期\n```\n\n#### 15-9-2 创建一个指定日期的Calendar对象\n\n使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。\n\n```Java\n//创建一个代表2009年6月12日的Calendar对象\nCalendar c1 = Calendar.getInstance();\nc1.set(2009, 6 - 1, 12);\n```\n\n#### 15-9-3 Calendar类对象字段类型\n\nCalendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想\n\n![image-20240228225026914](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225026914.png)\n\n#### 15-9-4 Calendar类对象信息的设置\n\n**Set设置**\n\n如：\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n调用：\n\n```\npublic final void set(int year,int month,int date)\nc1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12\n```\n\n利用字段类型设置\n\n如果只设定某个字段，例如日期的值，则可以使用如下set方法：\n\n```\npublic void set(int field,int value)\n```\n\n把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算\n\n```\nc1.set(Calendar.DATE,10);\n```\n\n把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算\n\n```\nc1.set(Calendar.YEAR,2008);\n```\n\n其他字段属性set的意义以此类推\n\n**Add设置**\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, 10);\n```\n\n把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, -10);\n```\n\n其他字段属性的add的意义以此类推\n\n#### 15-9-5 Calendar类对象信息的获得\n\n```Java\nCalendar c1 = Calendar.getInstance();\n// 获得年份\nint year = c1.get(Calendar.YEAR);\n// 获得月份\nint month = c1.get(Calendar.MONTH) + 1;\n// 获得日期\nint date = c1.get(Calendar.DATE);\n// 获得小时\nint hour = c1.get(Calendar.HOUR_OF_DAY);\n// 获得分钟\nint minute = c1.get(Calendar.MINUTE);\n// 获得秒\nint second = c1.get(Calendar.SECOND);\n// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）\nint day = c1.get(Calendar.DAY_OF_WEEK);\n```\n\n### 15-10 GregorianCalendar类\n\nCalendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。\n\nCalendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。\n\n下面列出GregorianCalendar对象的几个构造方法：\n\n![image-20240228225136150](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225136150.png)\n\n这里是GregorianCalendar 类提供的一些有用的方法列表：\n\n![image-20240228225205976](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225205976.png)\n\n```Java\nimport java.util.*;\n  \npublic class GregorianCalendarDemo {\n \n   public static void main(String args[]) {\n      String months[] = {\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n      \"May\", \"Jun\", \"Jul\", \"Aug\",\n      \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // 初始化 Gregorian 日历\n      // 使用当前时间和日期\n      // 默认为本地时间和时区\n      GregorianCalendar gcalendar = new GregorianCalendar();\n      // 显示当前时间和日期的信息\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n      \n      // 测试当前年份是否为闰年\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"当前年份是闰年\");\n      }\n      else {\n         System.out.println(\"当前年份不是闰年\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nDate: Apr 22 2009\nTime: 11:25:27\n当前年份不是闰年\n```\n\n关于 Calender 类的完整列表，你可以参考标准的 [Java文档](http://it028.com/index-10.htm)。\n\n## 16，Java 正则表达式\n\n正则表达式定义了字符串的模式。\n\n正则表达式可以用来搜索、编辑或处理文本。\n\n正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。\n\n### 16-1 正则表达式实例\n\n一个字符串其实就是一个简单的正则表达式，例如 **Hello World** 正则表达式匹配 \"Hello World\" 字符串。\n\n**.**（点号）也是一个正则表达式，它匹配任何一个字符如：\"a\" 或 \"1\"。\n\n下表列出了一些正则表达式的实例及描述：\n\n![image-20240228225320769](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225320769.png)\n\nJava 正则表达式和 Perl 的是最为相似的。\n\njava.util.regex 包主要包括以下三个类：\n\n- Pattern 类：\n\n  pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\n\n- Matcher 类：\n\n  Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\n\n- PatternSyntaxException：\n\n  PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\n\n以下实例中使用了正则表达式 **.\\*runoob.\\*** 用于查找字符串中是否包了 **runoob** 子串：\n\n```Java\nimport java.util.regex.*;\n \nclass RegexExample1{\n   public static void main(String args[]){\n      String content = \"I am noob \" +\n        \"from runoob.com.\";\n \n      String pattern = \".*runoob.*\";\n \n      boolean isMatch = Pattern.matches(pattern, content);\n      System.out.println(\"字符串中是否包含了 'runoob' 子字符串? \" + isMatch);\n   }\n}\n```\n\n实例输出结果为：\n\n```\n字符串中是否包含了 'runoob' 子字符串? true\n```\n\n### 16-2 捕获组\n\n捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。\n\n例如，正则表达式 (dog) 创建了单一分组，组里包含\"d\"，\"o\"，和\"g\"。\n\n捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：\n\n- ((A)(B(C)))\n- (A)\n- (B(C))\n- (C)\n\n可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。\n\n还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    public static void main( String args[] ){\n \n      // 按指定模式在字符串查找\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(\\\\D*)(\\\\d+)(.*)\";\n \n      // 创建 Pattern 对象\n      Pattern r = Pattern.compile(pattern);\n \n      // 现在创建 matcher 对象\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n         System.out.println(\"Found value: \" + m.group(3) ); \n      } else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT\nFound value: 3000\nFound value: ! OK?\n```\n\n------\n\n### 16-3 正则表达式语法\n\n在其他语言中，**\\\\** 表示：**我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。**\n\n在 Java 中，**\\\\** 表示：**我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。**\n\n所以，在其他的语言中（如Perl），一个反斜杠 **\\** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 **\\\\** 代表其他语言中的一个 **\\**，这也就是为什么表示一位数字的正则表达式是 **\\\\d**，而表示一个普通的反斜杠是 **\\\\\\\\**。\n\n![image-20240228225546405](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225546405.png)\n\n### 16-4 Matcher 类的方法\n\n#### 16-4-1 索引方法\n\n索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：\n\n![image-20240228225637596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225637596.png)\n\n#### 16-4-2 研究方法\n\n研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：\n\n![image-20240228225700596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225700596.png)\n\n#### 16-4-3 替换方法\n\n替换方法是替换输入字符串里文本的方法：\n\n![image-20240228225727777](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225727777.png)\n\n#### 16-4-4 start 和 end 方法\n\n下面是一个对单词 \"cat\" 出现在输入字符串中出现次数进行计数的例子：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"\\\\bcat\\\\b\";\n    private static final String INPUT =\n                                    \"cat cat cat cattie cat\";\n \n    public static void main( String args[] ){\n       Pattern p = Pattern.compile(REGEX);\n       Matcher m = p.matcher(INPUT); // 获取 matcher 对象\n       int count = 0;\n \n       while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n```\n\n可以看到这个例子是使用单词边界，以确保字母 \"c\" \"a\" \"t\" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。\n\nStart 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。\n\n#### 16-4-5 matches 和 lookingAt 方法\n\nmatches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。\n\nlookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。\n\n这两个方法经常在输入字符串的开始使用。\n\n我们通过下面这个例子，来解释这个功能：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"foo\";\n    private static final String INPUT = \"fooooooooooooooooo\";\n    private static final String INPUT2 = \"ooooofoooooooooooo\";\n    private static Pattern pattern;\n    private static Matcher matcher;\n    private static Matcher matcher2;\n \n    public static void main( String args[] ){\n       pattern = Pattern.compile(REGEX);\n       matcher = pattern.matcher(INPUT);\n       matcher2 = pattern.matcher(INPUT2);\n \n       System.out.println(\"Current REGEX is: \"+REGEX);\n       System.out.println(\"Current INPUT is: \"+INPUT);\n       System.out.println(\"Current INPUT2 is: \"+INPUT2);\n \n \n       System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n       System.out.println(\"matches(): \"+matcher.matches());\n       System.out.println(\"lookingAt(): \"+matcher2.lookingAt());\n   }\n```\n\n以上实例编译运行结果如下：\n\n```\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nCurrent INPUT2 is: ooooofoooooooooooo\nlookingAt(): true\nmatches(): false\nlookingAt(): false\n```\n\n#### 16-4-6 replaceFirst 和 replaceAll 方法\n\nreplaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。\n\n下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static String REGEX = \"dog\";\n    private static String INPUT = \"The dog says meow. \" +\n                                    \"All dogs say meow.\";\n    private static String REPLACE = \"cat\";\n \n    public static void main(String[] args) {\n       Pattern p = Pattern.compile(REGEX);\n       // get a matcher object\n       Matcher m = p.matcher(INPUT); \n       INPUT = m.replaceAll(REPLACE);\n       System.out.println(INPUT);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe cat says meow. All cats say meow.\n```\n\n#### 16-4-7 appendReplacement 和 appendTail 方法\n\nMatcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：\n\n看下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoobkkk\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      // 获取 matcher 对象\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()){\n         m.appendReplacement(sb,REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n-foo-foo-foo-kkk\n```\n\n#### 16-4-8 PatternSyntaxException 类的方法\n\nPatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。\n\nPatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。\n\n![image-20240228230136771](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228230136771.png)\n\n## 17，Java 方法\n\n在前面几个章节中我们经常使用到 **System.out.println()**，那么它是什么呢？\n\n- println() 是一个方法。\n- System 是系统类。\n- out 是标准输出对象。\n\n这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。\n\n\n\n### 17-1 那么什么是方法呢？\n\nJava方法是语句的集合，它们在一起执行一个功能。\n\n- 方法是解决一类问题的步骤的有序组合\n- 方法包含于类或对象中\n- 方法在程序中被创建，在其他地方被引用\n\n### 17-2 方法的优点\n\n- \\1. 使程序变得更简短而清晰。\n- \\2. 有利于程序维护。\n- \\3. 可以提高程序开发的效率。\n- \\4. 提高了代码的重用性。\n\n### 17-3 方法的命名规则\n\n- 1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：**addPerson**。\n- 2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：**test<MethodUnderTest>_<state>**，例如 **testPop_emptyStack**。\n\n------\n\n### 17-4 方法的定义\n\n一般情况下，定义一个方法包含以下语法：\n\n```Java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n\n方法包含一个方法头和一个方法体。下面是一个方法的所有部分：\n\n- **修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。\n- **返回值类型 ：**方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字**void**。\n- **方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。\n- **参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。\n- **方法体：**方法体包含具体的语句，定义该方法的功能。\n\n```Java\npublic static int age(int birthday){...}\n```\n\n参数可以有多个：\n\n```Java\nstatic float interest(float principal, int year){...}\n```\n\n**注意：** 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。\n\n下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。\n\n```Java\n/** 返回两个整型变量数据的较大值 */\npublic static int max(int num1, int num2) {\n   int result;\n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n```\n\n### 17-5 方法调用\n\nJava 支持两种调用方法的方式，根据方法是否返回值来选择。\n\n当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。\n\n当方法返回一个值的时候，方法调用通常被当做一个值。例如：\n\n```Java\nint larger = max(30, 40);\n```\n\n如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：\n\n```Java\nSystem.out.println(\"欢迎访问菜鸟教程！\");\n```\n\n下面的例子演示了如何定义一个方法，以及如何调用它：\n\n```Java\n// TestMax.java 文件代码：\n\npublic class TestMax {\n   /** 主方法 */\n   public static void main(String[] args) {\n      int i = 5;\n      int j = 2;\n      int k = max(i, j);\n      System.out.println( i + \" 和 \" + j + \" 比较，最大值是：\" + k);\n   }\n \n   /** 返回两个整数变量较大的值 */\n   public static int max(int num1, int num2) {\n      int result;\n      if (num1 > num2)\n         result = num1;\n      else\n         result = num2;\n \n      return result; \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n5 和 2 比较，最大值是：5\n```\n\n这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。\n\nmain 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。\n\n### 17-6 void 关键字\n\n本节说明如何声明和调用一个 void 方法。\n\n下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。\n\n```java\nTestVoidMethod.java 文件代码：\npublic class TestVoidMethod {\n  public static void main(String[] args) {\n    printGrade(78.5);\n  }\n \n  public static void printGrade(double score) {\n    if (score >= 90.0) {\n       System.out.println('A');\n    }\n    else if (score >= 80.0) {\n       System.out.println('B');\n    }\n    else if (score >= 70.0) {\n       System.out.println('C');\n    }\n    else if (score >= 60.0) {\n       System.out.println('D');\n    }\n    else {\n       System.out.println('F');\n    }\n  }\n}\n```\n\n\n\n以上实例编译运行结果如下：\n\n```\nC\n```\n\n这里printGrade方法是一个void类型方法，它不返回值。\n\n一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。\n\n------\n\n### 17-7 通过值传递参数\n\n调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。\n\n例如，下面的方法连续n次打印一个消息：\n\n```java\n// TestVoidMethod.java 文件代码：\npublic static void nPrintln(String message, int n) {\n  for (int i = 0; i < n; i++) {\n    System.out.println(message);\n  }\n}\n```\n\n**示例**\n\n下面的例子演示按值传递的效果。\n\n该程序创建一个方法，该方法用于交换两个变量。\n\n```java\n// TestPassByValue.java 文件代码：\npublic class TestPassByValue {\n  public static void main(String[] args) {\n    int num1 = 1;\n    int num2 = 2;\n \n    System.out.println(\"交换前 num1 的值为：\" +\n                        num1 + \" ，num2 的值为：\" + num2);\n \n    // 调用swap方法\n    swap(num1, num2);\n    System.out.println(\"交换后 num1 的值为：\" +\n                       num1 + \" ，num2 的值为：\" + num2);\n  }\n  /** 交换两个变量的方法 */\n  public static void swap(int n1, int n2) {\n    System.out.println(\"\\t进入 swap 方法\");\n    System.out.println(\"\\t\\t交换前 n1 的值为：\" + n1\n                         + \"，n2 的值：\" + n2);\n    // 交换 n1 与 n2的值\n    int temp = n1;\n    n1 = n2;\n    n2 = temp;\n \n    System.out.println(\"\\t\\t交换后 n1 的值为 \" + n1\n                         + \"，n2 的值：\" + n2);\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n交换前 num1 的值为：1 ，num2 的值为：2\n    进入 swap 方法\n        交换前 n1 的值为：1，n2 的值：2\n        交换后 n1 的值为 2，n2 的值：1\n交换后 num1 的值为：1 ，num2 的值为：2\n```\n\n传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。\n\n------\n\n### 17-8 方法的重载\n\n上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？\n\n解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：\n\n```java\npublic static double max(double num1, double num2) {\n  if (num1 > num2)\n    return num1;\n  else\n    return num2;\n}\n```\n\n如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；\n\n如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；\n\n就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。\n\nJava编译器根据方法签名判断哪个方法应该被调用。\n\n方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。\n\n重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。\n\n### 17-9 变量作用域\n\n- 变量的范围是程序中该变量可以被引用的部分。\n- 方法内定义的变量被称为局部变量。\n- 局部变量的作用范围从声明开始，直到包含它的块结束。\n- 局部变量必须声明才可以使用。\n- 方法的参数范围涵盖整个方法。参数实际上是一个局部变量。\n- for循环的初始化部分声明的变量，其作用范围在整个循环。\n- 但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：\n- 你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。\n\n### 17-10 命令行参数的使用\n\n有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。\n\n命令行参数是在执行程序时候紧跟在程序名字后面的信息。\n\n\n\n下面的程序打印所有的命令行参数：\n\n```java\nCommandLine.java 文件代码：\npublic class CommandLine {\n   public static void main(String args[]){ \n      for(int i=0; i<args.length; i++){\n         System.out.println(\"args[\" + i + \"]: \" + args[i]);\n      }\n   }\n}\n```\n\n如下所示，运行这个程序：\n\n```\n$ javac CommandLine.java \n$ java CommandLine this is a command line 200 -100\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n```\n\n------\n\n### 17-11 构造方法\n\n- 当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。\n- 通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。\n- 不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。\n- 一旦你定义了自己的构造方法，默认构造方法就会失效。\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass() {\n    x = 10;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n```\n\n大多时候需要一个有参数的构造方法。\n\n**实例**\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass(int i ) {\n    x = i;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n  public static void main(String args[]) {\n    MyClass t1 = new MyClass( 10 );\n    MyClass t2 = new MyClass( 20 );\n    System.out.println(t1.x + \" \" + t2.x);\n  }\n}\n```\n\n运行结果如下：\n\n```\n10 20\n```\n\n### 17-12 可变参数\n\nJDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。\n\n方法的可变参数的声明如下所示：\n\n```\ntypeName... parameterName\n```\n\n在方法声明中，在指定参数类型后加一个省略号(...) 。\n\n一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。\n\n```java\npublic class VarargsDemo {\n    public static void main(String args[]) {\n        // 调用可变参数的方法\n        printMax(34, 3, 3, 2, 56.5);\n        printMax(new double[]{1, 2, 3});\n    }\n \n    public static void printMax( double... numbers) {\n        if (numbers.length == 0) {\n            System.out.println(\"No argument passed\");\n            return;\n        }\n \n        double result = numbers[0];\n \n        for (int i = 1; i <  numbers.length; i++){\n            if (numbers[i] >  result) {\n                result = numbers[i];\n            }\n        }\n        System.out.println(\"The max value is \" + result);\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe max value is 56.5\nThe max value is 3.0\n```\n\n### 17-13 finalize() 方法\n\nJava 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。\n\n例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。\n\n在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。\n\nfinalize() 一般格式是：\n\n```java\nprotected void finalize()\n{\n   // 在这里终结代码\n}\n```\n\n关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。\n\n当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。\n\n```java\n// FinalizationDemo.java 文件代码：\npublic class FinalizationDemo {  \n  public static void main(String[] args) {  \n    Cake c1 = new Cake(1);  \n    Cake c2 = new Cake(2);  \n    Cake c3 = new Cake(3);  \n      \n    c2 = c3 = null;  \n    System.gc(); //调用Java垃圾收集器\n  }  \n}  \n \nclass Cake extends Object {  \n  private int id;  \n  public Cake(int id) {  \n    this.id = id;  \n    System.out.println(\"Cake Object \" + id + \"is created\");  \n  }  \n    \n  protected void finalize() throws java.lang.Throwable {  \n    super.finalize();  \n    System.out.println(\"Cake Object \" + id + \"is disposed\");  \n  }  \n}\n```\n\n运行以上代码，输出结果如下：\n\n```\n$ javac FinalizationDemo.java \n$ java FinalizationDemo\nCake Object 1is created\nCake Object 2is created\nCake Object 3is created\nCake Object 3is disposed\nCake Object 2is disposed\n```\n\n## 18，Java 流(Stream)、文件(File)和IO\n\n- Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n- Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n- 一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n- Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。\n- 但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。\n\n### 18-1 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n下面是创建 BufferedReader 的基本语法：\n\n```Java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\nBufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。\n\n### 18-2 从控制台读取多字符输入\n\n从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：\n\n```Java\nint read( ) throws IOException\n```\n\n每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。\n\n下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 \"q\"。\n\n```java\n// BRRead.java 文件代码：\n//使用 BufferedReader 在控制台读取字符\n \nimport java.io.*;\n \npublic class BRRead {\n    public static void main(String args[]) throws IOException {\n        char c;\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"输入字符, 按下 'q' 键退出。\");\n        // 读取字符\n        do {\n            c = (char) br.read();\n            System.out.println(c);\n        } while (c != 'q');\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n输入字符, 按下 'q' 键退出。\nrunoob\nr\nu\nn\no\no\nb\n\n\nq\nq\n```\n\n### 18-3 从控制台读取字符串\n\n从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。\n\n它的一般格式是：\n\n```java\nString readLine( ) throws IOException\n```\n\n下面的程序读取和显示字符行直到你输入了单词\"end\"。\n\n```java\n//使用 BufferedReader 在控制台读取字符\nimport java.io.*;\n \npublic class BRReadLines {\n    public static void main(String args[]) throws IOException {\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String str;\n        System.out.println(\"Enter lines of text.\");\n        System.out.println(\"Enter 'end' to quit.\");\n        do {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nEnter lines of text.\nEnter 'end' to quit.\nThis is line one\nThis is line one\nThis is line two\nThis is line two\nend\nend\n```\n\n> JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm('https://www.runoob.com//images/sqlite-c-cpp.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-c-cpp.html') 类来获取控制台的输入。\n\n### 18-4 控制台输出\n\n在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\nPrintStream 定义 write() 的最简单格式如下所示：\n\n```java\nvoid write(int byteval)\n```\n\n该方法将 byteval 的低八位字节写到流中。\n\n下面的例子用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕：\n\n```java\nWriteDemo.java 文件代码：\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\n运行以上实例在输出窗口输出 \"A\" 字符\n\n```\nA\n```\n\n**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 18-5 读写文件\n\n如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。\n\n#### 18-5-1 FileInputStream\n\n- 该流用于从文件读取数据，它的对象可以用关键字 new 来创建。\n- 有多种构造方法可用来创建对象。\n- 可以使用字符串类型的文件名来创建一个输入流对象来读取文件：\n\n```java\nInputStream f = new FileInputStream(\"C://images/hello\");\n```\n\n- 也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); InputStream out = new FileInputStream(f);\n```\n\n- 创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。\n\n![image-20240228231544486](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231544486.png)\n\n除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：\n\n- [ByteArrayInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-php.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-php.html')\n- [DataInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-perl.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-perl.html')\n\n------\n\n#### 18-5-2 FileOutputStream\n\n该类用来创建一个文件并向文件中写数据。\n\n如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。\n\n有两个构造方法可以用来创建 FileOutputStream 对象。\n\n使用字符串类型的文件名来创建一个输出流对象：\n\n```java\nOutputStream f = new FileOutputStream(\"C://images/hello\")\n```\n\n也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); \nOutputStream f = new FileOutputStream(f);\n```\n\n创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。\n\n![image-20240228231647489](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231647489.png)\n\n除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：\n\n- [ByteArrayOutputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-python.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-python.html')\n- [DataOutputStream](javascript:if(confirm('https://www.runoob.com//images/execute_sql_online.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/execute_sql_online.php')\n\n下面是一个演示 InputStream 和 OutputStream 用法的例子\n\n```java\n// fileStreamTest.java 文件代码：\n\nimport java.io.*;\n \npublic class fileStreamTest {\n    public static void main(String args[]) {\n        try {\n            byte bWrite[] = { 11, 21, 3, 40, 5 };\n            OutputStream os = new FileOutputStream(\"test.txt\");\n            for (int x = 0; x < bWrite.length; x++) {\n                os.write(bWrite[x]); // writes the bytes\n            }\n            os.close();\n \n            InputStream is = new FileInputStream(\"test.txt\");\n            int size = is.available();\n \n            for (int i = 0; i < size; i++) {\n                System.out.print((char) is.read() + \"  \");\n            }\n            is.close();\n        } catch (IOException e) {\n            System.out.print(\"Exception\");\n        }\n    }\n}\n```\n\n上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。\n\n以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：\n\n```java\nfileStreamTest2.java 文件代码：\n//文件名 :fileStreamTest2.java\nimport java.io.*;\n \npublic class fileStreamTest2 {\n    public static void main(String[] args) throws IOException {\n \n        File f = new File(\"a.txt\");\n        FileOutputStream fop = new FileOutputStream(f);\n        // 构建FileOutputStream对象,文件不存在会自动新建\n \n        OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\");\n        // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk\n \n        writer.append(\"中文输入\");\n        // 写入到缓冲区\n \n        writer.append(\"\\r\\n\");\n        // 换行\n \n        writer.append(\"English\");\n        // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入\n \n        writer.close();\n        // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉\n \n        fop.close();\n        // 关闭输出流,释放系统资源\n \n        FileInputStream fip = new FileInputStream(f);\n        // 构建FileInputStream对象\n \n        InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\");\n        // 构建InputStreamReader对象,编码与写入相同\n \n        StringBuffer sb = new StringBuffer();\n        while (reader.ready()) {\n            sb.append((char) reader.read());\n            // 转成char加到StringBuffer对象中\n        }\n        System.out.println(sb.toString());\n        reader.close();\n        // 关闭读取流\n \n        fip.close();\n        // 关闭输入流,释放系统资源\n \n    }\n}\n```\n\n### 18-6 文件和I/O\n\n还有一些关于文件和I/O的类，我们也需要知道：\n\n- [File Class(类)](javascript:if(confirm('https://www.runoob.com//images/book.sqlite3.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/book.sqlite3.php')\n- [FileReader Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite-jdbc  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-jdbc')\n- [FileWriter Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite3.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite3.html')\n\n------\n\n### 18-7 Java中的目录\n\n#### 18-7-1 创建目录：\n\nFile类中有两个方法可以用来创建文件夹：\n\n- **mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。\n- **mkdirs()**方法创建一个文件夹和它的所有父文件夹。\n\n下面的例子创建 \"/tmp/user//images/bin\"文件夹：\n\n```java\nCreateDir.java 文件代码：\nimport java.io.File;\n \npublic class CreateDir {\n    public static void main(String args[]) {\n        String dirname = \"/tmp/user//images/bin\";\n        File d = new File(dirname);\n        // 现在创建目录\n        d.mkdirs();\n    }\n}\n```\n\n编译并执行上面代码来创建目录 \"/tmp/user//images/bin\"。\n\n**注意：** Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (/) ，路径依然能够被正确解析。\n\n#### 18-7-2 读取目录\n\n一个目录其实就是一个 File 对象，它包含其他文件和文件夹。\n\n如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。\n\n可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。\n\n下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：\n\n```java\n// DirList.java 文件代码：\nimport java.io.File;\n \npublic class DirList {\n    public static void main(String args[]) {\n        String dirname = \"/tmp\";\n        File f1 = new File(dirname);\n        if (f1.isDirectory()) {\n            System.out.println(\"目录 \" + dirname);\n            String s[] = f1.list();\n            for (int i = 0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                    System.out.println(s[i] + \" 是一个目录\");\n                } else {\n                    System.out.println(s[i] + \" 是一个文件\");\n                }\n            }\n        } else {\n            System.out.println(dirname + \" 不是一个目录\");\n        }\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n目录 /tmp\nbin 是一个目录\nlib 是一个目录\ndemo 是一个目录\ntest.txt 是一个文件\nREADME 是一个文件\nindex.html 是一个文件\ninclude 是一个目录\n```\n\n#### 18-7-3 删除目录或文件\n\n删除文件可以使用 **java.io.File.delete()** 方法。\n\n以下代码会删除目录 **/tmp//images/**，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。\n\n测试目录结构：\n\n```\n/tmp//images/\n|-- 1.log\n|-- test\n```\n\n```java\nimport java.io.File;\n \npublic class DeleteFileDemo {\n    public static void main(String args[]) {\n        // 这里修改为自己的测试目录\n        File folder = new File(\"/tmp//images/\");\n        deleteFolder(folder);\n    }\n \n    // 删除文件及目录\n    public static void deleteFolder(File folder) {\n        File[] files = folder.listFiles();\n        if (files != null) {\n            for (File f : files) {\n                if (f.isDirectory()) {\n                    deleteFolder(f);\n                } else {\n                    f.delete();\n                }\n            }\n        }\n        folder.delete();\n    }\n}\n```\n\n## 19，Java Scanner 类\n\njava.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。\n\n下面是创建 Scanner 对象的基本语法：\n\n```Java\nScanner s = new Scanner(System.in);\n```\n\n接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：\n\n### 19-1 使用 next 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner; \n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // next方式接收字符串\n        System.out.println(\"next方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNext()) {\n            String str1 = scan.next();\n            System.out.println(\"输入的数据为：\" + str1);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnext方式接收：\nrunoob com\n输入的数据为：runoob\n```\n\n可以看到 com 字符串并未输出，接下来我们看 nextLine。\n\n### 19-2 使用 nextLine 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // nextLine方式接收字符串\n        System.out.println(\"nextLine方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNextLine()) {\n            String str2 = scan.nextLine();\n            System.out.println(\"输入的数据为：\" + str2);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnextLine方式接收：\nrunoob com\n输入的数据为：runoob com\n```\n\n可以看到 com 字符串输出。\n\n### 19-3 next() 与 nextLine() 区别\n\nnext():\n\n- 1、一定要读取到有效字符后才可以结束输入。\n- 2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。\n- 3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。\n- next() 不能得到带有空格的字符串。\n\nnextLine()：\n\n- 1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。\n- 2、可以获得空白。\n\n如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n        int i = 0;\n        float f = 0.0f;\n        System.out.print(\"输入整数：\");\n        if (scan.hasNextInt()) {\n            // 判断输入的是否是整数\n            i = scan.nextInt();\n            // 接收整数\n            System.out.println(\"整数数据：\" + i);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是整数！\");\n        }\n        System.out.print(\"输入小数：\");\n        if (scan.hasNextFloat()) {\n            // 判断输入的是否是小数\n            f = scan.nextFloat();\n            // 接收小数\n            System.out.println(\"小数数据：\" + f);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是小数！\");\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\n输入整数：12\n整数数据：12\n输入小数：1.2\n小数数据：1.2\n```\n\n以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：\n\n```java\n // ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \nclass ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n \n        double sum = 0;\n        int m = 0;\n \n        while (scan.hasNextDouble()) {\n            double x = scan.nextDouble();\n            m = m + 1;\n            sum = sum + x;\n        }\n \n        System.out.println(m + \"个数的和为\" + sum);\n        System.out.println(m + \"个数的平均值是\" + (sum / m));\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```java\n$ javac ScannerDemo.java\n$ java ScannerDemo\n12\n23\n15\n21.4\nend\n4个数的和为71.4\n4个数的平均值是17.85\n```\n\n## 20，Java异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查\n\n### 20-1 异常方法\n\n![image-20240228232401552](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228232401552.png)\n\n### 20-2 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```Java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。\n\n```Java\n// ExcepTest.java 文件代码：\n// 文件名 : ExcepTest.java\nimport java.io.*;\npublic class ExcepTest{\n \n   public static void main(String args[]){\n      try{\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      }catch(ArrayIndexOutOfBoundsException e){\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n```\n\n以上代码编译运行输出结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n```\n\n### 20-3 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n多重捕获块的语法如下所示：\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}\n```\n\n- 上面的代码段包含了 3 个 catch块。\n- 可以在 try 语句后面添加任意数量的 catch 块。\n- 如果保护代码中发生异常，异常被抛给第一个 catch 块。\n- 如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n- 如果不匹配，它会被传递给第二个 catch 块。\n- 如此，直到异常被捕获或者通过所有的 catch 块。\n\n\n\n该实例展示了怎么使用多重 try/catch。\n\n```java\ntry {\n    file = new FileInputStream(fileName);\n    x = (byte) file.read();\n} catch(FileNotFoundException f) { // Not valid!\n    f.printStackTrace();\n    return -1;\n} catch(IOException i) {\n    i.printStackTrace();\n    return -1;\n}\n```\n\n### 20-4 throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### 20-5 finally关键字\n\n- finally 关键字用来创建在 try 代码块后面执行的代码块。\n- 无论是否发生异常，finally 代码块中的代码总会被执行。\n- 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n- finally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n\n\n```java\nExcepTest.java 文件代码：\npublic class ExcepTest{\n  public static void main(String args[]){\n    int a[] = new int[2];\n    try{\n       System.out.println(\"Access element three :\" + a[3]);\n    }catch(ArrayIndexOutOfBoundsException e){\n       System.out.println(\"Exception thrown  :\" + e);\n    }\n    finally{\n       a[0] = 6;\n       System.out.println(\"First element value: \" +a[0]);\n       System.out.println(\"The finally statement is executed\");\n    }\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n```\n\n注意下面事项：\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n### 20-6 声明自定义异常\n\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。\n\n- 所有异常都必须是 Throwable 的子类。\n- 如果希望写一个检查性异常类，则需要继承 Exception 类。\n- 如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。\n\n可以像下面这样定义自己的异常类：\n\n```java\nclass MyException extends Exception{ }\n```\n\n- 只继承Exception 类来创建的异常类是检查性异常类。\n- 下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。\n- 一个异常类和其它任何类一样，包含有变量和方法。\n\n以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。\n\n```java\n// InsufficientFundsException.java 文件代码：\n// 文件名InsufficientFundsException.java\nimport java.io.*;\n \n//自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n{\n  //此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\n  private double amount;\n  public InsufficientFundsException(double amount)\n  {\n    this.amount = amount;\n  } \n  public double getAmount()\n  {\n    return amount;\n  }\n}\n```\n\n为了展示如何使用我们自定义的异常类，\n\n在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。\n\n```java\n// 文件名称 CheckingAccount.java\nimport java.io.*;\n \n//此类模拟银行账户\npublic class CheckingAccount\n{\n  //balance为余额，number为卡号\n   private double balance;\n   private int number;\n   public CheckingAccount(int number)\n   {\n      this.number = number;\n   }\n  //方法：存钱\n   public void deposit(double amount)\n   {\n      balance += amount;\n   }\n  //方法：取钱\n   public void withdraw(double amount) throws\n                              InsufficientFundsException\n   {\n      if(amount <= balance)\n      {\n         balance -= amount;\n      }\n      else\n      {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n  //方法：返回余额\n   public double getBalance()\n   {\n      return balance;\n   }\n  //方法：返回卡号\n   public int getNumber()\n   {\n      return number;\n   }\n}\n```\n\n下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。\n\n```java\n//文件名称 BankDemo.java\npublic class BankDemo\n{\n   public static void main(String [] args)\n   {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      try\n      {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      }catch(InsufficientFundsException e)\n      {\n         System.out.println(\"Sorry, but you are short $\"\n                                  + e.getAmount());\n         e.printStackTrace();\n      }\n    }\n}\n```\n\n编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：\n\n```\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n        at CheckingAccount.withdraw(CheckingAccount.java:25)\n        at BankDemo.main(BankDemo.java:13)\n```\n\n### 20-7 通用异常\n\n在Java中定义了两种类型的异常和错误。\n\n- **JVM(Java****虚拟机****)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。\n- **程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。\n","slug":"java","published":1,"updated":"2025-04-04T14:17:48.699Z","comments":1,"layout":"post","photos":[],"_id":"cm92vmg180001k7q1hztb40pa","content":"<h2 id=\"1，Java基础语法\"><a href=\"#1，Java基础语法\" class=\"headerlink\" title=\"1，Java基础语法\"></a>1，Java基础语法</h2><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>\n</ul>\n<h3 id=\"1-1-第一个Java程序\"><a href=\"#1-1-第一个Java程序\" class=\"headerlink\" title=\"1-1 第一个Java程序\"></a>1-1 第一个Java程序</h3><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">     * 它将打印字符串 Hello World</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); <span class=\"comment\">// 打印 Hello World</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面将逐步介绍如何保存、编译以及运行这个程序：</p>\n<ul>\n<li>打开代码编辑器，把上面的代码添加进去；</li>\n<li>把文件名保存为：HelloWorld.java；</li>\n<li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li>\n<li>在命令行窗口输入 <strong>javac HelloWorld.java</strong> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li>\n<li>再键输入 <strong>java HelloWorld</strong> 按下回车键就可以运行程序了</li>\n</ul>\n<p>你将会在窗口看到 Hello World</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C : &gt; javac HelloWorld.java</span><br><span class=\"line\">C : &gt; java HelloWorld </span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<p>Gif 图演示：</p>\n<p><img src=\"/images/java-HelloWorld.gif\" alt=\"img\"></p>\n<h3 id=\"1-2-基本语法\"><a href=\"#1-2-基本语法\" class=\"headerlink\" title=\"1-2 基本语法\"></a>1-2 基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>\n<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>\n<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String []args)</strong> 方法开始执行。</li>\n</ul>\n<h3 id=\"1-3-Java-标识符\"><a href=\"#1-3-Java-标识符\" class=\"headerlink\" title=\"1-3 Java 标识符\"></a>1-3 Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"1-4-Java修饰符\"><a href=\"#1-4-Java修饰符\" class=\"headerlink\" title=\"1-4 Java修饰符\"></a>1-4 Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>\n<h3 id=\"1-5-Java-变量\"><a href=\"#1-5-Java-变量\" class=\"headerlink\" title=\"1-5 Java 变量\"></a>1-5 Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"1-6-Java-数组\"><a href=\"#1-6-Java-数组\" class=\"headerlink\" title=\"1-6 Java 数组\"></a>1-6 Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"1-7-Java-枚举\"><a href=\"#1-7-Java-枚举\" class=\"headerlink\" title=\"1-7 Java 枚举\"></a>1-7 Java 枚举</h3><p>ava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuice</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">FreshJuiceSize</span>&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class=\"line\">   FreshJuiceSize size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuiceTest</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">FreshJuice</span> <span class=\"variable\">juice</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FreshJuice</span>();</span><br><span class=\"line\">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-8-Java-关键字\"><a href=\"#1-8-Java-关键字\" class=\"headerlink\" title=\"1-8 Java 关键字\"></a>1-8 Java 关键字</h3><p><img src=\"/images/image-20240228195010033.png\" alt=\"image-20240228195010033\"></p>\n<h3 id=\"1-9-Java注释\"><a href=\"#1-9-Java注释\" class=\"headerlink\" title=\"1-9 Java注释\"></a>1-9 Java注释</h3><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 这是第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">    *它将打印Hello World</span></span><br><span class=\"line\"><span class=\"comment\">    * 这是一个多行注释的示例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 这是单行注释的示例</span></span><br><span class=\"line\">       <span class=\"comment\">/* 这个也是单行注释的示例 */</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-10-Java-空行\"><a href=\"#1-10-Java-空行\" class=\"headerlink\" title=\"1-10 Java 空行\"></a>1-10 Java 空行</h3><p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"1-11-继承\"><a href=\"#1-11-继承\" class=\"headerlink\" title=\"1-11 继承\"></a>1-11 继承</h3><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<hr>\n<h3 id=\"1-12-接口\"><a href=\"#1-12-接口\" class=\"headerlink\" title=\"1-12 接口\"></a>1-12 接口</h3><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h2 id=\"2，Java对象和类\"><a href=\"#2，Java对象和类\" class=\"headerlink\" title=\"2，Java对象和类\"></a>2，Java对象和类</h2><h3 id=\"2-1-Java中的对象\"><a href=\"#2-1-Java中的对象\" class=\"headerlink\" title=\"2-1 Java中的对象\"></a>2-1 Java中的对象</h3><p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p>\n<p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p>\n<p>对比现实对象和软件对象，它们之间十分相似。</p>\n<p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p>\n<p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p>\n<h3 id=\"2-2-Java中的类\"><a href=\"#2-2-Java中的类\" class=\"headerlink\" title=\"2-2 Java中的类\"></a>2-2 Java中的类</h3><p>类可以看成是创建Java对象的模板。</p>\n<p>通过下面一个简单的类来理解下Java中类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\">  String breed;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">barking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">sleeping</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个类可以包含以下类型变量：</p>\n<ul>\n<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>\n<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>\n<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li>\n</ul>\n<p>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</p>\n<hr>\n<h3 id=\"2-3-构造方法\"><a href=\"#2-3-构造方法\" class=\"headerlink\" title=\"2-3 构造方法\"></a>2-3 构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p>\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n<p>下面是一个构造方法示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-创建对象\"><a href=\"#2-4-创建对象\" class=\"headerlink\" title=\"2-4 创建对象\"></a>2-4 创建对象</h3><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：</p>\n<ul>\n<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>\n<li><strong>实例化</strong>：使用关键字new来创建一个对象。</li>\n<li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li>\n</ul>\n<p>下面是一个创建对象的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 下面的语句将创建一个Puppy对象</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，会打印出下面的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-访问实例变量和方法\"><a href=\"#2-5-访问实例变量和方法\" class=\"headerlink\" title=\"2-5 访问实例变量和方法\"></a>2-5 访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">referenceVariable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Constructor</span>();</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的变量 */</span></span><br><span class=\"line\">referenceVariable.variableName;</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的方法 */</span></span><br><span class=\"line\">referenceVariable.methodName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-实例\"><a href=\"#2-6-实例\" class=\"headerlink\" title=\"2-6 实例\"></a>2-6 实例</h3><p>下面的例子展示如何访问实例变量和调用成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> puppyAge;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">( <span class=\"type\">int</span> age )</span>&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">( )</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;小狗的年龄为 : &quot;</span> + puppyAge ); </span><br><span class=\"line\">       <span class=\"keyword\">return</span> puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 创建对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 通过方法来设定age */</span></span><br><span class=\"line\">      myPuppy.setAge( <span class=\"number\">2</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 调用另一个方法获取age */</span></span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      <span class=\"comment\">/*你也可以像下面这样访问成员变量 */</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;变量值 : &quot;</span> + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br><span class=\"line\">小狗的年龄为 : 2</span><br><span class=\"line\">变量值 : 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-源文件声明规则\"><a href=\"#2-7-源文件声明规则\" class=\"headerlink\" title=\"2-7 源文件声明规则\"></a>2-7 源文件声明规则</h3><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>\n<ul>\n<li>一个源文件中只能有一个public类</li>\n<li>一个源文件可以有多个非public类</li>\n<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>\n<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>\n<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>\n<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>\n</ul>\n<p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。</p>\n<p>除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p>\n<h3 id=\"2-8-Java包\"><a href=\"#2-8-Java包\" class=\"headerlink\" title=\"2-8 Java包\"></a>2-8 Java包</h3><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>\n<h3 id=\"2-9-Import语句\"><a href=\"#2-9-Import语句\" class=\"headerlink\" title=\"2-9 Import语句\"></a>2-9 Import语句</h3><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>\n<p>例如，下面的命令行将会命令编译器载入java_installation&#x2F;&#x2F;images&#x2F;io路径下的所有类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-一个简单的例子\"><a href=\"#2-10-一个简单的例子\" class=\"headerlink\" title=\"2-10 一个简单的例子\"></a>2-10 一个简单的例子</h3><p>在该例子中，我们创建两个类：<strong>Employee</strong> 和 <strong>EmployeeTest</strong>。</p>\n<p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p>\n<p>Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   String name;</span><br><span class=\"line\">   <span class=\"type\">int</span> age;</span><br><span class=\"line\">   String designation;</span><br><span class=\"line\">   <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">// Employee 类的构造器</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 设置age的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empAge</span><span class=\"params\">(<span class=\"type\">int</span> empAge)</span>&#123;</span><br><span class=\"line\">      age =  empAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置designation的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empDesignation</span><span class=\"params\">(String empDesig)</span>&#123;</span><br><span class=\"line\">      designation = empDesig;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置salary的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSalary)</span>&#123;</span><br><span class=\"line\">      salary = empSalary;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 打印信息 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字:&quot;</span>+ name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;年龄:&quot;</span> + age );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;职位:&quot;</span> + designation );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水:&quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p>\n<p>下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p>\n<p>将下面的代码保存在 EmployeeTest.java文件中。</p>\n<p><strong>EmployeeTest.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用构造器创建两个对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB1&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB2&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 调用这两个对象的成员方法</span></span><br><span class=\"line\">      empOne.empAge(<span class=\"number\">26</span>);</span><br><span class=\"line\">      empOne.empDesignation(<span class=\"string\">&quot;高级程序员&quot;</span>);</span><br><span class=\"line\">      empOne.empSalary(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"> </span><br><span class=\"line\">      empTwo.empAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">      empTwo.empDesignation(<span class=\"string\">&quot;菜鸟程序员&quot;</span>);</span><br><span class=\"line\">      empTwo.empSalary(<span class=\"number\">500</span>);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac EmployeeTest.java</span><br><span class=\"line\">$ java EmployeeTest </span><br><span class=\"line\">名字:RUNOOB1</span><br><span class=\"line\">年龄:<span class=\"number\">26</span></span><br><span class=\"line\">职位:高级程序员</span><br><span class=\"line\">薪水:<span class=\"number\">1000.0</span></span><br><span class=\"line\">名字:RUNOOB2</span><br><span class=\"line\">年龄:<span class=\"number\">21</span></span><br><span class=\"line\">职位:菜鸟程序员</span><br><span class=\"line\">薪水:<span class=\"number\">500.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，Java基本数据类型\"><a href=\"#3，Java基本数据类型\" class=\"headerlink\" title=\"3，Java基本数据类型\"></a>3，Java基本数据类型</h2><h3 id=\"3-1-内置数据类型\"><a href=\"#3-1-内置数据类型\" class=\"headerlink\" title=\"3-1 内置数据类型\"></a>3-1 内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\n<h4 id=\"3-1-1-byte：\"><a href=\"#3-1-1-byte：\" class=\"headerlink\" title=\"3-1-1 byte：\"></a>3-1-1 <strong>byte：</strong></h4><ul>\n<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-128（-2^7）</strong>；</li>\n<li>最大值是 <strong>127（2^7-1）</strong>；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\n<li>例子：byte a &#x3D; 100，byte b &#x3D; -50。</li>\n</ul>\n<h4 id=\"3-1-2-short：\"><a href=\"#3-1-2-short：\" class=\"headerlink\" title=\"3-1-2 short：\"></a>3-1-2 <strong>short：</strong></h4><ul>\n<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\n<li>最小值是 <strong>-32768（-2^15）</strong>；</li>\n<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>\n<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>例子：short s &#x3D; 1000，short r &#x3D; -20000。</li>\n</ul>\n<h4 id=\"3-1-3-int：\"><a href=\"#3-1-3-int：\" class=\"headerlink\" title=\"3-1-3 int：\"></a>3-1-3 <strong>int：</strong></h4><ul>\n<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>\n<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>\n<li>一般地整型变量默认为 int 类型；</li>\n<li>默认值是 <strong>0</strong> ；</li>\n<li>例子：int a &#x3D; 100000, int b &#x3D; -200000。</li>\n</ul>\n<h4 id=\"3-1-4-long：\"><a href=\"#3-1-4-long：\" class=\"headerlink\" title=\"3-1-4 long：\"></a>3-1-4 <strong>long：</strong></h4><ul>\n<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>\n<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>\n<li>这种类型主要使用在需要比较大整数的系统上；</li>\n<li>默认值是 <strong>0L</strong>；</li>\n<li>例子： long a &#x3D; 100000L，Long b &#x3D; -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>\n</ul>\n<h4 id=\"3-1-5-float：\"><a href=\"#3-1-5-float：\" class=\"headerlink\" title=\"3-1-5 float：\"></a>3-1-5 <strong>float：</strong></h4><ul>\n<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\n<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\n<li>默认值是 <strong>0.0f</strong>；</li>\n<li>浮点数不能用来表示精确的值，如货币；</li>\n<li>例子：float f1 &#x3D; 234.5f。</li>\n</ul>\n<h4 id=\"3-1-6-double：\"><a href=\"#3-1-6-double：\" class=\"headerlink\" title=\"3-1-6 double：\"></a>3-1-6 <strong>double：</strong></h4><ul>\n<li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li>\n<li>浮点数的默认类型为double类型；</li>\n<li>double类型同样不能表示精确的值，如货币；</li>\n<li>默认值是 <strong>0.0d</strong>；</li>\n<li>例子：double d1 &#x3D; 123.4。</li>\n</ul>\n<h4 id=\"3-1-7-boolean：\"><a href=\"#3-1-7-boolean：\" class=\"headerlink\" title=\"3-1-7 boolean：\"></a>3-1-7 <strong>boolean：</strong></h4><ul>\n<li>boolean数据类型表示一位的信息；</li>\n<li>只有两个取值：true 和 false；</li>\n<li>这种类型只作为一种标志来记录 true&#x2F;false 情况；</li>\n<li>默认值是 <strong>false</strong>；</li>\n<li>例子：boolean one &#x3D; true。</li>\n</ul>\n<h4 id=\"3-1-8-char：\"><a href=\"#3-1-8-char：\" class=\"headerlink\" title=\"3-1-8 char：\"></a>3-1-8 <strong>char：</strong></h4><ul>\n<li>char类型是一个单一的 16 位 Unicode 字符；</li>\n<li>最小值是 <strong>\\u0000</strong>（即为0）；</li>\n<li>最大值是 <strong>\\uffff</strong>（即为65,535）；</li>\n<li>char 数据类型可以储存任何字符；</li>\n<li>例子：char letter &#x3D; ‘A’;。</li>\n</ul>\n<h3 id=\"3-2-实例\"><a href=\"#3-2-实例\" class=\"headerlink\" title=\"3-2 实例\"></a>3-2 实例</h3><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveTypeTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译以上代码输出结果如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"type\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n\n<p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 &#x3D;3140，3.14E-3 就是 3.14 x 10-3 &#x3D;0.00314。</p>\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\n<h3 id=\"3-3-类型默认值\"><a href=\"#3-3-类型默认值\" class=\"headerlink\" title=\"3-3 类型默认值\"></a>3-3 类型默认值</h3><p>下表列出了 Java 各个类型的默认值：</p>\n<p><img src=\"/images/image-20240228200611781.png\" alt=\"image-20240228200611781\"></p>\n<h3 id=\"3-4-实例\"><a href=\"#3-4-实例\" class=\"headerlink\" title=\"3-4 实例\"></a>3-4 实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> bool;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">byte</span> by;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">short</span> sh;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String str;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bool :&quot;</span> + bool);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Byte :&quot;</span> + by);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Character:&quot;</span> + ch);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Double :&quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Float :&quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Integer :&quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Long :&quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Short :&quot;</span> + sh);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String :&quot;</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool     :<span class=\"literal\">false</span></span><br><span class=\"line\">Byte     :<span class=\"number\">0</span></span><br><span class=\"line\">Character:</span><br><span class=\"line\">Double   :<span class=\"number\">0.0</span></span><br><span class=\"line\">Float    :<span class=\"number\">0.0</span></span><br><span class=\"line\">Integer  :<span class=\"number\">0</span></span><br><span class=\"line\">Long     :<span class=\"number\">0</span></span><br><span class=\"line\">Short    :<span class=\"number\">0</span></span><br><span class=\"line\">String   :<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-引用类型\"><a href=\"#3-5-引用类型\" class=\"headerlink\" title=\"3-5 引用类型\"></a>3-5 引用类型</h3><ul>\n<li>在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用任何与之兼容的类型。</li>\n<li>例子：Site site &#x3D; new Site(“Runoob”)。</li>\n</ul>\n<h3 id=\"3-6-Java-常量\"><a href=\"#3-6-Java-常量\" class=\"headerlink\" title=\"3-6 Java 常量\"></a>3-6 Java 常量</h3><p>常量在程序运行时是不能被修改的。</p>\n<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.1415927</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p>\n<p>字面量可以赋给任何内置类型的变量。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">68</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p>\n<p>当使用常量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">decimal</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">octal</span> <span class=\"operator\">=</span> <span class=\"number\">0144</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hexa</span> <span class=\"operator\">=</span>  <span class=\"number\">0x64</span>;</span><br></pre></td></tr></table></figure>\n\n<p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;two\\nlines&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0001&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\u0001&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持一些特殊的转义字符序列。</p>\n<p><img src=\"/images/image-20240228200803273.png\" alt=\"image-20240228200803273\"></p>\n<h3 id=\"3-7-自动类型转换\"><a href=\"#3-7-自动类型转换\" class=\"headerlink\" title=\"3-7 自动类型转换\"></a>3-7 自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p>\n<p>转换从低级到高级。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">低  ------------------------------------&gt;  高</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span>—&gt; <span class=\"type\">int</span> —&gt; <span class=\"type\">long</span>—&gt; <span class=\"type\">float</span> —&gt; <span class=\"type\">double</span> </span><br></pre></td></tr></table></figure>\n\n<p>数据类型转换必须满足如下规则：</p>\n<ul>\n<li><p>\\1. 不能对boolean类型进行类型转换。</p>\n</li>\n<li><p>\\2. 不能把对象类型转换成不相关类的对象。</p>\n</li>\n<li><p>\\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\n</li>\n<li><p>\\4. 转换过程中可能导致溢出或损失精度，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">128</span>;   </span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i;</span><br></pre></td></tr></table></figure>\n\n<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>\n</li>\n<li><p>\\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"type\">int</span>)<span class=\"number\">23.7</span> == <span class=\"number\">23</span>;        </span><br><span class=\"line\">(<span class=\"type\">int</span>)-<span class=\"number\">45.89f</span> == -<span class=\"number\">45</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>自动类型转换</strong></p>\n<p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZiDongLeiZhuan</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=<span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> c1;<span class=\"comment\">//char自动类型转换为int</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> c2+<span class=\"number\">1</span>;<span class=\"comment\">//char 类型和 int 类型计算</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char自动类型转换为int后的值等于97</span><br><span class=\"line\">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure>\n\n<p>**解析：**c1 的值为字符 <strong>a</strong> ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 <strong>i2&#x3D;65+1&#x3D;66</strong>。</p>\n<h3 id=\"3-8-强制类型转换\"><a href=\"#3-8-强制类型转换\" class=\"headerlink\" title=\"3-8 强制类型转换\"></a>3-8 强制类型转换</h3><ul>\n<li>\\1. 条件是转换的数据类型必须是兼容的。</li>\n<li>\\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QiangZhiZhuanHuan</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i1;<span class=\"comment\">//强制类型转换为byte</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-9-隐含强制类型转换\"><a href=\"#3-9-隐含强制类型转换\" class=\"headerlink\" title=\"3-9  隐含强制类型转换\"></a>3-9  隐含强制类型转换</h3><ul>\n<li>\\1. 整数的默认类型是 int。</li>\n<li>\\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li>\n</ul>\n<p>这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。</p>\n<h2 id=\"4，Java变量类型\"><a href=\"#4，Java变量类型\" class=\"headerlink\" title=\"4，Java变量类型\"></a>4，Java变量类型</h2><ul>\n<li><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n</li>\n<li><p>type identifier [ &#x3D; value][, identifier [&#x3D; value] …] ;</p>\n</li>\n<li><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>\n</li>\n</ul>\n<p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, b, c;         <span class=\"comment\">// 声明三个int型整数：a、 b、c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>, e = <span class=\"number\">4</span>, f = <span class=\"number\">5</span>; <span class=\"comment\">// 声明三个整数并赋予初值</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"number\">22</span>;         <span class=\"comment\">// 声明并初始化 z</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;runoob&quot;</span>;  <span class=\"comment\">// 声明并初始化字符串 s</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>; <span class=\"comment\">// 声明了双精度浮点型变量 pi</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;        <span class=\"comment\">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Variable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Java局部变量\"><a href=\"#4-1-Java局部变量\" class=\"headerlink\" title=\"4-1 Java局部变量\"></a>4-1 Java局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<h4 id=\"4-1-1-实例-1\"><a href=\"#4-1-1-实例-1\" class=\"headerlink\" title=\"4-1-1 实例 1\"></a>4-1-1 <strong>实例 1</strong></h4><p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的年龄是: 7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-实例-2\"><a href=\"#4-1-2-实例-2\" class=\"headerlink\" title=\"4-1-2 实例 2\"></a>4-1-2 实例 2</h4><p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> age;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是 : &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java:<span class=\"number\">4</span>:variable number might not have been <span class=\"type\">initialized</span></span><br><span class=\"line\"><span class=\"variable\">age</span> <span class=\"operator\">=</span> age + <span class=\"number\">7</span>;</span><br><span class=\"line\">         ^</span><br><span class=\"line\"><span class=\"number\">1</span> error</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-实例变量\"><a href=\"#4-2-实例变量\" class=\"headerlink\" title=\"4-2 实例变量\"></a>4-2 实例变量</h3><ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个实例变量对子类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 私有变量，仅在该类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">//在构造器中对name赋值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span> <span class=\"params\">(String empName)</span>&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设定salary的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSal)</span>&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"comment\">// 打印信息</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmp</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字 : &quot;</span> + name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水 : &quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB&quot;</span>);</span><br><span class=\"line\">      empOne.setSalary(<span class=\"number\">1000.0</span>);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Employee.java </span><br><span class=\"line\">$ java Employee</span><br><span class=\"line\">名字 : RUNOOB</span><br><span class=\"line\">薪水 : 1000.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-类变量（静态变量）\"><a href=\"#4-3-类变量（静态变量）\" class=\"headerlink\" title=\"4-3 类变量（静态变量）\"></a>4-3 类变量（静态变量）</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用。常量是指声明为public&#x2F;private，final和static类型的变量。常量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>\n<li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>实例：</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//salary是静态的私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">// DEPARTMENT是一个常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEPARTMENT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;开发人员&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    salary = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        System.out.println(DEPARTMENT+<span class=\"string\">&quot;平均工资:&quot;</span>+salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>\n<p>本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。</p>\n<h2 id=\"5，Java修饰符\"><a href=\"#5，Java修饰符\" class=\"headerlink\" title=\"5，Java修饰符\"></a>5，Java修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p>\n<ul>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ul>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> myFlag;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">weeks</span> <span class=\"operator\">=</span> <span class=\"number\">9.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-访问控制修饰符\"><a href=\"#5-1-访问控制修饰符\" class=\"headerlink\" title=\"5-1 访问控制修饰符\"></a>5-1 访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p>我们可以通过以下表来说明访问权限：</p>\n<p><img src=\"/images/image-20240228202210130.png\" alt=\"image-20240228202210130\"></p>\n<p><strong>默认访问修饰符-不使用任何关键字</strong></p>\n<p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p>\n<p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">version</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1.5.1&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">processOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-私有访问修饰符-private\"><a href=\"#5-2-私有访问修饰符-private\" class=\"headerlink\" title=\"5-2 私有访问修饰符-private\"></a>5-2 私有访问修饰符-private</h3><p>私有访问修饰符是最严格的访问级别，所以被声明为 <strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 <strong>private</strong>。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>\n<p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p>\n<p>下面的类使用了私有访问修饰符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String format;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFormat</span><span class=\"params\">(String format)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p>\n<h3 id=\"5-3-公有访问修饰符-public\"><a href=\"#5-3-公有访问修饰符-public\" class=\"headerlink\" title=\"5-3 公有访问修饰符-public\"></a>5-3 公有访问修饰符-public</h3><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p>\n<p>以下函数使用了公有访问控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>\n<h3 id=\"5-4-受保护的访问修饰符-protected\"><a href=\"#5-4-受保护的访问修饰符-protected\" class=\"headerlink\" title=\"5-4 受保护的访问修饰符-protected\"></a>5-4 受保护的访问修饰符-protected</h3><p>protected 需要从以下两个点来分析说明：</p>\n<ul>\n<li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li>\n<li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li>\n</ul>\n<p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p>\n<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StreamingAudioPlayer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。</p>\n<p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p>\n<p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p>\n<h3 id=\"5-5-访问控制和继承\"><a href=\"#5-5-访问控制和继承\" class=\"headerlink\" title=\"5-5 访问控制和继承\"></a>5-5 访问控制和继承</h3><p>请注意以下方法继承的规则：</p>\n<ul>\n<li>父类中声明为 public 的方法在子类中也必须为 public。</li>\n<li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li>\n<li>父类中声明为 private 的方法，不能够被继承。</li>\n</ul>\n<h3 id=\"5-6-非访问修饰符\"><a href=\"#5-6-非访问修饰符\" class=\"headerlink\" title=\"5-6 非访问修饰符\"></a>5-6 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p>\n<p>static 修饰符，用来修饰类方法和类变量。</p>\n<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\n<h4 id=\"5-6-1-static-修饰符\"><a href=\"#5-6-1-static-修饰符\" class=\"headerlink\" title=\"5-6-1 static 修饰符\"></a>5-6-1 static 修饰符</h4><ul>\n<li><p><strong>静态变量：</strong></p>\n<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n</li>\n<li><p><strong>静态方法：</strong></p>\n<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n</li>\n</ul>\n<p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p>\n<p>如下例所示，static修饰符用来创建类方法和类变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstanceCounter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">numInstances</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Starting with &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; ++i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceCounter</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Created &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例运行编辑结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting with <span class=\"number\">0</span> instances</span><br><span class=\"line\">Created <span class=\"number\">500</span> instances</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-final-修饰符\"><a href=\"#5-6-2-final-修饰符\" class=\"headerlink\" title=\"5-6-2 final 修饰符\"></a>5-6-2 final 修饰符</h4><p><strong>final 变量：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下面是声明常量的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TITLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Manager&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     value = <span class=\"number\">12</span>; <span class=\"comment\">//将输出一个错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>inal 方法</strong></p>\n<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>\n<p>如下所示，使用 final 修饰符声明方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>final 类</strong></p>\n<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 类体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-abstract-修饰符\"><a href=\"#5-7-abstract-修饰符\" class=\"headerlink\" title=\"5-7 abstract 修饰符\"></a>5-7 abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Caravan</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> price;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String model;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String year;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">goFast</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeColor</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>抽象方法</strong></p>\n<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>\n<p>抽象方法不能被声明成 final 和 static。</p>\n<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>\n<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>\n<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//实现抽象方法</span></span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          .........</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"synchronized-修饰符\"><a href=\"#synchronized-修饰符\" class=\"headerlink\" title=\"synchronized 修饰符\"></a>synchronized 修饰符</h3><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDetails</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"transient-修饰符\"><a href=\"#transient-修饰符\" class=\"headerlink\" title=\"transient 修饰符\"></a>transient 修饰符</h3><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>\n<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">limit</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;   <span class=\"comment\">// 不会持久化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> b; <span class=\"comment\">// 持久化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"volatile-修饰符\"><a href=\"#volatile-修饰符\" class=\"headerlink\" title=\"volatile 修饰符\"></a>volatile 修饰符</h3><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> implements <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private volatile boolean active;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (active) <span class=\"comment\">// 第一行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">false</span>; <span class=\"comment\">// 第二行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 *<strong>第一行*</strong> 中缓冲区的 active 值被使用，那么在 *<strong>第二行*</strong> 的 active 值为 false 时循环不会停止。</p>\n<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>\n<h2 id=\"6，Java运算符\"><a href=\"#6，Java运算符\" class=\"headerlink\" title=\"6，Java运算符\"></a>6，Java运算符</h2><h3 id=\"6-1-算术运算符\"><a href=\"#6-1-算术运算符\" class=\"headerlink\" title=\"6-1 算术运算符\"></a>6-1 算术运算符</h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p>\n<p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228212912288.png\" alt=\"image-20240228212912288\"></p>\n<p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class=\"line\">     <span class=\"comment\">// 查看  d++ 与 ++d 的不同</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a + b = <span class=\"number\">30</span></span><br><span class=\"line\">a - b = -<span class=\"number\">10</span></span><br><span class=\"line\">a * b = <span class=\"number\">200</span></span><br><span class=\"line\">b / a = <span class=\"number\">2</span></span><br><span class=\"line\">b % a = <span class=\"number\">0</span></span><br><span class=\"line\">c % a = <span class=\"number\">5</span></span><br><span class=\"line\">a++   = <span class=\"number\">10</span></span><br><span class=\"line\">a--   = <span class=\"number\">11</span></span><br><span class=\"line\">d++   = <span class=\"number\">25</span></span><br><span class=\"line\">++d   = <span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-自增自减运算符\"><a href=\"#6-2-自增自减运算符\" class=\"headerlink\" title=\"6-2 自增自减运算符\"></a>6-2 自增自减运算符</h3><p><strong>1、自增（++）自减（–）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> ++a;<span class=\"comment\">//自增运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> --c;<span class=\"comment\">//自减运算</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进行自增运算后的值等于4</span><br><span class=\"line\">进行自减运算后的值等于2</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<ul>\n<li>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</li>\n<li>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</li>\n</ul>\n<p><strong>2、前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p>\n<p><strong>3、后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*++a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*b++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class=\"string\">&quot;,x=&quot;</span>+x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class=\"string\">&quot;,y=&quot;</span>+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自增运算符前缀运算后a=6，x=12</span><br><span class=\"line\">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-关系运算符\"><a href=\"#6-3-关系运算符\" class=\"headerlink\" title=\"6-3 关系运算符\"></a>6-3 关系运算符</h3><p>下表为Java支持的关系运算符</p>\n<p>表格中的实例整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228213115946.png\" alt=\"image-20240228213115946\"></p>\n<p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a == b = <span class=\"literal\">false</span></span><br><span class=\"line\">a != b = <span class=\"literal\">true</span></span><br><span class=\"line\">a &gt; b = <span class=\"literal\">false</span></span><br><span class=\"line\">a &lt; b = <span class=\"literal\">true</span></span><br><span class=\"line\">b &gt;= a = <span class=\"literal\">true</span></span><br><span class=\"line\">b &lt;= a = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-位运算符\"><a href=\"#6-4-位运算符\" class=\"headerlink\" title=\"6-4 位运算符\"></a>6-4 位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>\n<p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0011</span> <span class=\"number\">1100</span></span><br><span class=\"line\">B = <span class=\"number\">0000</span> <span class=\"number\">1101</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\">A&amp;B = <span class=\"number\">0000</span> <span class=\"number\">1100</span></span><br><span class=\"line\">A | B = <span class=\"number\">0011</span> <span class=\"number\">1101</span></span><br><span class=\"line\">A ^ B = <span class=\"number\">0011</span> <span class=\"number\">0001</span></span><br><span class=\"line\">~A= <span class=\"number\">1100</span> <span class=\"number\">0011</span></span><br></pre></td></tr></table></figure>\n\n<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>\n<p><img src=\"/images/image-20240228213253912.png\" alt=\"image-20240228213253912\"></p>\n<p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">60</span>; <span class=\"comment\">/* 60 = 0011 1100 */</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>; <span class=\"comment\">/* 13 = 0000 1101 */</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">     c = a &amp; b;       <span class=\"comment\">/* 12 = 0000 1100 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp; b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a | b;       <span class=\"comment\">/* 61 = 0011 1101 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a | b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a ^ b;       <span class=\"comment\">/* 49 = 0011 0001 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a ^ b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = ~a;          <span class=\"comment\">/*-61 = 1100 0011 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;~a = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &lt;&lt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 240 = 1111 0000 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class=\"line\">  </span><br><span class=\"line\">     c = a &gt;&gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 0000 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp; b = 12</span><br><span class=\"line\">a | b = 61</span><br><span class=\"line\">a ^ b = 49</span><br><span class=\"line\">~a = -61</span><br><span class=\"line\">a &lt;&lt; 2 = 240</span><br><span class=\"line\">a &gt;&gt; 2  = 15</span><br><span class=\"line\">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-逻辑运算符\"><a href=\"#6-5-逻辑运算符\" class=\"headerlink\" title=\"6-5 逻辑运算符\"></a>6-5 逻辑运算符</h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>\n<p><img src=\"/images/image-20240228213402353.png\" alt=\"image-20240228213402353\"></p>\n<p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp;&amp; b = false</span><br><span class=\"line\">a || b = true</span><br><span class=\"line\">!(a &amp;&amp; b) = true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-6-短路逻辑运算符\"><a href=\"#6-6-短路逻辑运算符\" class=\"headerlink\" title=\"6-6 短路逻辑运算符\"></a>6-6 短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LuoJi</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (a&lt;<span class=\"number\">4</span>)&amp;&amp;(a++&lt;<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a的结果为&quot;</span>+a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用短路逻辑运算符的结果为false</span><br><span class=\"line\">a的结果为5</span><br></pre></td></tr></table></figure>\n\n<p><strong>解析：</strong> <em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p>\n<h3 id=\"6-7-赋值运算符\"><a href=\"#6-7-赋值运算符\" class=\"headerlink\" title=\"6-7 赋值运算符\"></a>6-7 赋值运算符</h3><p>下面是Java语言支持的赋值运算符：</p>\n<p><img src=\"/images/image-20240228213543244.png\" alt=\"image-20240228213543244\"></p>\n<p>面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c = a + b = &quot;</span> + c );</span><br><span class=\"line\">        c += a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c += a  = &quot;</span> + c );</span><br><span class=\"line\">        c -= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c -= a = &quot;</span> + c );</span><br><span class=\"line\">        c *= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c *= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c /= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c /= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c %= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c %= a  = &quot;</span> + c );</span><br><span class=\"line\">        c &lt;&lt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &amp;= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class=\"line\">        c ^= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c ^= a   = &quot;</span> + c );</span><br><span class=\"line\">        c |= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c |= a   = &quot;</span> + c );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = a + b = 30</span><br><span class=\"line\">c += a  = 40</span><br><span class=\"line\">c -= a = 30</span><br><span class=\"line\">c *= a = 300</span><br><span class=\"line\">c /= a = 1</span><br><span class=\"line\">c %= a  = 5</span><br><span class=\"line\">c &lt;&lt;= 2 = 20</span><br><span class=\"line\">c &gt;&gt;= 2 = 5</span><br><span class=\"line\">c &gt;&gt;= 2 = 1</span><br><span class=\"line\">c &amp;= a  = 0</span><br><span class=\"line\">c ^= a   = 10</span><br><span class=\"line\">c |= a   = 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-8-条件运算符（-）\"><a href=\"#6-8-条件运算符（-）\" class=\"headerlink\" title=\"6-8 条件运算符（?:）\"></a>6-8 条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">variable</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> (expression) ? value <span class=\"keyword\">if</span> <span class=\"literal\">true</span> : value <span class=\"keyword\">if</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a , b;</span><br><span class=\"line\">      a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">1</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> +  b );</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">10</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> + b );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of b is : 30</span><br><span class=\"line\">Value of b is : 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-9-instanceof-运算符\"><a href=\"#6-9-instanceof-运算符\" class=\"headerlink\" title=\"6-9 instanceof 运算符\"></a>6-9 instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure>\n\n<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = &quot;James&quot;;</span><br><span class=\"line\">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>\n\n<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Vehicle</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>  a <span class=\"keyword\">instanceof</span> Car;</span><br><span class=\"line\">      System.out.println( result);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-10-Java运算符优先级\"><a href=\"#6-10-Java运算符优先级\" class=\"headerlink\" title=\"6-10 Java运算符优先级\"></a>6-10 Java运算符优先级</h3><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>\n<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>\n<p>再如，x &#x3D; 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>\n<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>\n<p><img src=\"/images/image-20240228213815636.png\" alt=\"image-20240228213815636\"></p>\n<h2 id=\"7，Java循环结构\"><a href=\"#7，Java循环结构\" class=\"headerlink\" title=\"7，Java循环结构\"></a>7，Java循环结构</h2><h3 id=\"7-1-while-循环\"><a href=\"#7-1-while-循环\" class=\"headerlink\" title=\"7-1 while 循环\"></a>7-1 while 循环</h3><p>while是最基本的循环，它的结构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( 布尔表达式 ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要布尔表达式为 true，循环就会一直执行下去。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> ) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-do…while-循环\"><a href=\"#7-2-do…while-循环\" class=\"headerlink\" title=\"7-2 do…while 循环\"></a>7-2 do…while 循环</h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\n<p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-for循环\"><a href=\"#7-3-for循环\" class=\"headerlink\" title=\"7-3 for循环\"></a>7-3 for循环</h3><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>\n<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 for 循环有以下几点说明：</p>\n<ul>\n<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\n<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\n<li>执行一次循环后，更新循环控制变量。</li>\n<li>再次检测布尔表达式。循环执行上面的过程。</li>\n</ul>\n<p>实例</p>\n<p><strong>Test.java 文件代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; x &lt; <span class=\"number\">20</span>; x = x+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : 10</span><br><span class=\"line\">value of x : 11</span><br><span class=\"line\">value of x : 12</span><br><span class=\"line\">value of x : 13</span><br><span class=\"line\">value of x : 14</span><br><span class=\"line\">value of x : 15</span><br><span class=\"line\">value of x : 16</span><br><span class=\"line\">value of x : 17</span><br><span class=\"line\">value of x : 18</span><br><span class=\"line\">value of x : 19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-Java-增强-for-循环\"><a href=\"#7-4-Java-增强-for-循环\" class=\"headerlink\" title=\"7-4 Java 增强 for 循环\"></a>7-4 Java 增强 for 循环</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句 : 表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码句子</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers )&#123;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      String [] names =&#123;<span class=\"string\">&quot;James&quot;</span>, <span class=\"string\">&quot;Larry&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lacy&quot;</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( String name : names ) &#123;</span><br><span class=\"line\">         System.out.print( name );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,</span><br><span class=\"line\">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5-break-关键字\"><a href=\"#7-5-break-关键字\" class=\"headerlink\" title=\"7-5 break 关键字\"></a>7-5 break 关键字</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\n<p>语法</p>\n<p>break 的用法很简单，就是循环结构中的一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// x 等于 30 时跳出循环</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-continue-关键字\"><a href=\"#7-6-continue-关键字\" class=\"headerlink\" title=\"7-6 continue 关键字\"></a>7-6 continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\n<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\n<p>语法</p>\n<p>continue 就是循环体中一条简单的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8，Java条件语句\"><a href=\"#8，Java条件语句\" class=\"headerlink\" title=\"8，Java条件语句\"></a>8，Java条件语句</h2><h3 id=\"8-1-if…else语句\"><a href=\"#8-1-if…else语句\" class=\"headerlink\" title=\"8-1 if…else语句\"></a>8-1 if…else语句</h3><p>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</p>\n<p>语法</p>\n<p>if…else 的用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为true</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x &lt; <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 if 语句&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是 else 语句</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-if…else-if…else-语句\"><a href=\"#8-2-if…else-if…else-语句\" class=\"headerlink\" title=\"8-2 if…else if…else 语句\"></a>8-2 if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p>\n<p>使用 if，else if，else 语句的时候，需要注意下面几点：</p>\n<ul>\n<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>\n<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>\n<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>if…else 语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 3的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果以上布尔表达式都不为true执行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 10&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 20&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 30&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of X is 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-嵌套的-if…else-语句\"><a href=\"#8-3-嵌套的-if…else-语句\" class=\"headerlink\" title=\"8-3 嵌套的 if…else 语句\"></a>8-3 嵌套的 if…else 语句</h3><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p>\n<p><strong>语法</strong></p>\n<p>嵌套的 if…else 语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">////如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">////如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像 if 语句一样嵌套 else if…else。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( y == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">             System.out.print(<span class=\"string\">&quot;X = 30 and Y = 10&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X = <span class=\"number\">30</span> <span class=\"type\">and</span> <span class=\"variable\">Y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9，Java-switch-case-语句\"><a href=\"#9，Java-switch-case-语句\" class=\"headerlink\" title=\"9，Java switch case 语句\"></a>9，Java switch case 语句</h2><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p>\n<p><strong>语法</strong></p>\n<p>switch case 语句语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch case 语句有如下规则：</p>\n<ul>\n<li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li>\n<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li>\n<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>\n<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li>\n<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li>\n<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>\n</ul>\n<p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//char grade = args[0].charAt(0);</span></span><br><span class=\"line\">      <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀&quot;</span>); </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你需要再努力努力&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;未知等级&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;你的等级是 &quot;</span> + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">良好</span><br><span class=\"line\">你的等级是 C</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;3&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10，Java-Number-Math-类\"><a href=\"#10，Java-Number-Math-类\" class=\"headerlink\" title=\"10，Java Number &amp; Math 类\"></a>10，Java Number &amp; Math 类</h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13.65f</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0x4a</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>\n<p>所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。</p>\n<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>\n<p>下面是一个使用 Integer 对象的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Integer</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      x =  x + <span class=\"number\">10</span>;</span><br><span class=\"line\">      System.out.println(x); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n\n<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>\n<h3 id=\"10-1-Java-Math-类\"><a href=\"#10-1-Java-Math-类\" class=\"headerlink\" title=\"10-1 Java Math 类\"></a>10-1 Java Math 类</h3><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>\n<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String []args)</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class=\"number\">0</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class=\"number\">3</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1的反正切值： &quot;</span> + Math.atan(<span class=\"number\">1</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(Math.PI);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">90</span> 度的正弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>度的余弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">60</span>度的正切值：<span class=\"number\">1.7320508075688767</span></span><br><span class=\"line\"><span class=\"number\">1</span>的反正切值： <span class=\"number\">0.7853981633974483</span></span><br><span class=\"line\">π/<span class=\"number\">2</span>的角度值：<span class=\"number\">90.0</span></span><br><span class=\"line\"><span class=\"number\">3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-Number-Math-类方法\"><a href=\"#10-2-Number-Math-类方法\" class=\"headerlink\" title=\"10-2 Number &amp; Math 类方法\"></a>10-2 Number &amp; Math 类方法</h3><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p>\n<p><img src=\"/images/image-20240228220453132.png\" alt=\"image-20240228220453132\"></p>\n<h3 id=\"10-3-Math-的-floor-round-和-ceil-方法实例比较\"><a href=\"#10-3-Math-的-floor-round-和-ceil-方法实例比较\" class=\"headerlink\" title=\"10-3 Math 的 floor,round 和 ceil 方法实例比较\"></a>10-3 Math 的 floor,round 和 ceil 方法实例比较</h3><p><img src=\"/images/image-20240228220635826.png\" alt=\"image-20240228220635826\"></p>\n<p><strong>floor,round 和 ceil 实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"type\">double</span>[] nums = &#123; <span class=\"number\">1.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">1.6</span>, -<span class=\"number\">1.4</span>, -<span class=\"number\">1.5</span>, -<span class=\"number\">1.6</span> &#125;;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">double</span> num : nums) &#123;   </span><br><span class=\"line\">      test(num);   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">double</span> num)</span> &#123;   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.floor(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.floor(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.round(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.round(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.ceil(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.ceil(num));   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.floor(<span class=\"number\">1.4</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.4</span>)=<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.4</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.5</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.5</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.5</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.6</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.6</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.6</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.4</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.5</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.6</span>)=-<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11，Java-Character-类\"><a href=\"#11，Java-Character-类\" class=\"headerlink\" title=\"11，Java Character 类\"></a>11，Java Character 类</h2><p>Character 类用于对单个字符进行操作。</p>\n<p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Unicode 字符表示形式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">uniChar</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u039A&#x27;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p>\n<p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在某些情况下，Java编译器会自动创建一个Character对象。</p>\n<p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span></span><br><span class=\"line\"><span class=\"comment\">// 返回拆箱的值到 &#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> test(<span class=\"string\">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-转义序列\"><a href=\"#11-1-转义序列\" class=\"headerlink\" title=\"11-1 转义序列\"></a>11-1 转义序列</h3><p>前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p>\n<p>下面列表展示了Java的转义序列：</p>\n<p><img src=\"/images/image-20240228220904427.png\" alt=\"image-20240228220904427\"></p>\n<p><strong>实例</strong></p>\n<p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。</p>\n<p>以下实例转义双引号并输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问\\&quot;菜鸟教程!\\&quot;&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问&quot;菜鸟教程!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-Character-方法\"><a href=\"#11-2-Character-方法\" class=\"headerlink\" title=\"11-2 Character 方法\"></a>11-2 Character 方法</h3><p>下面是Character类的方法：</p>\n<p><img src=\"/images/image-20240228220959034.png\" alt=\"image-20240228220959034\"></p>\n<h2 id=\"12，Java-String-类\"><a href=\"#12，Java-String-类\" class=\"headerlink\" title=\"12，Java String 类\"></a>12，Java String 类</h2><h3 id=\"12-1-创建字符串\"><a href=\"#12-1-创建字符串\" class=\"headerlink\" title=\"12-1 创建字符串\"></a>12-1 创建字符串</h3><p>创建字符串最简单的方式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">greeting</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中遇到字符串常量时，这里的值是 “<strong>菜鸟教程</strong>“”，编译器会使用该值创建一个 String 对象。</p>\n<p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p>\n<p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] helloArray = &#123; <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">helloString</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(helloArray);  </span><br><span class=\"line\">      System.out.println( helloString );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n\n<p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p>\n<p>如果需要对字符串做很多修改，那么应该选择使用 <a href=\"http://it028.com/java-stringbuffer.html\">StringBuffer &amp; StringBuilder 类</a>。</p>\n<h3 id=\"12-2-字符串长度\"><a href=\"#12-2-字符串长度\" class=\"headerlink\" title=\"12-2 字符串长度\"></a>12-2 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。</p>\n<p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>\n<p>下面的代码执行后，len 变量等于 14:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">site</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www.runoob.com&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> site.length();</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;菜鸟教程网址长度 : &quot;</span> + len );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程网址长度 : 14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-连接字符串\"><a href=\"#12-3-连接字符串\" class=\"headerlink\" title=\"12-3 连接字符串\"></a>12-3 连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>\n<p>string1.concat(string2);</p>\n<p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;我的名字是 &quot;.concat(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>更常用的是使用’+’操作符来连接字符串，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello,&quot; + &quot; runoob&quot; + &quot;!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, runoob!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;     </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程网址：&quot;</span>;     </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1、&quot;</span> + string1 + <span class=\"string\">&quot;www.runoob.com&quot;</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、菜鸟教程网址：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-4-创建格式化字符串\"><a href=\"#12-4-创建格式化字符串\" class=\"headerlink\" title=\"12-4 创建格式化字符串\"></a>12-4 创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>\n<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>\n<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>\n<p>如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printf(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>你也可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fs;</span><br><span class=\"line\">fs = String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-5-String-方法\"><a href=\"#12-5-String-方法\" class=\"headerlink\" title=\"12-5 String 方法\"></a>12-5 String 方法</h3><p>下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm(‘<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>‘) 文档:</p>\n<p><img src=\"/images/image-20240228221437713.png\" alt=\"image-20240228221437713\"></p>\n<h2 id=\"13，Java-StringBuffer-和-StringBuilder-类\"><a href=\"#13，Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"13，Java StringBuffer 和 StringBuilder 类\"></a>13，Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(<span class=\"string\">&quot;菜鸟教程官网：&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;www&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.runoob&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.com&quot;</span>);</span><br><span class=\"line\">    System.out.println(sBuffer);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程官网：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-1-StringBuffer-方法\"><a href=\"#13-1-StringBuffer-方法\" class=\"headerlink\" title=\"13-1 StringBuffer 方法\"></a>13-1 StringBuffer 方法</h3><p>以下是 StringBuffer 类支持的主要方法</p>\n<p><img src=\"/images/image-20240228221542960.png\" alt=\"image-20240228221542960\"></p>\n<p>下面的列表里的方法和 String 类的方法类似：</p>\n<p><img src=\"/images/image-20240228221620605.png\" alt=\"image-20240228221620605\"></p>\n<h2 id=\"14，Java数组\"><a href=\"#14，Java数组\" class=\"headerlink\" title=\"14，Java数组\"></a>14，Java数组</h2><h3 id=\"14-1-声明数组变量\"><a href=\"#14-1-声明数组变量\" class=\"headerlink\" title=\"14-1 声明数组变量\"></a>14-1 声明数组变量</h3><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;   <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\">dataType arrayRefVar[];  <span class=\"comment\">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C&#x2F;C++ 语言 ，在Java中采用是为了让 C&#x2F;C++ 程序员能够快速理解java语言。</p>\n<p>下面是这两种语法的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span>[] myList;         <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">double</span> myList[];         <span class=\"comment\">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-创建数组\"><a href=\"#14-2-创建数组\" class=\"headerlink\" title=\"14-2 创建数组\"></a>14-2 创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>另外，你还可以使用如下的方式创建数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p><strong>实例</strong></p>\n<p>下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestArray.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 定义数组</span></span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[size];</span><br><span class=\"line\">      myList[<span class=\"number\">0</span>] = <span class=\"number\">5.6</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">1</span>] = <span class=\"number\">4.5</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">2</span>] = <span class=\"number\">3.3</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">3</span>] = <span class=\"number\">13.2</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">4</span>] = <span class=\"number\">4.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">5</span>] = <span class=\"number\">34.33</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">6</span>] = <span class=\"number\">34.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">7</span>] = <span class=\"number\">45.45</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">8</span>] = <span class=\"number\">99.993</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">9</span>] = <span class=\"number\">11123</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;总和为： &quot;</span> + total);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总和为： 11367.373</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-3-处理数组\"><a href=\"#14-3-处理数组\" class=\"headerlink\" title=\"14-3 处理数组\"></a>14-3 处理数组</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p>\n<p><strong>示例</strong></p>\n<p>该实例完整地展示了如何创建、初始化和操纵数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         System.out.println(myList[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Total is &quot;</span> + total);</span><br><span class=\"line\">      <span class=\"comment\">// 查找最大元素</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> myList[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Max is &quot;</span> + max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.9</span></span><br><span class=\"line\"><span class=\"number\">2.9</span></span><br><span class=\"line\"><span class=\"number\">3.4</span></span><br><span class=\"line\"><span class=\"number\">3.5</span></span><br><span class=\"line\">Total is <span class=\"number\">11.7</span></span><br><span class=\"line\">Max is <span class=\"number\">3.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-4-For-Each-循环\"><a href=\"#14-4-For-Each-循环\" class=\"headerlink\" title=\"14-4 For-Each 循环\"></a>14-4 For-Each 循环</h3><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(type element: array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>该实例用来显示数组 myList 中的所有元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">double</span> element: myList) &#123;</span><br><span class=\"line\">         System.out.println(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.9</span><br><span class=\"line\">2.9</span><br><span class=\"line\">3.4</span><br><span class=\"line\">3.5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-5-数组作为函数的参数\"><a href=\"#14-5-数组作为函数的参数\" class=\"headerlink\" title=\"14-5 数组作为函数的参数\"></a>14-5 数组作为函数的参数</h3><p>数组可以作为参数传递给方法。</p>\n<p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-6-数组作为函数的返回值\"><a href=\"#14-6-数组作为函数的返回值\" class=\"headerlink\" title=\"14-6 数组作为函数的返回值\"></a>14-6 数组作为函数的返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverse(<span class=\"type\">int</span>[] list) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[list.length];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = result.length - <span class=\"number\">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class=\"line\">    result[j] = list[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-7-多维数组\"><a href=\"#14-7-多维数组\" class=\"headerlink\" title=\"14-7 多维数组\"></a>14-7 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-7-1-多维数组的动态初始化（以二维数组为例）\"><a href=\"#14-7-1-多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"14-7-1 多维数组的动态初始化（以二维数组为例）\"></a>14-7-1 多维数组的动态初始化（以二维数组为例）</h4><ol>\n<li>直接为每一维分配空间，格式如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[][] typeName = <span class=\"keyword\">new</span> <span class=\"title class_\">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure>\n\n<p>type 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p>二维数组 a 可以看成一个两行三列的数组。</p>\n<p>2，从最高维开始，分别为每一维分配空间，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">s[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Luck&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;you&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p><strong>s[0]&#x3D;new String[2]</strong> 和 <strong>s[1]&#x3D;new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0&#x3D;new String(“Good”)</strong> 等操作。</p>\n<h4 id=\"14-7-2-多维数组的引用（以二维数组为例）\"><a href=\"#14-7-2-多维数组的引用（以二维数组为例）\" class=\"headerlink\" title=\"14-7-2 多维数组的引用（以二维数组为例）\"></a>14-7-2 多维数组的引用（以二维数组为例）</h4><p>对二维数组中的每个元素，引用方式为 <strong>arrayName[index1][index2]</strong>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-8-Arrays-类\"><a href=\"#14-8-Arrays-类\" class=\"headerlink\" title=\"14-8 Arrays 类\"></a>14-8 Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<p>具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<p>具体说明请查看下表：</p>\n<p><img src=\"/images/image-20240228222507296.png\" alt=\"image-20240228222507296\"></p>\n<h2 id=\"15，Java-日期时间\"><a href=\"#15，Java-日期时间\" class=\"headerlink\" title=\"15，Java 日期时间\"></a>15，Java 日期时间</h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p>\n<p>第一个构造函数使用当前日期和时间来初始化对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date( )</span><br></pre></td></tr></table></figure>\n\n<p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date(long millisec)</span><br></pre></td></tr></table></figure>\n\n<p>Date对象创建以后，可以调用下面的方法。</p>\n<p><img src=\"/images/image-20240228222725206.png\" alt=\"image-20240228222725206\"></p>\n<h3 id=\"15-1-获取当前日期时间\"><a href=\"#15-1-获取当前日期时间\" class=\"headerlink\" title=\"15-1 获取当前日期时间\"></a>15-1 获取当前日期时间</h3><p>Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用 toString() 函数显示日期时间</span></span><br><span class=\"line\">       System.out.println(date.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon May <span class=\"number\">04</span> 09:<span class=\"number\">51</span>:<span class=\"number\">52</span> CDT <span class=\"number\">2013</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-2-日期比较\"><a href=\"#15-2-日期比较\" class=\"headerlink\" title=\"15-2 日期比较\"></a>15-2 日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p>\n<ul>\n<li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li>\n<li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li>\n<li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li>\n</ul>\n<h3 id=\"15-3-使用-SimpleDateFormat-格式化日期\"><a href=\"#15-3-使用-SimpleDateFormat-格式化日期\" class=\"headerlink\" title=\"15-3 使用 SimpleDateFormat 格式化日期\"></a>15-3 使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">Date</span> <span class=\"variable\">dNow</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( );</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p>\n<p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p>\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间为: 2018-09-06 10:16:34</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-日期和时间的格式化编码\"><a href=\"#15-4-日期和时间的格式化编码\" class=\"headerlink\" title=\"15-4 日期和时间的格式化编码\"></a>15-4 日期和时间的格式化编码</h3><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p>\n<p><img src=\"/images/image-20240228222933035.png\" alt=\"image-20240228222933035\"></p>\n<h3 id=\"15-5-使用printf格式化日期\"><a href=\"#15-5-使用printf格式化日期\" class=\"headerlink\" title=\"15-5 使用printf格式化日期\"></a>15-5 使用printf格式化日期</h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p>\n<p><img src=\"/images/image-20240228223002094.png\" alt=\"image-20240228223002094\"></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">     <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//c的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class=\"line\">    <span class=\"comment\">//f的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//d的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//r的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//t的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//R的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span><br><span class=\"line\">年-月-日格式：2012-09-10  </span><br><span class=\"line\">月/日/年格式：09/10/12  </span><br><span class=\"line\">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span><br><span class=\"line\">HH:MM:SS格式（24时制）：10:43:36  </span><br><span class=\"line\">HH:MM格式（24时制）：10:43  </span><br></pre></td></tr></table></figure>\n\n<p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p>\n<p>索引必须紧跟在%后面，而且必须以$结束。例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用toString()显示日期和时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 显示格式化时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       Date date=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();                                      </span><br><span class=\"line\">        <span class=\"comment\">//b的使用，月份简称  </span></span><br><span class=\"line\">        String str=String.format(Locale.US,<span class=\"string\">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class=\"line\">        System.out.println(str);                                                                              </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//B的使用，月份全称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文月份全称：%tB&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份全称：%tB%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//a的使用，星期简称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文星期的简称：%ta&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        <span class=\"comment\">//A的使用，星期全称  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地星期的简称：%tA%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//C的使用，年前两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//y的使用，年后两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//j的使用，一年的天数  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//m的使用，月份  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//d的使用，日（二位，不够补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//e的使用，日（一位不补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;月份的日（前面不补0）：%te&quot;</span>,date);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">英文月份简称：May</span><br><span class=\"line\">本地月份简称：五月</span><br><span class=\"line\">英文月份全称：May</span><br><span class=\"line\">本地月份全称：五月</span><br><span class=\"line\">英文星期的简称：Thu</span><br><span class=\"line\">本地星期的简称：星期四</span><br><span class=\"line\">年的前两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">20</span></span><br><span class=\"line\">年的后两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">17</span></span><br><span class=\"line\">一年中的天数（即年的第几天）：<span class=\"number\">124</span></span><br><span class=\"line\">两位数字的月份（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">05</span></span><br><span class=\"line\">两位数字的日（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">04</span></span><br><span class=\"line\">月份的日（前面不补<span class=\"number\">0</span>）：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"15-6-解析字符串为时间\"><a href=\"#15-6-解析字符串为时间\" class=\"headerlink\" title=\"15-6 解析字符串为时间\"></a>15-6 解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> args.length == <span class=\"number\">0</span> ? <span class=\"string\">&quot;1818-11-11&quot;</span> : args[<span class=\"number\">0</span>]; </span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.print(input + <span class=\"string\">&quot; Parses as &quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      Date t; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">          t = ft.parse(input); </span><br><span class=\"line\">          System.out.println(t); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Unparseable using &quot;</span> + ft); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java DateDemo</span><br><span class=\"line\">1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818</span><br><span class=\"line\">$ java DateDemo 2007-12-01</span><br><span class=\"line\">2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-7-Java-休眠-sleep\"><a href=\"#15-7-Java-休眠-sleep\" class=\"headerlink\" title=\"15-7 Java 休眠(sleep)\"></a>15-7 Java 休眠(sleep)</h3><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</p>\n<p>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);   <span class=\"comment\">// 休眠3秒</span></span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Sep 17 10:20:30 CST 2015</span><br><span class=\"line\"></span><br><span class=\"line\">Thu Sep 17 10:20:33 CST 2015</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-8-测量时间\"><a href=\"#15-8-测量时间\" class=\"headerlink\" title=\"15-8 测量时间\"></a>15-8 测量时间</h3><p>下面的一个例子表明如何测量时间间隔（以毫秒为单位）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiffDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">5</span>*<span class=\"number\">60</span>*<span class=\"number\">10</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> end - start;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Difference is : &quot;</span> + diff);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">47</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">50</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Difference is : <span class=\"number\">3019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-9-Calendar类\"><a href=\"#15-9-Calendar类\" class=\"headerlink\" title=\"15-9 Calendar类\"></a>15-9 Calendar类</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p>\n<p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p>\n<p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p>\n<h4 id=\"15-9-1-创建一个代表系统当前日期的Calendar对象\"><a href=\"#15-9-1-创建一个代表系统当前日期的Calendar对象\" class=\"headerlink\" title=\"15-9-1 创建一个代表系统当前日期的Calendar对象\"></a>15-9-1 创建一个代表系统当前日期的Calendar对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Calendar.getInstance();<span class=\"comment\">//默认是当前日期</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-2-创建一个指定日期的Calendar对象\"><a href=\"#15-9-2-创建一个指定日期的Calendar对象\" class=\"headerlink\" title=\"15-9-2 创建一个指定日期的Calendar对象\"></a>15-9-2 创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个代表2009年6月12日的Calendar对象</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">c1.set(<span class=\"number\">2009</span>, <span class=\"number\">6</span> - <span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-3-Calendar类对象字段类型\"><a href=\"#15-9-3-Calendar类对象字段类型\" class=\"headerlink\" title=\"15-9-3 Calendar类对象字段类型\"></a>15-9-3 Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想</p>\n<p><img src=\"/http://localhost:4000//image-20240228225026914.png\" alt=\"image-20240228225026914\"></p>\n<h4 id=\"15-9-4-Calendar类对象信息的设置\"><a href=\"#15-9-4-Calendar类对象信息的设置\" class=\"headerlink\" title=\"15-9-4 Calendar类对象信息的设置\"></a>15-9-4 Calendar类对象信息的设置</h4><p><strong>Set设置</strong></p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void set(int year,int month,int date)</span><br><span class=\"line\">c1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</span><br></pre></td></tr></table></figure>\n\n<p>利用字段类型设置</p>\n<p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(int field,int value)</span><br></pre></td></tr></table></figure>\n\n<p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.DATE,10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.YEAR,2008);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性set的意义以此类推</p>\n<p><strong>Add设置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, 10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, -10);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性的add的意义以此类推</p>\n<h4 id=\"15-9-5-Calendar类对象信息的获得\"><a href=\"#15-9-5-Calendar类对象信息的获得\" class=\"headerlink\" title=\"15-9-5 Calendar类对象信息的获得\"></a>15-9-5 Calendar类对象信息的获得</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\"><span class=\"comment\">// 获得年份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">year</span> <span class=\"operator\">=</span> c1.get(Calendar.YEAR);</span><br><span class=\"line\"><span class=\"comment\">// 获得月份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> c1.get(Calendar.MONTH) + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获得日期</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> c1.get(Calendar.DATE);</span><br><span class=\"line\"><span class=\"comment\">// 获得小时</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hour</span> <span class=\"operator\">=</span> c1.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\"><span class=\"comment\">// 获得分钟</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">minute</span> <span class=\"operator\">=</span> c1.get(Calendar.MINUTE);</span><br><span class=\"line\"><span class=\"comment\">// 获得秒</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> c1.get(Calendar.SECOND);</span><br><span class=\"line\"><span class=\"comment\">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-10-GregorianCalendar类\"><a href=\"#15-10-GregorianCalendar类\" class=\"headerlink\" title=\"15-10 GregorianCalendar类\"></a>15-10 GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p>\n<p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p>\n<p>下面列出GregorianCalendar对象的几个构造方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225136150.png\" alt=\"image-20240228225136150\"></p>\n<p>这里是GregorianCalendar 类提供的一些有用的方法列表：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225205976.png\" alt=\"image-20240228225205976\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GregorianCalendarDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      String months[] = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Jan&quot;</span>, <span class=\"string\">&quot;Feb&quot;</span>, <span class=\"string\">&quot;Mar&quot;</span>, <span class=\"string\">&quot;Apr&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;May&quot;</span>, <span class=\"string\">&quot;Jun&quot;</span>, <span class=\"string\">&quot;Jul&quot;</span>, <span class=\"string\">&quot;Aug&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;Sep&quot;</span>, <span class=\"string\">&quot;Oct&quot;</span>, <span class=\"string\">&quot;Nov&quot;</span>, <span class=\"string\">&quot;Dec&quot;</span>&#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> year;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化 Gregorian 日历</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用当前时间和日期</span></span><br><span class=\"line\">      <span class=\"comment\">// 默认为本地时间和时区</span></span><br><span class=\"line\">      <span class=\"type\">GregorianCalendar</span> <span class=\"variable\">gcalendar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GregorianCalendar</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 显示当前时间和日期的信息</span></span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Date: &quot;</span>);</span><br><span class=\"line\">      System.out.print(months[gcalendar.get(Calendar.MONTH)]);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot; &quot;</span> + gcalendar.get(Calendar.DATE) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      System.out.println(year = gcalendar.get(Calendar.YEAR));</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Time: &quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.HOUR) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.println(gcalendar.get(Calendar.SECOND));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 测试当前年份是否为闰年</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(gcalendar.isLeapYear(year)) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份不是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date: Apr 22 2009</span><br><span class=\"line\">Time: 11:25:27</span><br><span class=\"line\">当前年份不是闰年</span><br></pre></td></tr></table></figure>\n\n<p>关于 Calender 类的完整列表，你可以参考标准的 <a href=\"http://it028.com/index-10.htm\">Java文档</a>。</p>\n<h2 id=\"16，Java-正则表达式\"><a href=\"#16，Java-正则表达式\" class=\"headerlink\" title=\"16，Java 正则表达式\"></a>16，Java 正则表达式</h2><p>正则表达式定义了字符串的模式。</p>\n<p>正则表达式可以用来搜索、编辑或处理文本。</p>\n<p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>\n<h3 id=\"16-1-正则表达式实例\"><a href=\"#16-1-正则表达式实例\" class=\"headerlink\" title=\"16-1 正则表达式实例\"></a>16-1 正则表达式实例</h3><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p>\n<p><strong>.</strong>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p>\n<p>下表列出了一些正则表达式的实例及描述：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225320769.png\" alt=\"image-20240228225320769\"></p>\n<p>Java 正则表达式和 Perl 的是最为相似的。</p>\n<p>java.util.regex 包主要包括以下三个类：</p>\n<ul>\n<li><p>Pattern 类：</p>\n<p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>\n</li>\n<li><p>Matcher 类：</p>\n<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>\n</li>\n<li><p>PatternSyntaxException：</p>\n<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>\n</li>\n</ul>\n<p>以下实例中使用了正则表达式 <strong>.*runoob.*</strong> 用于查找字符串中是否包了 <strong>runoob</strong> 子串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegexExample1</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;I am noob &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;from runoob.com.&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.*runoob.*&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isMatch</span> <span class=\"operator\">=</span> Pattern.matches(pattern, content);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot;</span> + isMatch);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串中是否包含了 &#x27;runoob&#x27; 子字符串? true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-捕获组\"><a href=\"#16-2-捕获组\" class=\"headerlink\" title=\"16-2 捕获组\"></a>16-2 捕获组</h3><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p>\n<p>例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p>\n<p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p>\n<ul>\n<li>((A)(B(C)))</li>\n<li>(A)</li>\n<li>(B(C))</li>\n<li>(C)</li>\n</ul>\n<p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p>\n<p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 按指定模式在字符串查找</span></span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\D*)(\\\\d+)(.*)&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 创建 Pattern 对象</span></span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 现在创建 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> r.matcher(line);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m.find( )) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">0</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">1</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">2</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">3</span>) ); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;NO MATCH&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found value: This order was placed for QT3000! OK?</span><br><span class=\"line\">Found value: This order was placed for QT</span><br><span class=\"line\">Found value: 3000</span><br><span class=\"line\">Found value: ! OK?</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"16-3-正则表达式语法\"><a href=\"#16-3-正则表达式语法\" class=\"headerlink\" title=\"16-3 正则表达式语法\"></a>16-3 正则表达式语法</h3><p>在其他语言中，<strong>\\</strong> 表示：<strong>我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</strong></p>\n<p>在 Java 中，<strong>\\</strong> 表示：<strong>我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</strong></p>\n<p>所以，在其他的语言中（如Perl），一个反斜杠 **** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <strong>\\</strong> 代表其他语言中的一个 ****，这也就是为什么表示一位数字的正则表达式是 <strong>\\d</strong>，而表示一个普通的反斜杠是 <strong>\\\\</strong>。</p>\n<p><img src=\"/http://localhost:4000//image-20240228225546405.png\" alt=\"image-20240228225546405\"></p>\n<h3 id=\"16-4-Matcher-类的方法\"><a href=\"#16-4-Matcher-类的方法\" class=\"headerlink\" title=\"16-4 Matcher 类的方法\"></a>16-4 Matcher 类的方法</h3><h4 id=\"16-4-1-索引方法\"><a href=\"#16-4-1-索引方法\" class=\"headerlink\" title=\"16-4-1 索引方法\"></a>16-4-1 索引方法</h4><p>索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225637596.png\" alt=\"image-20240228225637596\"></p>\n<h4 id=\"16-4-2-研究方法\"><a href=\"#16-4-2-研究方法\" class=\"headerlink\" title=\"16-4-2 研究方法\"></a>16-4-2 研究方法</h4><p>研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225700596.png\" alt=\"image-20240228225700596\"></p>\n<h4 id=\"16-4-3-替换方法\"><a href=\"#16-4-3-替换方法\" class=\"headerlink\" title=\"16-4-3 替换方法\"></a>16-4-3 替换方法</h4><p>替换方法是替换输入字符串里文本的方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225727777.png\" alt=\"image-20240228225727777\"></p>\n<h4 id=\"16-4-4-start-和-end-方法\"><a href=\"#16-4-4-start-和-end-方法\" class=\"headerlink\" title=\"16-4-4 start 和 end 方法\"></a>16-4-4 start 和 end 方法</h4><p>下面是一个对单词 “cat” 出现在输入字符串中出现次数进行计数的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\\\bcat\\\\b&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">         count++;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Match number &quot;</span>+count);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;start(): &quot;</span>+m.start());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;end(): &quot;</span>+m.end());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match number <span class=\"number\">1</span></span><br><span class=\"line\">start(): <span class=\"number\">0</span></span><br><span class=\"line\">end(): <span class=\"number\">3</span></span><br><span class=\"line\">Match number <span class=\"number\">2</span></span><br><span class=\"line\">start(): <span class=\"number\">4</span></span><br><span class=\"line\">end(): <span class=\"number\">7</span></span><br><span class=\"line\">Match number <span class=\"number\">3</span></span><br><span class=\"line\">start(): <span class=\"number\">8</span></span><br><span class=\"line\">end(): <span class=\"number\">11</span></span><br><span class=\"line\">Match number <span class=\"number\">4</span></span><br><span class=\"line\">start(): <span class=\"number\">19</span></span><br><span class=\"line\">end(): <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p>\n<p>Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。</p>\n<h4 id=\"16-4-5-matches-和-lookingAt-方法\"><a href=\"#16-4-5-matches-和-lookingAt-方法\" class=\"headerlink\" title=\"16-4-5 matches 和 lookingAt 方法\"></a>16-4-5 matches 和 lookingAt 方法</h4><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。</p>\n<p>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p>\n<p>这两个方法经常在输入字符串的开始使用。</p>\n<p>我们通过下面这个例子，来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern pattern;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher2;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       pattern = Pattern.compile(REGEX);</span><br><span class=\"line\">       matcher = pattern.matcher(INPUT);</span><br><span class=\"line\">       matcher2 = pattern.matcher(INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current REGEX is: foo</span><br><span class=\"line\">Current INPUT is: fooooooooooooooooo</span><br><span class=\"line\">Current INPUT2 is: ooooofoooooooooooo</span><br><span class=\"line\">lookingAt(): true</span><br><span class=\"line\">matches(): false</span><br><span class=\"line\">lookingAt(): false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-6-replaceFirst-和-replaceAll-方法\"><a href=\"#16-4-6-replaceFirst-和-replaceAll-方法\" class=\"headerlink\" title=\"16-4-6 replaceFirst 和 replaceAll 方法\"></a>16-4-6 replaceFirst 和 replaceAll 方法</h4><p>replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p>\n<p>下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dog&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;The dog says meow. &quot;</span> +</span><br><span class=\"line\">                                    <span class=\"string\">&quot;All dogs say meow.&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"comment\">// get a matcher object</span></span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); </span><br><span class=\"line\">       INPUT = m.replaceAll(REPLACE);</span><br><span class=\"line\">       System.out.println(INPUT);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat says meow. All cats say meow.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-7-appendReplacement-和-appendTail-方法\"><a href=\"#16-4-7-appendReplacement-和-appendTail-方法\" class=\"headerlink\" title=\"16-4-7 appendReplacement 和 appendTail 方法\"></a>16-4-7 appendReplacement 和 appendTail 方法</h4><p>Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：</p>\n<p>看下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a*b&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">      <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT);</span><br><span class=\"line\">      <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(m.find())&#123;</span><br><span class=\"line\">         m.appendReplacement(sb,REPLACE);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      m.appendTail(sb);</span><br><span class=\"line\">      System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-foo-foo-foo-kkk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-8-PatternSyntaxException-类的方法\"><a href=\"#16-4-8-PatternSyntaxException-类的方法\" class=\"headerlink\" title=\"16-4-8 PatternSyntaxException 类的方法\"></a>16-4-8 PatternSyntaxException 类的方法</h4><p>PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。</p>\n<p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p>\n<p><img src=\"/http://localhost:4000//image-20240228230136771.png\" alt=\"image-20240228230136771\"></p>\n<h2 id=\"17，Java-方法\"><a href=\"#17，Java-方法\" class=\"headerlink\" title=\"17，Java 方法\"></a>17，Java 方法</h2><p>在前面几个章节中我们经常使用到 <strong>System.out.println()</strong>，那么它是什么呢？</p>\n<ul>\n<li>println() 是一个方法。</li>\n<li>System 是系统类。</li>\n<li>out 是标准输出对象。</li>\n</ul>\n<p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p>\n<h3 id=\"17-1-那么什么是方法呢？\"><a href=\"#17-1-那么什么是方法呢？\" class=\"headerlink\" title=\"17-1 那么什么是方法呢？\"></a>17-1 那么什么是方法呢？</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<h3 id=\"17-2-方法的优点\"><a href=\"#17-2-方法的优点\" class=\"headerlink\" title=\"17-2 方法的优点\"></a>17-2 方法的优点</h3><ul>\n<li>\\1. 使程序变得更简短而清晰。</li>\n<li>\\2. 有利于程序维护。</li>\n<li>\\3. 可以提高程序开发的效率。</li>\n<li>\\4. 提高了代码的重用性。</li>\n</ul>\n<h3 id=\"17-3-方法的命名规则\"><a href=\"#17-3-方法的命名规则\" class=\"headerlink\" title=\"17-3 方法的命名规则\"></a>17-3 方法的命名规则</h3><ul>\n<li>1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<strong>addPerson</strong>。</li>\n<li>2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<strong>test<MethodUnderTest>_<state></state></MethodUnderTest></strong>，例如 <strong>testPop_emptyStack</strong>。</li>\n</ul>\n<hr>\n<h3 id=\"17-4-方法的定义\"><a href=\"#17-4-方法的定义\" class=\"headerlink\" title=\"17-4 方法的定义\"></a>17-4 方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p>\n<ul>\n<li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>\n<li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li>\n<li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>\n<li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">(<span class=\"type\">int</span> birthday)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数可以有多个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">float</span> <span class=\"title function_\">interest</span><span class=\"params\">(<span class=\"type\">float</span> principal, <span class=\"type\">int</span> year)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p>\n<p>下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回两个整型变量数据的较大值 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> result;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">      result = num1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-5-方法调用\"><a href=\"#17-5-方法调用\" class=\"headerlink\" title=\"17-5 方法调用\"></a>17-5 方法调用</h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p>\n<p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p>\n<p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">larger</span> <span class=\"operator\">=</span> max(<span class=\"number\">30</span>, <span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;欢迎访问菜鸟教程！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子演示了如何定义一个方法，以及如何调用它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestMax.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMax</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 主方法 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> max(i, j);</span><br><span class=\"line\">      System.out.println( i + <span class=\"string\">&quot; 和 &quot;</span> + j + <span class=\"string\">&quot; 比较，最大值是：&quot;</span> + k);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** 返回两个整数变量较大的值 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">         result = num1;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 和 2 比较，最大值是：5</span><br></pre></td></tr></table></figure>\n\n<p>这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。</p>\n<p>main 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。</p>\n<h3 id=\"17-6-void-关键字\"><a href=\"#17-6-void-关键字\" class=\"headerlink\" title=\"17-6 void 关键字\"></a>17-6 void 关键字</h3><p>本节说明如何声明和调用一个 void 方法。</p>\n<p>下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestVoidMethod.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVoidMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    printGrade(<span class=\"number\">78.5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printGrade</span><span class=\"params\">(<span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n\n<p>这里printGrade方法是一个void类型方法，它不返回值。</p>\n<p>一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。</p>\n<hr>\n<h3 id=\"17-7-通过值传递参数\"><a href=\"#17-7-通过值传递参数\" class=\"headerlink\" title=\"17-7 通过值传递参数\"></a>17-7 通过值传递参数</h3><p>调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。</p>\n<p>例如，下面的方法连续n次打印一个消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestVoidMethod.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nPrintln</span><span class=\"params\">(String message, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    System.out.println(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<p>下面的例子演示按值传递的效果。</p>\n<p>该程序创建一个方法，该方法用于交换两个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestPassByValue.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPassByValue</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换前 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                        num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用swap方法</span></span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换后 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                       num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/** 交换两个变量的方法 */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> n1, <span class=\"type\">int</span> n2)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t进入 swap 方法&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换前 n1 的值为：&quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">    <span class=\"comment\">// 交换 n1 与 n2的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> n1;</span><br><span class=\"line\">    n1 = n2;</span><br><span class=\"line\">    n2 = temp;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换后 n1 的值为 &quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交换前 num1 的值为：1 ，num2 的值为：2</span><br><span class=\"line\">    进入 swap 方法</span><br><span class=\"line\">        交换前 n1 的值为：1，n2 的值：2</span><br><span class=\"line\">        交换后 n1 的值为 2，n2 的值：1</span><br><span class=\"line\">交换后 num1 的值为：1 ，num2 的值为：2</span><br></pre></td></tr></table></figure>\n\n<p>传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。</p>\n<hr>\n<h3 id=\"17-8-方法的重载\"><a href=\"#17-8-方法的重载\" class=\"headerlink\" title=\"17-8 方法的重载\"></a>17-8 方法的重载</h3><p>上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？</p>\n<p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> num1, <span class=\"type\">double</span> num2)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；</p>\n<p>如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；</p>\n<p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p>\n<p>Java编译器根据方法签名判断哪个方法应该被调用。</p>\n<p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p>\n<p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p>\n<h3 id=\"17-9-变量作用域\"><a href=\"#17-9-变量作用域\" class=\"headerlink\" title=\"17-9 变量作用域\"></a>17-9 变量作用域</h3><ul>\n<li>变量的范围是程序中该变量可以被引用的部分。</li>\n<li>方法内定义的变量被称为局部变量。</li>\n<li>局部变量的作用范围从声明开始，直到包含它的块结束。</li>\n<li>局部变量必须声明才可以使用。</li>\n<li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li>\n<li>for循环的初始化部分声明的变量，其作用范围在整个循环。</li>\n<li>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li>\n<li>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</li>\n</ul>\n<h3 id=\"17-10-命令行参数的使用\"><a href=\"#17-10-命令行参数的使用\" class=\"headerlink\" title=\"17-10 命令行参数的使用\"></a>17-10 命令行参数的使用</h3><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p>\n<p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p>\n<p>下面的程序打印所有的命令行参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLine.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommandLine</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;args.length; i++)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;args[&quot;</span> + i + <span class=\"string\">&quot;]: &quot;</span> + args[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，运行这个程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac CommandLine.java </span><br><span class=\"line\">$ java CommandLine this is a command line 200 -100</span><br><span class=\"line\">args[0]: this</span><br><span class=\"line\">args[1]: is</span><br><span class=\"line\">args[2]: a</span><br><span class=\"line\">args[3]: command</span><br><span class=\"line\">args[4]: line</span><br><span class=\"line\">args[5]: 200</span><br><span class=\"line\">args[6]: -100</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"17-11-构造方法\"><a href=\"#17-11-构造方法\" class=\"headerlink\" title=\"17-11 构造方法\"></a>17-11 构造方法</h3><ul>\n<li>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</li>\n<li>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</li>\n<li>不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</li>\n<li>一旦你定义了自己的构造方法，默认构造方法就会失效。</li>\n</ul>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass() &#123;</span><br><span class=\"line\">    x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多时候需要一个有参数的构造方法。</p>\n<p><strong>实例</strong></p>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass(<span class=\"type\">int</span> i ) &#123;</span><br><span class=\"line\">    x = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">10</span> );</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">20</span> );</span><br><span class=\"line\">    System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-12-可变参数\"><a href=\"#17-12-可变参数\" class=\"headerlink\" title=\"17-12 可变参数\"></a>17-12 可变参数</h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>\n<p>方法的可变参数的声明如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName... parameterName</span><br></pre></td></tr></table></figure>\n\n<p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p>\n<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VarargsDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用可变参数的方法</span></span><br><span class=\"line\">        printMax(<span class=\"number\">34</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">56.5</span>);</span><br><span class=\"line\">        printMax(<span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">( <span class=\"type\">double</span>... numbers)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No argument passed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> numbers[<span class=\"number\">0</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;  numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class=\"line\">                result = numbers[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The max value is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The max value is 56.5</span><br><span class=\"line\">The max value is 3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-13-finalize-方法\"><a href=\"#17-13-finalize-方法\" class=\"headerlink\" title=\"17-13 finalize() 方法\"></a>17-13 finalize() 方法</h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p>\n<p>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p>\n<p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p>\n<p>finalize() 一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 在这里终结代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p>\n<p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FinalizationDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalizationDemo</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    c2 = c3 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    System.gc(); <span class=\"comment\">//调用Java垃圾收集器</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cake</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Cake</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is created&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.Throwable &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">super</span>.finalize();  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is disposed&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac FinalizationDemo.java </span><br><span class=\"line\">$ java FinalizationDemo</span><br><span class=\"line\">Cake Object 1is created</span><br><span class=\"line\">Cake Object 2is created</span><br><span class=\"line\">Cake Object 3is created</span><br><span class=\"line\">Cake Object 3is disposed</span><br><span class=\"line\">Cake Object 2is disposed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18，Java-流-Stream-、文件-File-和IO\"><a href=\"#18，Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"18，Java 流(Stream)、文件(File)和IO\"></a>18，Java 流(Stream)、文件(File)和IO</h2><ul>\n<li>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</li>\n<li>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</li>\n<li>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</li>\n<li>Java 为 I&#x2F;O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</li>\n<li>但本节讲述最基本的和流与 I&#x2F;O 相关的功能。我们将通过一个个例子来学习这些功能。</li>\n</ul>\n<h3 id=\"18-1-读取控制台输入\"><a href=\"#18-1-读取控制台输入\" class=\"headerlink\" title=\"18-1 读取控制台输入\"></a>18-1 读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<p>下面是创建 BufferedReader 的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> </span><br><span class=\"line\">                      <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure>\n\n<p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p>\n<h3 id=\"18-2-从控制台读取多字符输入\"><a href=\"#18-2-从控制台读取多字符输入\" class=\"headerlink\" title=\"18-2 从控制台读取多字符输入\"></a>18-2 从控制台读取多字符输入</h3><p>从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。</p>\n<p>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 “q”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BRRead.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRRead</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取字符</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            c = (<span class=\"type\">char</span>) br.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (c != <span class=\"string\">&#x27;q&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入字符, 按下 &#x27;q&#x27; 键退出。</span><br><span class=\"line\">runoob</span><br><span class=\"line\">r</span><br><span class=\"line\">u</span><br><span class=\"line\">n</span><br><span class=\"line\">o</span><br><span class=\"line\">o</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q</span><br><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-3-从控制台读取字符串\"><a href=\"#18-3-从控制台读取字符串\" class=\"headerlink\" title=\"18-3 从控制台读取字符串\"></a>18-3 从控制台读取字符串</h3><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。</p>\n<p>它的一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">readLine</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>下面的程序读取和显示字符行直到你输入了单词”end”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRReadLines</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter lines of text.&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter &#x27;end&#x27; to quit.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter lines of text.</span><br><span class=\"line\">Enter &#x27;end&#x27; to quit.</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>‘) 类来获取控制台的输入。</p>\n</blockquote>\n<h3 id=\"18-4-控制台输出\"><a href=\"#18-4-控制台输出\" class=\"headerlink\" title=\"18-4 控制台输出\"></a>18-4 控制台输出</h3><p>在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<p>PrintStream 定义 write() 的最简单格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> byteval)</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将 byteval 的低八位字节写到流中。</p>\n<p>下面的例子用 write() 把字符 “A” 和紧跟着的换行符输出到屏幕：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteDemo.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//演示 System.out.write().</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriteDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b;</span><br><span class=\"line\">        b = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        System.out.write(b);</span><br><span class=\"line\">        System.out.write(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上实例在输出窗口输出 “A” 字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"18-5-读写文件\"><a href=\"#18-5-读写文件\" class=\"headerlink\" title=\"18-5 读写文件\"></a>18-5 读写文件</h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p>\n<h4 id=\"18-5-1-FileInputStream\"><a href=\"#18-5-1-FileInputStream\" class=\"headerlink\" title=\"18-5-1 FileInputStream\"></a>18-5-1 FileInputStream</h4><ul>\n<li>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</li>\n<li>有多种构造方法可用来创建对象。</li>\n<li>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); <span class=\"type\">InputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。</li>\n</ul>\n<p><img src=\"/http://localhost:4000//image-20240228231544486.png\" alt=\"image-20240228231544486\"></p>\n<p>除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>‘)</li>\n<li>[DataInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>‘)</li>\n</ul>\n<hr>\n<h4 id=\"18-5-2-FileOutputStream\"><a href=\"#18-5-2-FileOutputStream\" class=\"headerlink\" title=\"18-5-2 FileOutputStream\"></a>18-5-2 FileOutputStream</h4><p>该类用来创建一个文件并向文件中写数据。</p>\n<p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p>\n<p>有两个构造方法可以用来创建 FileOutputStream 对象。</p>\n<p>使用字符串类型的文件名来创建一个输出流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); </span><br><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<p>创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。</p>\n<p><img src=\"/http://localhost:4000//image-20240228231647489.png\" alt=\"image-20240228231647489\"></p>\n<p>除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>‘)</li>\n<li>[DataOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>‘)</li>\n</ul>\n<p>下面是一个演示 InputStream 和 OutputStream 用法的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fileStreamTest.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span> bWrite[] = &#123; <span class=\"number\">11</span>, <span class=\"number\">21</span>, <span class=\"number\">3</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class=\"line\">                os.write(bWrite[x]); <span class=\"comment\">// writes the bytes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> is.available();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) is.read() + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。</p>\n<p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileStreamTest2.java 文件代码：</span><br><span class=\"line\"><span class=\"comment\">//文件名 :fileStreamTest2.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fop, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;中文输入&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写入到缓冲区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fop.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输出流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileInputStream对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fip, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader.ready()) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"type\">char</span>) reader.read());</span><br><span class=\"line\">            <span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fip.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-6-文件和I-O\"><a href=\"#18-6-文件和I-O\" class=\"headerlink\" title=\"18-6 文件和I&#x2F;O\"></a>18-6 文件和I&#x2F;O</h3><p>还有一些关于文件和I&#x2F;O的类，我们也需要知道：</p>\n<ul>\n<li>[File Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>‘)</li>\n<li>[FileReader Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>‘)</li>\n<li>[FileWriter Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>‘)</li>\n</ul>\n<hr>\n<h3 id=\"18-7-Java中的目录\"><a href=\"#18-7-Java中的目录\" class=\"headerlink\" title=\"18-7 Java中的目录\"></a>18-7 Java中的目录</h3><h4 id=\"18-7-1-创建目录：\"><a href=\"#18-7-1-创建目录：\" class=\"headerlink\" title=\"18-7-1 创建目录：\"></a>18-7-1 创建目录：</h4><p>File类中有两个方法可以用来创建文件夹：</p>\n<ul>\n<li>**mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li>\n<li>**mkdirs()**方法创建一个文件夹和它的所有父文件夹。</li>\n</ul>\n<p>下面的例子创建 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”文件夹：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CreateDir.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDir</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp/user//images/bin&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"comment\">// 现在创建目录</span></span><br><span class=\"line\">        d.mkdirs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并执行上面代码来创建目录 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”。</p>\n<p><strong>注意：</strong> Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (&#x2F;) ，路径依然能够被正确解析。</p>\n<h4 id=\"18-7-2-读取目录\"><a href=\"#18-7-2-读取目录\" class=\"headerlink\" title=\"18-7-2 读取目录\"></a>18-7-2 读取目录</h4><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。</p>\n<p>如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。</p>\n<p>可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p>\n<p>下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DirList.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f1.isDirectory()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;目录 &quot;</span> + dirname);</span><br><span class=\"line\">            String s[] = f1.list();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname + <span class=\"string\">&quot;/&quot;</span> + s[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个目录&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个文件&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(dirname + <span class=\"string\">&quot; 不是一个目录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录 /tmp</span><br><span class=\"line\">bin 是一个目录</span><br><span class=\"line\">lib 是一个目录</span><br><span class=\"line\">demo 是一个目录</span><br><span class=\"line\">test.txt 是一个文件</span><br><span class=\"line\">README 是一个文件</span><br><span class=\"line\">index.html 是一个文件</span><br><span class=\"line\">include 是一个目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-7-3-删除目录或文件\"><a href=\"#18-7-3-删除目录或文件\" class=\"headerlink\" title=\"18-7-3 删除目录或文件\"></a>18-7-3 删除目录或文件</h4><p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。</p>\n<p>以下代码会删除目录 <strong>&#x2F;tmp&#x2F;&#x2F;images&#x2F;</strong>，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p>\n<p>测试目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp//images/</span><br><span class=\"line\">|-- 1.log</span><br><span class=\"line\">|-- test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeleteFileDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里修改为自己的测试目录</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp//images/&quot;</span>);</span><br><span class=\"line\">        deleteFolder(folder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 删除文件及目录</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteFolder</span><span class=\"params\">(File folder)</span> &#123;</span><br><span class=\"line\">        File[] files = folder.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    deleteFolder(f);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        folder.delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19，Java-Scanner-类\"><a href=\"#19，Java-Scanner-类\" class=\"headerlink\" title=\"19，Java Scanner 类\"></a>19，Java Scanner 类</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p>\n<p>下面是创建 Scanner 对象的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>\n<h3 id=\"19-1-使用-next-方法：\"><a href=\"#19-1-使用-next-方法：\" class=\"headerlink\" title=\"19-1 使用 next 方法：\"></a>19-1 使用 next 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// next方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> scan.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">next方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串并未输出，接下来我们看 nextLine。</p>\n<h3 id=\"19-2-使用-nextLine-方法：\"><a href=\"#19-2-使用-nextLine-方法：\" class=\"headerlink\" title=\"19-2 使用 nextLine 方法：\"></a>19-2 使用 nextLine 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// nextLine方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;nextLine方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextLine()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">nextLine方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串输出。</p>\n<h3 id=\"19-3-next-与-nextLine-区别\"><a href=\"#19-3-next-与-nextLine-区别\" class=\"headerlink\" title=\"19-3 next() 与 nextLine() 区别\"></a>19-3 next() 与 nextLine() 区别</h3><p>next():</p>\n<ul>\n<li>1、一定要读取到有效字符后才可以结束输入。</li>\n<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>\n<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>\n<li>next() 不能得到带有空格的字符串。</li>\n</ul>\n<p>nextLine()：</p>\n<ul>\n<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>\n<li>2、可以获得空白。</li>\n</ul>\n<p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextInt()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是整数</span></span><br><span class=\"line\">            i = scan.nextInt();</span><br><span class=\"line\">            <span class=\"comment\">// 接收整数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;整数数据：&quot;</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是整数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入小数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextFloat()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是小数</span></span><br><span class=\"line\">            f = scan.nextFloat();</span><br><span class=\"line\">            <span class=\"comment\">// 接收小数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;小数数据：&quot;</span> + f);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是小数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">输入整数：12</span><br><span class=\"line\">整数数据：12</span><br><span class=\"line\">输入小数：1.2</span><br><span class=\"line\">小数数据：1.2</span><br></pre></td></tr></table></figure>\n\n<p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scan.hasNextDouble()) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scan.nextDouble();</span><br><span class=\"line\">            m = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            sum = sum + x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的和为&quot;</span> + sum);</span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">21.4</span></span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">4</span>个数的和为<span class=\"number\">71.4</span></span><br><span class=\"line\"><span class=\"number\">4</span>个数的平均值是<span class=\"number\">17.85</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20，Java异常处理\"><a href=\"#20，Java异常处理\" class=\"headerlink\" title=\"20，Java异常处理\"></a>20，Java异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11&#x2F;0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li>**检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查</li>\n</ul>\n<h3 id=\"20-1-异常方法\"><a href=\"#20-1-异常方法\" class=\"headerlink\" title=\"20-1 异常方法\"></a>20-1 异常方法</h3><p><img src=\"/http://localhost:4000//image-20240228232401552.png\" alt=\"image-20240228232401552\"></p>\n<h3 id=\"20-2-捕获异常\"><a href=\"#20-2-捕获异常\" class=\"headerlink\" title=\"20-2 捕获异常\"></a>20-2 捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try&#x2F;catch 代码块放在异常可能发生的地方。</p>\n<p>try&#x2F;catch代码块中的代码称为保护代码，使用 try&#x2F;catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ExceptionName e1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcepTest.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名 : ExcepTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Out of the block&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">Out of the block</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-多重捕获块\"><a href=\"#20-3-多重捕获块\" class=\"headerlink\" title=\"20-3 多重捕获块\"></a>20-3 多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<p>多重捕获块的语法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的代码段包含了 3 个 catch块。</li>\n<li>可以在 try 语句后面添加任意数量的 catch 块。</li>\n<li>如果保护代码中发生异常，异常被抛给第一个 catch 块。</li>\n<li>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</li>\n<li>如果不匹配，它会被传递给第二个 catch 块。</li>\n<li>如此，直到异常被捕获或者通过所有的 catch 块。</li>\n</ul>\n<p>该实例展示了怎么使用多重 try&#x2F;catch。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    file = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName);</span><br><span class=\"line\">    x = (<span class=\"type\">byte</span>) file.read();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotFoundException f) &#123; <span class=\"comment\">// Not valid!</span></span><br><span class=\"line\">    f.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(IOException i) &#123;</span><br><span class=\"line\">    i.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-throws-throw-关键字：\"><a href=\"#20-4-throws-throw-关键字：\" class=\"headerlink\" title=\"20-4 throws&#x2F;throw 关键字：\"></a>20-4 throws&#x2F;throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteException</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException,</span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-5-finally关键字\"><a href=\"#20-5-finally关键字\" class=\"headerlink\" title=\"20-5 finally关键字\"></a>20-5 finally关键字</h3><ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li>\n<li>无论是否发生异常，finally 代码块中的代码总会被执行。</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExcepTest.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       a[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;First element value: &quot;</span> +a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;The finally statement is executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">First element value: 6</span><br><span class=\"line\">The finally statement is executed</span><br></pre></td></tr></table></figure>\n\n<p>注意下面事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try&#x2F;catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h3 id=\"20-6-声明自定义异常\"><a href=\"#20-6-声明自定义异常\" class=\"headerlink\" title=\"20-6 声明自定义异常\"></a>20-6 声明自定义异常</h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<p>可以像下面这样定义自己的异常类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只继承Exception 类来创建的异常类是检查性异常类。</li>\n<li>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。</li>\n<li>一个异常类和其它任何类一样，包含有变量和方法。</li>\n</ul>\n<p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// InsufficientFundsException.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名InsufficientFundsException.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义异常类，继承Exception类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsufficientFundsException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">double</span> amount;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">InsufficientFundsException</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.amount = amount;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAmount</span><span class=\"params\">()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示如何使用我们自定义的异常类，</p>\n<p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名称 CheckingAccount.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//此类模拟银行账户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckingAccount</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//balance为余额，number为卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> number;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CheckingAccount</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：存钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      balance += amount;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：取钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(amount &lt;= balance)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         balance -= amount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"type\">double</span> <span class=\"variable\">needs</span> <span class=\"operator\">=</span> amount - balance;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InsufficientFundsException</span>(needs);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回余额</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名称 BankDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String [] args)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">CheckingAccount</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckingAccount</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Depositing $500...&quot;</span>);</span><br><span class=\"line\">      c.deposit(<span class=\"number\">500.00</span>);</span><br><span class=\"line\">      <span class=\"keyword\">try</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $100...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">100.00</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $600...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">600.00</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(InsufficientFundsException e)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Sorry, but you are short $&quot;</span></span><br><span class=\"line\">                                  + e.getAmount());</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Depositing $500...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $100...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $600...</span><br><span class=\"line\">Sorry, but you are short $200.0</span><br><span class=\"line\">InsufficientFundsException</span><br><span class=\"line\">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span><br><span class=\"line\">        at BankDemo.main(BankDemo.java:13)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-7-通用异常\"><a href=\"#20-7-通用异常\" class=\"headerlink\" title=\"20-7 通用异常\"></a>20-7 通用异常</h3><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java**<strong>虚拟机</strong></strong>)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li>**程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1，Java基础语法\"><a href=\"#1，Java基础语法\" class=\"headerlink\" title=\"1，Java基础语法\"></a>1，Java基础语法</h2><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>\n</ul>\n<h3 id=\"1-1-第一个Java程序\"><a href=\"#1-1-第一个Java程序\" class=\"headerlink\" title=\"1-1 第一个Java程序\"></a>1-1 第一个Java程序</h3><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">     * 它将打印字符串 Hello World</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); <span class=\"comment\">// 打印 Hello World</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面将逐步介绍如何保存、编译以及运行这个程序：</p>\n<ul>\n<li>打开代码编辑器，把上面的代码添加进去；</li>\n<li>把文件名保存为：HelloWorld.java；</li>\n<li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li>\n<li>在命令行窗口输入 <strong>javac HelloWorld.java</strong> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li>\n<li>再键输入 <strong>java HelloWorld</strong> 按下回车键就可以运行程序了</li>\n</ul>\n<p>你将会在窗口看到 Hello World</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C : &gt; javac HelloWorld.java</span><br><span class=\"line\">C : &gt; java HelloWorld </span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<p>Gif 图演示：</p>\n<p><img src=\"/images/java-HelloWorld.gif\" alt=\"img\"></p>\n<h3 id=\"1-2-基本语法\"><a href=\"#1-2-基本语法\" class=\"headerlink\" title=\"1-2 基本语法\"></a>1-2 基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>\n<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>\n<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String []args)</strong> 方法开始执行。</li>\n</ul>\n<h3 id=\"1-3-Java-标识符\"><a href=\"#1-3-Java-标识符\" class=\"headerlink\" title=\"1-3 Java 标识符\"></a>1-3 Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"1-4-Java修饰符\"><a href=\"#1-4-Java修饰符\" class=\"headerlink\" title=\"1-4 Java修饰符\"></a>1-4 Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>\n<h3 id=\"1-5-Java-变量\"><a href=\"#1-5-Java-变量\" class=\"headerlink\" title=\"1-5 Java 变量\"></a>1-5 Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"1-6-Java-数组\"><a href=\"#1-6-Java-数组\" class=\"headerlink\" title=\"1-6 Java 数组\"></a>1-6 Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"1-7-Java-枚举\"><a href=\"#1-7-Java-枚举\" class=\"headerlink\" title=\"1-7 Java 枚举\"></a>1-7 Java 枚举</h3><p>ava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuice</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">FreshJuiceSize</span>&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class=\"line\">   FreshJuiceSize size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuiceTest</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">FreshJuice</span> <span class=\"variable\">juice</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FreshJuice</span>();</span><br><span class=\"line\">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-8-Java-关键字\"><a href=\"#1-8-Java-关键字\" class=\"headerlink\" title=\"1-8 Java 关键字\"></a>1-8 Java 关键字</h3><p><img src=\"/images/image-20240228195010033.png\" alt=\"image-20240228195010033\"></p>\n<h3 id=\"1-9-Java注释\"><a href=\"#1-9-Java注释\" class=\"headerlink\" title=\"1-9 Java注释\"></a>1-9 Java注释</h3><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 这是第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">    *它将打印Hello World</span></span><br><span class=\"line\"><span class=\"comment\">    * 这是一个多行注释的示例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 这是单行注释的示例</span></span><br><span class=\"line\">       <span class=\"comment\">/* 这个也是单行注释的示例 */</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-10-Java-空行\"><a href=\"#1-10-Java-空行\" class=\"headerlink\" title=\"1-10 Java 空行\"></a>1-10 Java 空行</h3><p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"1-11-继承\"><a href=\"#1-11-继承\" class=\"headerlink\" title=\"1-11 继承\"></a>1-11 继承</h3><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<hr>\n<h3 id=\"1-12-接口\"><a href=\"#1-12-接口\" class=\"headerlink\" title=\"1-12 接口\"></a>1-12 接口</h3><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h2 id=\"2，Java对象和类\"><a href=\"#2，Java对象和类\" class=\"headerlink\" title=\"2，Java对象和类\"></a>2，Java对象和类</h2><h3 id=\"2-1-Java中的对象\"><a href=\"#2-1-Java中的对象\" class=\"headerlink\" title=\"2-1 Java中的对象\"></a>2-1 Java中的对象</h3><p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p>\n<p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p>\n<p>对比现实对象和软件对象，它们之间十分相似。</p>\n<p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p>\n<p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p>\n<h3 id=\"2-2-Java中的类\"><a href=\"#2-2-Java中的类\" class=\"headerlink\" title=\"2-2 Java中的类\"></a>2-2 Java中的类</h3><p>类可以看成是创建Java对象的模板。</p>\n<p>通过下面一个简单的类来理解下Java中类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\">  String breed;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">barking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">sleeping</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个类可以包含以下类型变量：</p>\n<ul>\n<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>\n<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>\n<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li>\n</ul>\n<p>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</p>\n<hr>\n<h3 id=\"2-3-构造方法\"><a href=\"#2-3-构造方法\" class=\"headerlink\" title=\"2-3 构造方法\"></a>2-3 构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p>\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n<p>下面是一个构造方法示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-创建对象\"><a href=\"#2-4-创建对象\" class=\"headerlink\" title=\"2-4 创建对象\"></a>2-4 创建对象</h3><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：</p>\n<ul>\n<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>\n<li><strong>实例化</strong>：使用关键字new来创建一个对象。</li>\n<li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li>\n</ul>\n<p>下面是一个创建对象的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 下面的语句将创建一个Puppy对象</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，会打印出下面的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-访问实例变量和方法\"><a href=\"#2-5-访问实例变量和方法\" class=\"headerlink\" title=\"2-5 访问实例变量和方法\"></a>2-5 访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">referenceVariable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Constructor</span>();</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的变量 */</span></span><br><span class=\"line\">referenceVariable.variableName;</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的方法 */</span></span><br><span class=\"line\">referenceVariable.methodName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-实例\"><a href=\"#2-6-实例\" class=\"headerlink\" title=\"2-6 实例\"></a>2-6 实例</h3><p>下面的例子展示如何访问实例变量和调用成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> puppyAge;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">( <span class=\"type\">int</span> age )</span>&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">( )</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;小狗的年龄为 : &quot;</span> + puppyAge ); </span><br><span class=\"line\">       <span class=\"keyword\">return</span> puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 创建对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 通过方法来设定age */</span></span><br><span class=\"line\">      myPuppy.setAge( <span class=\"number\">2</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 调用另一个方法获取age */</span></span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      <span class=\"comment\">/*你也可以像下面这样访问成员变量 */</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;变量值 : &quot;</span> + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br><span class=\"line\">小狗的年龄为 : 2</span><br><span class=\"line\">变量值 : 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-源文件声明规则\"><a href=\"#2-7-源文件声明规则\" class=\"headerlink\" title=\"2-7 源文件声明规则\"></a>2-7 源文件声明规则</h3><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>\n<ul>\n<li>一个源文件中只能有一个public类</li>\n<li>一个源文件可以有多个非public类</li>\n<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>\n<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>\n<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>\n<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>\n</ul>\n<p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。</p>\n<p>除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p>\n<h3 id=\"2-8-Java包\"><a href=\"#2-8-Java包\" class=\"headerlink\" title=\"2-8 Java包\"></a>2-8 Java包</h3><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>\n<h3 id=\"2-9-Import语句\"><a href=\"#2-9-Import语句\" class=\"headerlink\" title=\"2-9 Import语句\"></a>2-9 Import语句</h3><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>\n<p>例如，下面的命令行将会命令编译器载入java_installation&#x2F;&#x2F;images&#x2F;io路径下的所有类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-一个简单的例子\"><a href=\"#2-10-一个简单的例子\" class=\"headerlink\" title=\"2-10 一个简单的例子\"></a>2-10 一个简单的例子</h3><p>在该例子中，我们创建两个类：<strong>Employee</strong> 和 <strong>EmployeeTest</strong>。</p>\n<p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p>\n<p>Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   String name;</span><br><span class=\"line\">   <span class=\"type\">int</span> age;</span><br><span class=\"line\">   String designation;</span><br><span class=\"line\">   <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">// Employee 类的构造器</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 设置age的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empAge</span><span class=\"params\">(<span class=\"type\">int</span> empAge)</span>&#123;</span><br><span class=\"line\">      age =  empAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置designation的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empDesignation</span><span class=\"params\">(String empDesig)</span>&#123;</span><br><span class=\"line\">      designation = empDesig;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置salary的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSalary)</span>&#123;</span><br><span class=\"line\">      salary = empSalary;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 打印信息 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字:&quot;</span>+ name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;年龄:&quot;</span> + age );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;职位:&quot;</span> + designation );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水:&quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p>\n<p>下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p>\n<p>将下面的代码保存在 EmployeeTest.java文件中。</p>\n<p><strong>EmployeeTest.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用构造器创建两个对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB1&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB2&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 调用这两个对象的成员方法</span></span><br><span class=\"line\">      empOne.empAge(<span class=\"number\">26</span>);</span><br><span class=\"line\">      empOne.empDesignation(<span class=\"string\">&quot;高级程序员&quot;</span>);</span><br><span class=\"line\">      empOne.empSalary(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"> </span><br><span class=\"line\">      empTwo.empAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">      empTwo.empDesignation(<span class=\"string\">&quot;菜鸟程序员&quot;</span>);</span><br><span class=\"line\">      empTwo.empSalary(<span class=\"number\">500</span>);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac EmployeeTest.java</span><br><span class=\"line\">$ java EmployeeTest </span><br><span class=\"line\">名字:RUNOOB1</span><br><span class=\"line\">年龄:<span class=\"number\">26</span></span><br><span class=\"line\">职位:高级程序员</span><br><span class=\"line\">薪水:<span class=\"number\">1000.0</span></span><br><span class=\"line\">名字:RUNOOB2</span><br><span class=\"line\">年龄:<span class=\"number\">21</span></span><br><span class=\"line\">职位:菜鸟程序员</span><br><span class=\"line\">薪水:<span class=\"number\">500.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，Java基本数据类型\"><a href=\"#3，Java基本数据类型\" class=\"headerlink\" title=\"3，Java基本数据类型\"></a>3，Java基本数据类型</h2><h3 id=\"3-1-内置数据类型\"><a href=\"#3-1-内置数据类型\" class=\"headerlink\" title=\"3-1 内置数据类型\"></a>3-1 内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\n<h4 id=\"3-1-1-byte：\"><a href=\"#3-1-1-byte：\" class=\"headerlink\" title=\"3-1-1 byte：\"></a>3-1-1 <strong>byte：</strong></h4><ul>\n<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-128（-2^7）</strong>；</li>\n<li>最大值是 <strong>127（2^7-1）</strong>；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\n<li>例子：byte a &#x3D; 100，byte b &#x3D; -50。</li>\n</ul>\n<h4 id=\"3-1-2-short：\"><a href=\"#3-1-2-short：\" class=\"headerlink\" title=\"3-1-2 short：\"></a>3-1-2 <strong>short：</strong></h4><ul>\n<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\n<li>最小值是 <strong>-32768（-2^15）</strong>；</li>\n<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>\n<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>例子：short s &#x3D; 1000，short r &#x3D; -20000。</li>\n</ul>\n<h4 id=\"3-1-3-int：\"><a href=\"#3-1-3-int：\" class=\"headerlink\" title=\"3-1-3 int：\"></a>3-1-3 <strong>int：</strong></h4><ul>\n<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>\n<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>\n<li>一般地整型变量默认为 int 类型；</li>\n<li>默认值是 <strong>0</strong> ；</li>\n<li>例子：int a &#x3D; 100000, int b &#x3D; -200000。</li>\n</ul>\n<h4 id=\"3-1-4-long：\"><a href=\"#3-1-4-long：\" class=\"headerlink\" title=\"3-1-4 long：\"></a>3-1-4 <strong>long：</strong></h4><ul>\n<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>\n<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>\n<li>这种类型主要使用在需要比较大整数的系统上；</li>\n<li>默认值是 <strong>0L</strong>；</li>\n<li>例子： long a &#x3D; 100000L，Long b &#x3D; -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>\n</ul>\n<h4 id=\"3-1-5-float：\"><a href=\"#3-1-5-float：\" class=\"headerlink\" title=\"3-1-5 float：\"></a>3-1-5 <strong>float：</strong></h4><ul>\n<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\n<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\n<li>默认值是 <strong>0.0f</strong>；</li>\n<li>浮点数不能用来表示精确的值，如货币；</li>\n<li>例子：float f1 &#x3D; 234.5f。</li>\n</ul>\n<h4 id=\"3-1-6-double：\"><a href=\"#3-1-6-double：\" class=\"headerlink\" title=\"3-1-6 double：\"></a>3-1-6 <strong>double：</strong></h4><ul>\n<li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li>\n<li>浮点数的默认类型为double类型；</li>\n<li>double类型同样不能表示精确的值，如货币；</li>\n<li>默认值是 <strong>0.0d</strong>；</li>\n<li>例子：double d1 &#x3D; 123.4。</li>\n</ul>\n<h4 id=\"3-1-7-boolean：\"><a href=\"#3-1-7-boolean：\" class=\"headerlink\" title=\"3-1-7 boolean：\"></a>3-1-7 <strong>boolean：</strong></h4><ul>\n<li>boolean数据类型表示一位的信息；</li>\n<li>只有两个取值：true 和 false；</li>\n<li>这种类型只作为一种标志来记录 true&#x2F;false 情况；</li>\n<li>默认值是 <strong>false</strong>；</li>\n<li>例子：boolean one &#x3D; true。</li>\n</ul>\n<h4 id=\"3-1-8-char：\"><a href=\"#3-1-8-char：\" class=\"headerlink\" title=\"3-1-8 char：\"></a>3-1-8 <strong>char：</strong></h4><ul>\n<li>char类型是一个单一的 16 位 Unicode 字符；</li>\n<li>最小值是 <strong>\\u0000</strong>（即为0）；</li>\n<li>最大值是 <strong>\\uffff</strong>（即为65,535）；</li>\n<li>char 数据类型可以储存任何字符；</li>\n<li>例子：char letter &#x3D; ‘A’;。</li>\n</ul>\n<h3 id=\"3-2-实例\"><a href=\"#3-2-实例\" class=\"headerlink\" title=\"3-2 实例\"></a>3-2 实例</h3><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveTypeTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译以上代码输出结果如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"type\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n\n<p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 &#x3D;3140，3.14E-3 就是 3.14 x 10-3 &#x3D;0.00314。</p>\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\n<h3 id=\"3-3-类型默认值\"><a href=\"#3-3-类型默认值\" class=\"headerlink\" title=\"3-3 类型默认值\"></a>3-3 类型默认值</h3><p>下表列出了 Java 各个类型的默认值：</p>\n<p><img src=\"/images/image-20240228200611781.png\" alt=\"image-20240228200611781\"></p>\n<h3 id=\"3-4-实例\"><a href=\"#3-4-实例\" class=\"headerlink\" title=\"3-4 实例\"></a>3-4 实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> bool;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">byte</span> by;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">short</span> sh;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String str;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bool :&quot;</span> + bool);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Byte :&quot;</span> + by);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Character:&quot;</span> + ch);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Double :&quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Float :&quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Integer :&quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Long :&quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Short :&quot;</span> + sh);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String :&quot;</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool     :<span class=\"literal\">false</span></span><br><span class=\"line\">Byte     :<span class=\"number\">0</span></span><br><span class=\"line\">Character:</span><br><span class=\"line\">Double   :<span class=\"number\">0.0</span></span><br><span class=\"line\">Float    :<span class=\"number\">0.0</span></span><br><span class=\"line\">Integer  :<span class=\"number\">0</span></span><br><span class=\"line\">Long     :<span class=\"number\">0</span></span><br><span class=\"line\">Short    :<span class=\"number\">0</span></span><br><span class=\"line\">String   :<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-引用类型\"><a href=\"#3-5-引用类型\" class=\"headerlink\" title=\"3-5 引用类型\"></a>3-5 引用类型</h3><ul>\n<li>在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用任何与之兼容的类型。</li>\n<li>例子：Site site &#x3D; new Site(“Runoob”)。</li>\n</ul>\n<h3 id=\"3-6-Java-常量\"><a href=\"#3-6-Java-常量\" class=\"headerlink\" title=\"3-6 Java 常量\"></a>3-6 Java 常量</h3><p>常量在程序运行时是不能被修改的。</p>\n<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.1415927</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p>\n<p>字面量可以赋给任何内置类型的变量。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">68</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p>\n<p>当使用常量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">decimal</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">octal</span> <span class=\"operator\">=</span> <span class=\"number\">0144</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hexa</span> <span class=\"operator\">=</span>  <span class=\"number\">0x64</span>;</span><br></pre></td></tr></table></figure>\n\n<p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;two\\nlines&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0001&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\u0001&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持一些特殊的转义字符序列。</p>\n<p><img src=\"/images/image-20240228200803273.png\" alt=\"image-20240228200803273\"></p>\n<h3 id=\"3-7-自动类型转换\"><a href=\"#3-7-自动类型转换\" class=\"headerlink\" title=\"3-7 自动类型转换\"></a>3-7 自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p>\n<p>转换从低级到高级。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">低  ------------------------------------&gt;  高</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span>—&gt; <span class=\"type\">int</span> —&gt; <span class=\"type\">long</span>—&gt; <span class=\"type\">float</span> —&gt; <span class=\"type\">double</span> </span><br></pre></td></tr></table></figure>\n\n<p>数据类型转换必须满足如下规则：</p>\n<ul>\n<li><p>\\1. 不能对boolean类型进行类型转换。</p>\n</li>\n<li><p>\\2. 不能把对象类型转换成不相关类的对象。</p>\n</li>\n<li><p>\\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\n</li>\n<li><p>\\4. 转换过程中可能导致溢出或损失精度，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">128</span>;   </span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i;</span><br></pre></td></tr></table></figure>\n\n<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>\n</li>\n<li><p>\\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"type\">int</span>)<span class=\"number\">23.7</span> == <span class=\"number\">23</span>;        </span><br><span class=\"line\">(<span class=\"type\">int</span>)-<span class=\"number\">45.89f</span> == -<span class=\"number\">45</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>自动类型转换</strong></p>\n<p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZiDongLeiZhuan</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=<span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> c1;<span class=\"comment\">//char自动类型转换为int</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> c2+<span class=\"number\">1</span>;<span class=\"comment\">//char 类型和 int 类型计算</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char自动类型转换为int后的值等于97</span><br><span class=\"line\">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure>\n\n<p>**解析：**c1 的值为字符 <strong>a</strong> ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 <strong>i2&#x3D;65+1&#x3D;66</strong>。</p>\n<h3 id=\"3-8-强制类型转换\"><a href=\"#3-8-强制类型转换\" class=\"headerlink\" title=\"3-8 强制类型转换\"></a>3-8 强制类型转换</h3><ul>\n<li>\\1. 条件是转换的数据类型必须是兼容的。</li>\n<li>\\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QiangZhiZhuanHuan</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i1;<span class=\"comment\">//强制类型转换为byte</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-9-隐含强制类型转换\"><a href=\"#3-9-隐含强制类型转换\" class=\"headerlink\" title=\"3-9  隐含强制类型转换\"></a>3-9  隐含强制类型转换</h3><ul>\n<li>\\1. 整数的默认类型是 int。</li>\n<li>\\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li>\n</ul>\n<p>这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。</p>\n<h2 id=\"4，Java变量类型\"><a href=\"#4，Java变量类型\" class=\"headerlink\" title=\"4，Java变量类型\"></a>4，Java变量类型</h2><ul>\n<li><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n</li>\n<li><p>type identifier [ &#x3D; value][, identifier [&#x3D; value] …] ;</p>\n</li>\n<li><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>\n</li>\n</ul>\n<p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, b, c;         <span class=\"comment\">// 声明三个int型整数：a、 b、c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>, e = <span class=\"number\">4</span>, f = <span class=\"number\">5</span>; <span class=\"comment\">// 声明三个整数并赋予初值</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"number\">22</span>;         <span class=\"comment\">// 声明并初始化 z</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;runoob&quot;</span>;  <span class=\"comment\">// 声明并初始化字符串 s</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>; <span class=\"comment\">// 声明了双精度浮点型变量 pi</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;        <span class=\"comment\">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Variable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Java局部变量\"><a href=\"#4-1-Java局部变量\" class=\"headerlink\" title=\"4-1 Java局部变量\"></a>4-1 Java局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<h4 id=\"4-1-1-实例-1\"><a href=\"#4-1-1-实例-1\" class=\"headerlink\" title=\"4-1-1 实例 1\"></a>4-1-1 <strong>实例 1</strong></h4><p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的年龄是: 7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-实例-2\"><a href=\"#4-1-2-实例-2\" class=\"headerlink\" title=\"4-1-2 实例 2\"></a>4-1-2 实例 2</h4><p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> age;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是 : &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java:<span class=\"number\">4</span>:variable number might not have been <span class=\"type\">initialized</span></span><br><span class=\"line\"><span class=\"variable\">age</span> <span class=\"operator\">=</span> age + <span class=\"number\">7</span>;</span><br><span class=\"line\">         ^</span><br><span class=\"line\"><span class=\"number\">1</span> error</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-实例变量\"><a href=\"#4-2-实例变量\" class=\"headerlink\" title=\"4-2 实例变量\"></a>4-2 实例变量</h3><ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个实例变量对子类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 私有变量，仅在该类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">//在构造器中对name赋值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span> <span class=\"params\">(String empName)</span>&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设定salary的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSal)</span>&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"comment\">// 打印信息</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmp</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字 : &quot;</span> + name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水 : &quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB&quot;</span>);</span><br><span class=\"line\">      empOne.setSalary(<span class=\"number\">1000.0</span>);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Employee.java </span><br><span class=\"line\">$ java Employee</span><br><span class=\"line\">名字 : RUNOOB</span><br><span class=\"line\">薪水 : 1000.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-类变量（静态变量）\"><a href=\"#4-3-类变量（静态变量）\" class=\"headerlink\" title=\"4-3 类变量（静态变量）\"></a>4-3 类变量（静态变量）</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用。常量是指声明为public&#x2F;private，final和static类型的变量。常量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>\n<li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>实例：</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//salary是静态的私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">// DEPARTMENT是一个常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEPARTMENT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;开发人员&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    salary = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        System.out.println(DEPARTMENT+<span class=\"string\">&quot;平均工资:&quot;</span>+salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>\n<p>本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。</p>\n<h2 id=\"5，Java修饰符\"><a href=\"#5，Java修饰符\" class=\"headerlink\" title=\"5，Java修饰符\"></a>5，Java修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p>\n<ul>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ul>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> myFlag;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">weeks</span> <span class=\"operator\">=</span> <span class=\"number\">9.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-访问控制修饰符\"><a href=\"#5-1-访问控制修饰符\" class=\"headerlink\" title=\"5-1 访问控制修饰符\"></a>5-1 访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p>我们可以通过以下表来说明访问权限：</p>\n<p><img src=\"/images/image-20240228202210130.png\" alt=\"image-20240228202210130\"></p>\n<p><strong>默认访问修饰符-不使用任何关键字</strong></p>\n<p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p>\n<p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">version</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1.5.1&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">processOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-私有访问修饰符-private\"><a href=\"#5-2-私有访问修饰符-private\" class=\"headerlink\" title=\"5-2 私有访问修饰符-private\"></a>5-2 私有访问修饰符-private</h3><p>私有访问修饰符是最严格的访问级别，所以被声明为 <strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 <strong>private</strong>。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>\n<p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p>\n<p>下面的类使用了私有访问修饰符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String format;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFormat</span><span class=\"params\">(String format)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p>\n<h3 id=\"5-3-公有访问修饰符-public\"><a href=\"#5-3-公有访问修饰符-public\" class=\"headerlink\" title=\"5-3 公有访问修饰符-public\"></a>5-3 公有访问修饰符-public</h3><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p>\n<p>以下函数使用了公有访问控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>\n<h3 id=\"5-4-受保护的访问修饰符-protected\"><a href=\"#5-4-受保护的访问修饰符-protected\" class=\"headerlink\" title=\"5-4 受保护的访问修饰符-protected\"></a>5-4 受保护的访问修饰符-protected</h3><p>protected 需要从以下两个点来分析说明：</p>\n<ul>\n<li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li>\n<li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li>\n</ul>\n<p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p>\n<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StreamingAudioPlayer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。</p>\n<p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p>\n<p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p>\n<h3 id=\"5-5-访问控制和继承\"><a href=\"#5-5-访问控制和继承\" class=\"headerlink\" title=\"5-5 访问控制和继承\"></a>5-5 访问控制和继承</h3><p>请注意以下方法继承的规则：</p>\n<ul>\n<li>父类中声明为 public 的方法在子类中也必须为 public。</li>\n<li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li>\n<li>父类中声明为 private 的方法，不能够被继承。</li>\n</ul>\n<h3 id=\"5-6-非访问修饰符\"><a href=\"#5-6-非访问修饰符\" class=\"headerlink\" title=\"5-6 非访问修饰符\"></a>5-6 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p>\n<p>static 修饰符，用来修饰类方法和类变量。</p>\n<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\n<h4 id=\"5-6-1-static-修饰符\"><a href=\"#5-6-1-static-修饰符\" class=\"headerlink\" title=\"5-6-1 static 修饰符\"></a>5-6-1 static 修饰符</h4><ul>\n<li><p><strong>静态变量：</strong></p>\n<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n</li>\n<li><p><strong>静态方法：</strong></p>\n<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n</li>\n</ul>\n<p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p>\n<p>如下例所示，static修饰符用来创建类方法和类变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstanceCounter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">numInstances</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Starting with &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; ++i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceCounter</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Created &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例运行编辑结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting with <span class=\"number\">0</span> instances</span><br><span class=\"line\">Created <span class=\"number\">500</span> instances</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-final-修饰符\"><a href=\"#5-6-2-final-修饰符\" class=\"headerlink\" title=\"5-6-2 final 修饰符\"></a>5-6-2 final 修饰符</h4><p><strong>final 变量：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下面是声明常量的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TITLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Manager&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     value = <span class=\"number\">12</span>; <span class=\"comment\">//将输出一个错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>inal 方法</strong></p>\n<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>\n<p>如下所示，使用 final 修饰符声明方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>final 类</strong></p>\n<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 类体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-abstract-修饰符\"><a href=\"#5-7-abstract-修饰符\" class=\"headerlink\" title=\"5-7 abstract 修饰符\"></a>5-7 abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Caravan</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> price;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String model;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String year;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">goFast</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeColor</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>抽象方法</strong></p>\n<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>\n<p>抽象方法不能被声明成 final 和 static。</p>\n<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>\n<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>\n<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//实现抽象方法</span></span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          .........</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"synchronized-修饰符\"><a href=\"#synchronized-修饰符\" class=\"headerlink\" title=\"synchronized 修饰符\"></a>synchronized 修饰符</h3><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDetails</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"transient-修饰符\"><a href=\"#transient-修饰符\" class=\"headerlink\" title=\"transient 修饰符\"></a>transient 修饰符</h3><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>\n<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">limit</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;   <span class=\"comment\">// 不会持久化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> b; <span class=\"comment\">// 持久化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"volatile-修饰符\"><a href=\"#volatile-修饰符\" class=\"headerlink\" title=\"volatile 修饰符\"></a>volatile 修饰符</h3><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> implements <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private volatile boolean active;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (active) <span class=\"comment\">// 第一行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">false</span>; <span class=\"comment\">// 第二行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 *<strong>第一行*</strong> 中缓冲区的 active 值被使用，那么在 *<strong>第二行*</strong> 的 active 值为 false 时循环不会停止。</p>\n<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>\n<h2 id=\"6，Java运算符\"><a href=\"#6，Java运算符\" class=\"headerlink\" title=\"6，Java运算符\"></a>6，Java运算符</h2><h3 id=\"6-1-算术运算符\"><a href=\"#6-1-算术运算符\" class=\"headerlink\" title=\"6-1 算术运算符\"></a>6-1 算术运算符</h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p>\n<p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228212912288.png\" alt=\"image-20240228212912288\"></p>\n<p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class=\"line\">     <span class=\"comment\">// 查看  d++ 与 ++d 的不同</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a + b = <span class=\"number\">30</span></span><br><span class=\"line\">a - b = -<span class=\"number\">10</span></span><br><span class=\"line\">a * b = <span class=\"number\">200</span></span><br><span class=\"line\">b / a = <span class=\"number\">2</span></span><br><span class=\"line\">b % a = <span class=\"number\">0</span></span><br><span class=\"line\">c % a = <span class=\"number\">5</span></span><br><span class=\"line\">a++   = <span class=\"number\">10</span></span><br><span class=\"line\">a--   = <span class=\"number\">11</span></span><br><span class=\"line\">d++   = <span class=\"number\">25</span></span><br><span class=\"line\">++d   = <span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-自增自减运算符\"><a href=\"#6-2-自增自减运算符\" class=\"headerlink\" title=\"6-2 自增自减运算符\"></a>6-2 自增自减运算符</h3><p><strong>1、自增（++）自减（–）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> ++a;<span class=\"comment\">//自增运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> --c;<span class=\"comment\">//自减运算</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进行自增运算后的值等于4</span><br><span class=\"line\">进行自减运算后的值等于2</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<ul>\n<li>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</li>\n<li>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</li>\n</ul>\n<p><strong>2、前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p>\n<p><strong>3、后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*++a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*b++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class=\"string\">&quot;,x=&quot;</span>+x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class=\"string\">&quot;,y=&quot;</span>+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自增运算符前缀运算后a=6，x=12</span><br><span class=\"line\">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-关系运算符\"><a href=\"#6-3-关系运算符\" class=\"headerlink\" title=\"6-3 关系运算符\"></a>6-3 关系运算符</h3><p>下表为Java支持的关系运算符</p>\n<p>表格中的实例整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228213115946.png\" alt=\"image-20240228213115946\"></p>\n<p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a == b = <span class=\"literal\">false</span></span><br><span class=\"line\">a != b = <span class=\"literal\">true</span></span><br><span class=\"line\">a &gt; b = <span class=\"literal\">false</span></span><br><span class=\"line\">a &lt; b = <span class=\"literal\">true</span></span><br><span class=\"line\">b &gt;= a = <span class=\"literal\">true</span></span><br><span class=\"line\">b &lt;= a = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-位运算符\"><a href=\"#6-4-位运算符\" class=\"headerlink\" title=\"6-4 位运算符\"></a>6-4 位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>\n<p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0011</span> <span class=\"number\">1100</span></span><br><span class=\"line\">B = <span class=\"number\">0000</span> <span class=\"number\">1101</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\">A&amp;B = <span class=\"number\">0000</span> <span class=\"number\">1100</span></span><br><span class=\"line\">A | B = <span class=\"number\">0011</span> <span class=\"number\">1101</span></span><br><span class=\"line\">A ^ B = <span class=\"number\">0011</span> <span class=\"number\">0001</span></span><br><span class=\"line\">~A= <span class=\"number\">1100</span> <span class=\"number\">0011</span></span><br></pre></td></tr></table></figure>\n\n<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>\n<p><img src=\"/images/image-20240228213253912.png\" alt=\"image-20240228213253912\"></p>\n<p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">60</span>; <span class=\"comment\">/* 60 = 0011 1100 */</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>; <span class=\"comment\">/* 13 = 0000 1101 */</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">     c = a &amp; b;       <span class=\"comment\">/* 12 = 0000 1100 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp; b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a | b;       <span class=\"comment\">/* 61 = 0011 1101 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a | b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a ^ b;       <span class=\"comment\">/* 49 = 0011 0001 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a ^ b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = ~a;          <span class=\"comment\">/*-61 = 1100 0011 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;~a = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &lt;&lt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 240 = 1111 0000 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class=\"line\">  </span><br><span class=\"line\">     c = a &gt;&gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 0000 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp; b = 12</span><br><span class=\"line\">a | b = 61</span><br><span class=\"line\">a ^ b = 49</span><br><span class=\"line\">~a = -61</span><br><span class=\"line\">a &lt;&lt; 2 = 240</span><br><span class=\"line\">a &gt;&gt; 2  = 15</span><br><span class=\"line\">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-逻辑运算符\"><a href=\"#6-5-逻辑运算符\" class=\"headerlink\" title=\"6-5 逻辑运算符\"></a>6-5 逻辑运算符</h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>\n<p><img src=\"/images/image-20240228213402353.png\" alt=\"image-20240228213402353\"></p>\n<p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp;&amp; b = false</span><br><span class=\"line\">a || b = true</span><br><span class=\"line\">!(a &amp;&amp; b) = true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-6-短路逻辑运算符\"><a href=\"#6-6-短路逻辑运算符\" class=\"headerlink\" title=\"6-6 短路逻辑运算符\"></a>6-6 短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LuoJi</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (a&lt;<span class=\"number\">4</span>)&amp;&amp;(a++&lt;<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a的结果为&quot;</span>+a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用短路逻辑运算符的结果为false</span><br><span class=\"line\">a的结果为5</span><br></pre></td></tr></table></figure>\n\n<p><strong>解析：</strong> <em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p>\n<h3 id=\"6-7-赋值运算符\"><a href=\"#6-7-赋值运算符\" class=\"headerlink\" title=\"6-7 赋值运算符\"></a>6-7 赋值运算符</h3><p>下面是Java语言支持的赋值运算符：</p>\n<p><img src=\"/images/image-20240228213543244.png\" alt=\"image-20240228213543244\"></p>\n<p>面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c = a + b = &quot;</span> + c );</span><br><span class=\"line\">        c += a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c += a  = &quot;</span> + c );</span><br><span class=\"line\">        c -= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c -= a = &quot;</span> + c );</span><br><span class=\"line\">        c *= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c *= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c /= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c /= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c %= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c %= a  = &quot;</span> + c );</span><br><span class=\"line\">        c &lt;&lt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &amp;= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class=\"line\">        c ^= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c ^= a   = &quot;</span> + c );</span><br><span class=\"line\">        c |= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c |= a   = &quot;</span> + c );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = a + b = 30</span><br><span class=\"line\">c += a  = 40</span><br><span class=\"line\">c -= a = 30</span><br><span class=\"line\">c *= a = 300</span><br><span class=\"line\">c /= a = 1</span><br><span class=\"line\">c %= a  = 5</span><br><span class=\"line\">c &lt;&lt;= 2 = 20</span><br><span class=\"line\">c &gt;&gt;= 2 = 5</span><br><span class=\"line\">c &gt;&gt;= 2 = 1</span><br><span class=\"line\">c &amp;= a  = 0</span><br><span class=\"line\">c ^= a   = 10</span><br><span class=\"line\">c |= a   = 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-8-条件运算符（-）\"><a href=\"#6-8-条件运算符（-）\" class=\"headerlink\" title=\"6-8 条件运算符（?:）\"></a>6-8 条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">variable</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> (expression) ? value <span class=\"keyword\">if</span> <span class=\"literal\">true</span> : value <span class=\"keyword\">if</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a , b;</span><br><span class=\"line\">      a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">1</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> +  b );</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">10</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> + b );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of b is : 30</span><br><span class=\"line\">Value of b is : 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-9-instanceof-运算符\"><a href=\"#6-9-instanceof-运算符\" class=\"headerlink\" title=\"6-9 instanceof 运算符\"></a>6-9 instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure>\n\n<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = &quot;James&quot;;</span><br><span class=\"line\">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>\n\n<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Vehicle</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>  a <span class=\"keyword\">instanceof</span> Car;</span><br><span class=\"line\">      System.out.println( result);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-10-Java运算符优先级\"><a href=\"#6-10-Java运算符优先级\" class=\"headerlink\" title=\"6-10 Java运算符优先级\"></a>6-10 Java运算符优先级</h3><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>\n<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>\n<p>再如，x &#x3D; 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>\n<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>\n<p><img src=\"/images/image-20240228213815636.png\" alt=\"image-20240228213815636\"></p>\n<h2 id=\"7，Java循环结构\"><a href=\"#7，Java循环结构\" class=\"headerlink\" title=\"7，Java循环结构\"></a>7，Java循环结构</h2><h3 id=\"7-1-while-循环\"><a href=\"#7-1-while-循环\" class=\"headerlink\" title=\"7-1 while 循环\"></a>7-1 while 循环</h3><p>while是最基本的循环，它的结构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( 布尔表达式 ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要布尔表达式为 true，循环就会一直执行下去。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> ) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-do…while-循环\"><a href=\"#7-2-do…while-循环\" class=\"headerlink\" title=\"7-2 do…while 循环\"></a>7-2 do…while 循环</h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\n<p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-for循环\"><a href=\"#7-3-for循环\" class=\"headerlink\" title=\"7-3 for循环\"></a>7-3 for循环</h3><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>\n<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 for 循环有以下几点说明：</p>\n<ul>\n<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\n<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\n<li>执行一次循环后，更新循环控制变量。</li>\n<li>再次检测布尔表达式。循环执行上面的过程。</li>\n</ul>\n<p>实例</p>\n<p><strong>Test.java 文件代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; x &lt; <span class=\"number\">20</span>; x = x+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : 10</span><br><span class=\"line\">value of x : 11</span><br><span class=\"line\">value of x : 12</span><br><span class=\"line\">value of x : 13</span><br><span class=\"line\">value of x : 14</span><br><span class=\"line\">value of x : 15</span><br><span class=\"line\">value of x : 16</span><br><span class=\"line\">value of x : 17</span><br><span class=\"line\">value of x : 18</span><br><span class=\"line\">value of x : 19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-Java-增强-for-循环\"><a href=\"#7-4-Java-增强-for-循环\" class=\"headerlink\" title=\"7-4 Java 增强 for 循环\"></a>7-4 Java 增强 for 循环</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句 : 表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码句子</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers )&#123;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      String [] names =&#123;<span class=\"string\">&quot;James&quot;</span>, <span class=\"string\">&quot;Larry&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lacy&quot;</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( String name : names ) &#123;</span><br><span class=\"line\">         System.out.print( name );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,</span><br><span class=\"line\">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5-break-关键字\"><a href=\"#7-5-break-关键字\" class=\"headerlink\" title=\"7-5 break 关键字\"></a>7-5 break 关键字</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\n<p>语法</p>\n<p>break 的用法很简单，就是循环结构中的一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// x 等于 30 时跳出循环</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-continue-关键字\"><a href=\"#7-6-continue-关键字\" class=\"headerlink\" title=\"7-6 continue 关键字\"></a>7-6 continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\n<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\n<p>语法</p>\n<p>continue 就是循环体中一条简单的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8，Java条件语句\"><a href=\"#8，Java条件语句\" class=\"headerlink\" title=\"8，Java条件语句\"></a>8，Java条件语句</h2><h3 id=\"8-1-if…else语句\"><a href=\"#8-1-if…else语句\" class=\"headerlink\" title=\"8-1 if…else语句\"></a>8-1 if…else语句</h3><p>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</p>\n<p>语法</p>\n<p>if…else 的用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为true</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x &lt; <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 if 语句&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是 else 语句</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-if…else-if…else-语句\"><a href=\"#8-2-if…else-if…else-语句\" class=\"headerlink\" title=\"8-2 if…else if…else 语句\"></a>8-2 if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p>\n<p>使用 if，else if，else 语句的时候，需要注意下面几点：</p>\n<ul>\n<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>\n<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>\n<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>if…else 语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 3的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果以上布尔表达式都不为true执行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 10&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 20&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 30&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of X is 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-嵌套的-if…else-语句\"><a href=\"#8-3-嵌套的-if…else-语句\" class=\"headerlink\" title=\"8-3 嵌套的 if…else 语句\"></a>8-3 嵌套的 if…else 语句</h3><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p>\n<p><strong>语法</strong></p>\n<p>嵌套的 if…else 语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">////如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">////如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像 if 语句一样嵌套 else if…else。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( y == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">             System.out.print(<span class=\"string\">&quot;X = 30 and Y = 10&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X = <span class=\"number\">30</span> <span class=\"type\">and</span> <span class=\"variable\">Y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9，Java-switch-case-语句\"><a href=\"#9，Java-switch-case-语句\" class=\"headerlink\" title=\"9，Java switch case 语句\"></a>9，Java switch case 语句</h2><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p>\n<p><strong>语法</strong></p>\n<p>switch case 语句语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch case 语句有如下规则：</p>\n<ul>\n<li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li>\n<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li>\n<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>\n<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li>\n<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li>\n<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>\n</ul>\n<p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//char grade = args[0].charAt(0);</span></span><br><span class=\"line\">      <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀&quot;</span>); </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你需要再努力努力&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;未知等级&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;你的等级是 &quot;</span> + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">良好</span><br><span class=\"line\">你的等级是 C</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;3&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10，Java-Number-Math-类\"><a href=\"#10，Java-Number-Math-类\" class=\"headerlink\" title=\"10，Java Number &amp; Math 类\"></a>10，Java Number &amp; Math 类</h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13.65f</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0x4a</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>\n<p>所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。</p>\n<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>\n<p>下面是一个使用 Integer 对象的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Integer</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      x =  x + <span class=\"number\">10</span>;</span><br><span class=\"line\">      System.out.println(x); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n\n<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>\n<h3 id=\"10-1-Java-Math-类\"><a href=\"#10-1-Java-Math-类\" class=\"headerlink\" title=\"10-1 Java Math 类\"></a>10-1 Java Math 类</h3><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>\n<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String []args)</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class=\"number\">0</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class=\"number\">3</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1的反正切值： &quot;</span> + Math.atan(<span class=\"number\">1</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(Math.PI);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">90</span> 度的正弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>度的余弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">60</span>度的正切值：<span class=\"number\">1.7320508075688767</span></span><br><span class=\"line\"><span class=\"number\">1</span>的反正切值： <span class=\"number\">0.7853981633974483</span></span><br><span class=\"line\">π/<span class=\"number\">2</span>的角度值：<span class=\"number\">90.0</span></span><br><span class=\"line\"><span class=\"number\">3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-Number-Math-类方法\"><a href=\"#10-2-Number-Math-类方法\" class=\"headerlink\" title=\"10-2 Number &amp; Math 类方法\"></a>10-2 Number &amp; Math 类方法</h3><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p>\n<p><img src=\"/images/image-20240228220453132.png\" alt=\"image-20240228220453132\"></p>\n<h3 id=\"10-3-Math-的-floor-round-和-ceil-方法实例比较\"><a href=\"#10-3-Math-的-floor-round-和-ceil-方法实例比较\" class=\"headerlink\" title=\"10-3 Math 的 floor,round 和 ceil 方法实例比较\"></a>10-3 Math 的 floor,round 和 ceil 方法实例比较</h3><p><img src=\"/images/image-20240228220635826.png\" alt=\"image-20240228220635826\"></p>\n<p><strong>floor,round 和 ceil 实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"type\">double</span>[] nums = &#123; <span class=\"number\">1.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">1.6</span>, -<span class=\"number\">1.4</span>, -<span class=\"number\">1.5</span>, -<span class=\"number\">1.6</span> &#125;;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">double</span> num : nums) &#123;   </span><br><span class=\"line\">      test(num);   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">double</span> num)</span> &#123;   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.floor(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.floor(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.round(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.round(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.ceil(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.ceil(num));   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.floor(<span class=\"number\">1.4</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.4</span>)=<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.4</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.5</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.5</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.5</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.6</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.6</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.6</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.4</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.5</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.6</span>)=-<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11，Java-Character-类\"><a href=\"#11，Java-Character-类\" class=\"headerlink\" title=\"11，Java Character 类\"></a>11，Java Character 类</h2><p>Character 类用于对单个字符进行操作。</p>\n<p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Unicode 字符表示形式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">uniChar</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u039A&#x27;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p>\n<p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在某些情况下，Java编译器会自动创建一个Character对象。</p>\n<p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span></span><br><span class=\"line\"><span class=\"comment\">// 返回拆箱的值到 &#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> test(<span class=\"string\">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-转义序列\"><a href=\"#11-1-转义序列\" class=\"headerlink\" title=\"11-1 转义序列\"></a>11-1 转义序列</h3><p>前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p>\n<p>下面列表展示了Java的转义序列：</p>\n<p><img src=\"/images/image-20240228220904427.png\" alt=\"image-20240228220904427\"></p>\n<p><strong>实例</strong></p>\n<p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。</p>\n<p>以下实例转义双引号并输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问\\&quot;菜鸟教程!\\&quot;&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问&quot;菜鸟教程!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-Character-方法\"><a href=\"#11-2-Character-方法\" class=\"headerlink\" title=\"11-2 Character 方法\"></a>11-2 Character 方法</h3><p>下面是Character类的方法：</p>\n<p><img src=\"/images/image-20240228220959034.png\" alt=\"image-20240228220959034\"></p>\n<h2 id=\"12，Java-String-类\"><a href=\"#12，Java-String-类\" class=\"headerlink\" title=\"12，Java String 类\"></a>12，Java String 类</h2><h3 id=\"12-1-创建字符串\"><a href=\"#12-1-创建字符串\" class=\"headerlink\" title=\"12-1 创建字符串\"></a>12-1 创建字符串</h3><p>创建字符串最简单的方式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">greeting</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中遇到字符串常量时，这里的值是 “<strong>菜鸟教程</strong>“”，编译器会使用该值创建一个 String 对象。</p>\n<p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p>\n<p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] helloArray = &#123; <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">helloString</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(helloArray);  </span><br><span class=\"line\">      System.out.println( helloString );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n\n<p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p>\n<p>如果需要对字符串做很多修改，那么应该选择使用 <a href=\"http://it028.com/java-stringbuffer.html\">StringBuffer &amp; StringBuilder 类</a>。</p>\n<h3 id=\"12-2-字符串长度\"><a href=\"#12-2-字符串长度\" class=\"headerlink\" title=\"12-2 字符串长度\"></a>12-2 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。</p>\n<p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>\n<p>下面的代码执行后，len 变量等于 14:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">site</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www.runoob.com&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> site.length();</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;菜鸟教程网址长度 : &quot;</span> + len );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程网址长度 : 14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-连接字符串\"><a href=\"#12-3-连接字符串\" class=\"headerlink\" title=\"12-3 连接字符串\"></a>12-3 连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>\n<p>string1.concat(string2);</p>\n<p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;我的名字是 &quot;.concat(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>更常用的是使用’+’操作符来连接字符串，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello,&quot; + &quot; runoob&quot; + &quot;!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, runoob!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;     </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程网址：&quot;</span>;     </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1、&quot;</span> + string1 + <span class=\"string\">&quot;www.runoob.com&quot;</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、菜鸟教程网址：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-4-创建格式化字符串\"><a href=\"#12-4-创建格式化字符串\" class=\"headerlink\" title=\"12-4 创建格式化字符串\"></a>12-4 创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>\n<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>\n<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>\n<p>如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printf(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>你也可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fs;</span><br><span class=\"line\">fs = String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-5-String-方法\"><a href=\"#12-5-String-方法\" class=\"headerlink\" title=\"12-5 String 方法\"></a>12-5 String 方法</h3><p>下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm(‘<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>‘) 文档:</p>\n<p><img src=\"/images/image-20240228221437713.png\" alt=\"image-20240228221437713\"></p>\n<h2 id=\"13，Java-StringBuffer-和-StringBuilder-类\"><a href=\"#13，Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"13，Java StringBuffer 和 StringBuilder 类\"></a>13，Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(<span class=\"string\">&quot;菜鸟教程官网：&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;www&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.runoob&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.com&quot;</span>);</span><br><span class=\"line\">    System.out.println(sBuffer);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程官网：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-1-StringBuffer-方法\"><a href=\"#13-1-StringBuffer-方法\" class=\"headerlink\" title=\"13-1 StringBuffer 方法\"></a>13-1 StringBuffer 方法</h3><p>以下是 StringBuffer 类支持的主要方法</p>\n<p><img src=\"/images/image-20240228221542960.png\" alt=\"image-20240228221542960\"></p>\n<p>下面的列表里的方法和 String 类的方法类似：</p>\n<p><img src=\"/images/image-20240228221620605.png\" alt=\"image-20240228221620605\"></p>\n<h2 id=\"14，Java数组\"><a href=\"#14，Java数组\" class=\"headerlink\" title=\"14，Java数组\"></a>14，Java数组</h2><h3 id=\"14-1-声明数组变量\"><a href=\"#14-1-声明数组变量\" class=\"headerlink\" title=\"14-1 声明数组变量\"></a>14-1 声明数组变量</h3><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;   <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\">dataType arrayRefVar[];  <span class=\"comment\">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C&#x2F;C++ 语言 ，在Java中采用是为了让 C&#x2F;C++ 程序员能够快速理解java语言。</p>\n<p>下面是这两种语法的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span>[] myList;         <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">double</span> myList[];         <span class=\"comment\">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-创建数组\"><a href=\"#14-2-创建数组\" class=\"headerlink\" title=\"14-2 创建数组\"></a>14-2 创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>另外，你还可以使用如下的方式创建数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p><strong>实例</strong></p>\n<p>下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestArray.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 定义数组</span></span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[size];</span><br><span class=\"line\">      myList[<span class=\"number\">0</span>] = <span class=\"number\">5.6</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">1</span>] = <span class=\"number\">4.5</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">2</span>] = <span class=\"number\">3.3</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">3</span>] = <span class=\"number\">13.2</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">4</span>] = <span class=\"number\">4.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">5</span>] = <span class=\"number\">34.33</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">6</span>] = <span class=\"number\">34.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">7</span>] = <span class=\"number\">45.45</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">8</span>] = <span class=\"number\">99.993</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">9</span>] = <span class=\"number\">11123</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;总和为： &quot;</span> + total);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总和为： 11367.373</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-3-处理数组\"><a href=\"#14-3-处理数组\" class=\"headerlink\" title=\"14-3 处理数组\"></a>14-3 处理数组</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p>\n<p><strong>示例</strong></p>\n<p>该实例完整地展示了如何创建、初始化和操纵数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         System.out.println(myList[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Total is &quot;</span> + total);</span><br><span class=\"line\">      <span class=\"comment\">// 查找最大元素</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> myList[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Max is &quot;</span> + max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.9</span></span><br><span class=\"line\"><span class=\"number\">2.9</span></span><br><span class=\"line\"><span class=\"number\">3.4</span></span><br><span class=\"line\"><span class=\"number\">3.5</span></span><br><span class=\"line\">Total is <span class=\"number\">11.7</span></span><br><span class=\"line\">Max is <span class=\"number\">3.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-4-For-Each-循环\"><a href=\"#14-4-For-Each-循环\" class=\"headerlink\" title=\"14-4 For-Each 循环\"></a>14-4 For-Each 循环</h3><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(type element: array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>该实例用来显示数组 myList 中的所有元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">double</span> element: myList) &#123;</span><br><span class=\"line\">         System.out.println(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.9</span><br><span class=\"line\">2.9</span><br><span class=\"line\">3.4</span><br><span class=\"line\">3.5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-5-数组作为函数的参数\"><a href=\"#14-5-数组作为函数的参数\" class=\"headerlink\" title=\"14-5 数组作为函数的参数\"></a>14-5 数组作为函数的参数</h3><p>数组可以作为参数传递给方法。</p>\n<p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-6-数组作为函数的返回值\"><a href=\"#14-6-数组作为函数的返回值\" class=\"headerlink\" title=\"14-6 数组作为函数的返回值\"></a>14-6 数组作为函数的返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverse(<span class=\"type\">int</span>[] list) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[list.length];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = result.length - <span class=\"number\">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class=\"line\">    result[j] = list[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-7-多维数组\"><a href=\"#14-7-多维数组\" class=\"headerlink\" title=\"14-7 多维数组\"></a>14-7 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-7-1-多维数组的动态初始化（以二维数组为例）\"><a href=\"#14-7-1-多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"14-7-1 多维数组的动态初始化（以二维数组为例）\"></a>14-7-1 多维数组的动态初始化（以二维数组为例）</h4><ol>\n<li>直接为每一维分配空间，格式如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[][] typeName = <span class=\"keyword\">new</span> <span class=\"title class_\">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure>\n\n<p>type 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p>二维数组 a 可以看成一个两行三列的数组。</p>\n<p>2，从最高维开始，分别为每一维分配空间，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">s[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Luck&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;you&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p><strong>s[0]&#x3D;new String[2]</strong> 和 <strong>s[1]&#x3D;new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0&#x3D;new String(“Good”)</strong> 等操作。</p>\n<h4 id=\"14-7-2-多维数组的引用（以二维数组为例）\"><a href=\"#14-7-2-多维数组的引用（以二维数组为例）\" class=\"headerlink\" title=\"14-7-2 多维数组的引用（以二维数组为例）\"></a>14-7-2 多维数组的引用（以二维数组为例）</h4><p>对二维数组中的每个元素，引用方式为 <strong>arrayName[index1][index2]</strong>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-8-Arrays-类\"><a href=\"#14-8-Arrays-类\" class=\"headerlink\" title=\"14-8 Arrays 类\"></a>14-8 Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<p>具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<p>具体说明请查看下表：</p>\n<p><img src=\"/images/image-20240228222507296.png\" alt=\"image-20240228222507296\"></p>\n<h2 id=\"15，Java-日期时间\"><a href=\"#15，Java-日期时间\" class=\"headerlink\" title=\"15，Java 日期时间\"></a>15，Java 日期时间</h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p>\n<p>第一个构造函数使用当前日期和时间来初始化对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date( )</span><br></pre></td></tr></table></figure>\n\n<p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date(long millisec)</span><br></pre></td></tr></table></figure>\n\n<p>Date对象创建以后，可以调用下面的方法。</p>\n<p><img src=\"/images/image-20240228222725206.png\" alt=\"image-20240228222725206\"></p>\n<h3 id=\"15-1-获取当前日期时间\"><a href=\"#15-1-获取当前日期时间\" class=\"headerlink\" title=\"15-1 获取当前日期时间\"></a>15-1 获取当前日期时间</h3><p>Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用 toString() 函数显示日期时间</span></span><br><span class=\"line\">       System.out.println(date.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon May <span class=\"number\">04</span> 09:<span class=\"number\">51</span>:<span class=\"number\">52</span> CDT <span class=\"number\">2013</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-2-日期比较\"><a href=\"#15-2-日期比较\" class=\"headerlink\" title=\"15-2 日期比较\"></a>15-2 日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p>\n<ul>\n<li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li>\n<li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li>\n<li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li>\n</ul>\n<h3 id=\"15-3-使用-SimpleDateFormat-格式化日期\"><a href=\"#15-3-使用-SimpleDateFormat-格式化日期\" class=\"headerlink\" title=\"15-3 使用 SimpleDateFormat 格式化日期\"></a>15-3 使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">Date</span> <span class=\"variable\">dNow</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( );</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p>\n<p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p>\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间为: 2018-09-06 10:16:34</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-日期和时间的格式化编码\"><a href=\"#15-4-日期和时间的格式化编码\" class=\"headerlink\" title=\"15-4 日期和时间的格式化编码\"></a>15-4 日期和时间的格式化编码</h3><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p>\n<p><img src=\"/images/image-20240228222933035.png\" alt=\"image-20240228222933035\"></p>\n<h3 id=\"15-5-使用printf格式化日期\"><a href=\"#15-5-使用printf格式化日期\" class=\"headerlink\" title=\"15-5 使用printf格式化日期\"></a>15-5 使用printf格式化日期</h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p>\n<p><img src=\"/images/image-20240228223002094.png\" alt=\"image-20240228223002094\"></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">     <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//c的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class=\"line\">    <span class=\"comment\">//f的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//d的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//r的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//t的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//R的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span><br><span class=\"line\">年-月-日格式：2012-09-10  </span><br><span class=\"line\">月/日/年格式：09/10/12  </span><br><span class=\"line\">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span><br><span class=\"line\">HH:MM:SS格式（24时制）：10:43:36  </span><br><span class=\"line\">HH:MM格式（24时制）：10:43  </span><br></pre></td></tr></table></figure>\n\n<p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p>\n<p>索引必须紧跟在%后面，而且必须以$结束。例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用toString()显示日期和时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 显示格式化时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       Date date=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();                                      </span><br><span class=\"line\">        <span class=\"comment\">//b的使用，月份简称  </span></span><br><span class=\"line\">        String str=String.format(Locale.US,<span class=\"string\">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class=\"line\">        System.out.println(str);                                                                              </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//B的使用，月份全称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文月份全称：%tB&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份全称：%tB%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//a的使用，星期简称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文星期的简称：%ta&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        <span class=\"comment\">//A的使用，星期全称  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地星期的简称：%tA%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//C的使用，年前两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//y的使用，年后两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//j的使用，一年的天数  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//m的使用，月份  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//d的使用，日（二位，不够补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//e的使用，日（一位不补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;月份的日（前面不补0）：%te&quot;</span>,date);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">英文月份简称：May</span><br><span class=\"line\">本地月份简称：五月</span><br><span class=\"line\">英文月份全称：May</span><br><span class=\"line\">本地月份全称：五月</span><br><span class=\"line\">英文星期的简称：Thu</span><br><span class=\"line\">本地星期的简称：星期四</span><br><span class=\"line\">年的前两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">20</span></span><br><span class=\"line\">年的后两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">17</span></span><br><span class=\"line\">一年中的天数（即年的第几天）：<span class=\"number\">124</span></span><br><span class=\"line\">两位数字的月份（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">05</span></span><br><span class=\"line\">两位数字的日（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">04</span></span><br><span class=\"line\">月份的日（前面不补<span class=\"number\">0</span>）：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"15-6-解析字符串为时间\"><a href=\"#15-6-解析字符串为时间\" class=\"headerlink\" title=\"15-6 解析字符串为时间\"></a>15-6 解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> args.length == <span class=\"number\">0</span> ? <span class=\"string\">&quot;1818-11-11&quot;</span> : args[<span class=\"number\">0</span>]; </span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.print(input + <span class=\"string\">&quot; Parses as &quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      Date t; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">          t = ft.parse(input); </span><br><span class=\"line\">          System.out.println(t); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Unparseable using &quot;</span> + ft); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java DateDemo</span><br><span class=\"line\">1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818</span><br><span class=\"line\">$ java DateDemo 2007-12-01</span><br><span class=\"line\">2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-7-Java-休眠-sleep\"><a href=\"#15-7-Java-休眠-sleep\" class=\"headerlink\" title=\"15-7 Java 休眠(sleep)\"></a>15-7 Java 休眠(sleep)</h3><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</p>\n<p>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);   <span class=\"comment\">// 休眠3秒</span></span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Sep 17 10:20:30 CST 2015</span><br><span class=\"line\"></span><br><span class=\"line\">Thu Sep 17 10:20:33 CST 2015</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-8-测量时间\"><a href=\"#15-8-测量时间\" class=\"headerlink\" title=\"15-8 测量时间\"></a>15-8 测量时间</h3><p>下面的一个例子表明如何测量时间间隔（以毫秒为单位）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiffDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">5</span>*<span class=\"number\">60</span>*<span class=\"number\">10</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> end - start;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Difference is : &quot;</span> + diff);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">47</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">50</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Difference is : <span class=\"number\">3019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-9-Calendar类\"><a href=\"#15-9-Calendar类\" class=\"headerlink\" title=\"15-9 Calendar类\"></a>15-9 Calendar类</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p>\n<p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p>\n<p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p>\n<h4 id=\"15-9-1-创建一个代表系统当前日期的Calendar对象\"><a href=\"#15-9-1-创建一个代表系统当前日期的Calendar对象\" class=\"headerlink\" title=\"15-9-1 创建一个代表系统当前日期的Calendar对象\"></a>15-9-1 创建一个代表系统当前日期的Calendar对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Calendar.getInstance();<span class=\"comment\">//默认是当前日期</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-2-创建一个指定日期的Calendar对象\"><a href=\"#15-9-2-创建一个指定日期的Calendar对象\" class=\"headerlink\" title=\"15-9-2 创建一个指定日期的Calendar对象\"></a>15-9-2 创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个代表2009年6月12日的Calendar对象</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">c1.set(<span class=\"number\">2009</span>, <span class=\"number\">6</span> - <span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-3-Calendar类对象字段类型\"><a href=\"#15-9-3-Calendar类对象字段类型\" class=\"headerlink\" title=\"15-9-3 Calendar类对象字段类型\"></a>15-9-3 Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想</p>\n<p><img src=\"/http://localhost:4000//image-20240228225026914.png\" alt=\"image-20240228225026914\"></p>\n<h4 id=\"15-9-4-Calendar类对象信息的设置\"><a href=\"#15-9-4-Calendar类对象信息的设置\" class=\"headerlink\" title=\"15-9-4 Calendar类对象信息的设置\"></a>15-9-4 Calendar类对象信息的设置</h4><p><strong>Set设置</strong></p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void set(int year,int month,int date)</span><br><span class=\"line\">c1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</span><br></pre></td></tr></table></figure>\n\n<p>利用字段类型设置</p>\n<p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(int field,int value)</span><br></pre></td></tr></table></figure>\n\n<p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.DATE,10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.YEAR,2008);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性set的意义以此类推</p>\n<p><strong>Add设置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, 10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, -10);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性的add的意义以此类推</p>\n<h4 id=\"15-9-5-Calendar类对象信息的获得\"><a href=\"#15-9-5-Calendar类对象信息的获得\" class=\"headerlink\" title=\"15-9-5 Calendar类对象信息的获得\"></a>15-9-5 Calendar类对象信息的获得</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\"><span class=\"comment\">// 获得年份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">year</span> <span class=\"operator\">=</span> c1.get(Calendar.YEAR);</span><br><span class=\"line\"><span class=\"comment\">// 获得月份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> c1.get(Calendar.MONTH) + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获得日期</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> c1.get(Calendar.DATE);</span><br><span class=\"line\"><span class=\"comment\">// 获得小时</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hour</span> <span class=\"operator\">=</span> c1.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\"><span class=\"comment\">// 获得分钟</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">minute</span> <span class=\"operator\">=</span> c1.get(Calendar.MINUTE);</span><br><span class=\"line\"><span class=\"comment\">// 获得秒</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> c1.get(Calendar.SECOND);</span><br><span class=\"line\"><span class=\"comment\">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-10-GregorianCalendar类\"><a href=\"#15-10-GregorianCalendar类\" class=\"headerlink\" title=\"15-10 GregorianCalendar类\"></a>15-10 GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p>\n<p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p>\n<p>下面列出GregorianCalendar对象的几个构造方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225136150.png\" alt=\"image-20240228225136150\"></p>\n<p>这里是GregorianCalendar 类提供的一些有用的方法列表：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225205976.png\" alt=\"image-20240228225205976\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GregorianCalendarDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      String months[] = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Jan&quot;</span>, <span class=\"string\">&quot;Feb&quot;</span>, <span class=\"string\">&quot;Mar&quot;</span>, <span class=\"string\">&quot;Apr&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;May&quot;</span>, <span class=\"string\">&quot;Jun&quot;</span>, <span class=\"string\">&quot;Jul&quot;</span>, <span class=\"string\">&quot;Aug&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;Sep&quot;</span>, <span class=\"string\">&quot;Oct&quot;</span>, <span class=\"string\">&quot;Nov&quot;</span>, <span class=\"string\">&quot;Dec&quot;</span>&#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> year;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化 Gregorian 日历</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用当前时间和日期</span></span><br><span class=\"line\">      <span class=\"comment\">// 默认为本地时间和时区</span></span><br><span class=\"line\">      <span class=\"type\">GregorianCalendar</span> <span class=\"variable\">gcalendar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GregorianCalendar</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 显示当前时间和日期的信息</span></span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Date: &quot;</span>);</span><br><span class=\"line\">      System.out.print(months[gcalendar.get(Calendar.MONTH)]);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot; &quot;</span> + gcalendar.get(Calendar.DATE) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      System.out.println(year = gcalendar.get(Calendar.YEAR));</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Time: &quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.HOUR) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.println(gcalendar.get(Calendar.SECOND));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 测试当前年份是否为闰年</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(gcalendar.isLeapYear(year)) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份不是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date: Apr 22 2009</span><br><span class=\"line\">Time: 11:25:27</span><br><span class=\"line\">当前年份不是闰年</span><br></pre></td></tr></table></figure>\n\n<p>关于 Calender 类的完整列表，你可以参考标准的 <a href=\"http://it028.com/index-10.htm\">Java文档</a>。</p>\n<h2 id=\"16，Java-正则表达式\"><a href=\"#16，Java-正则表达式\" class=\"headerlink\" title=\"16，Java 正则表达式\"></a>16，Java 正则表达式</h2><p>正则表达式定义了字符串的模式。</p>\n<p>正则表达式可以用来搜索、编辑或处理文本。</p>\n<p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>\n<h3 id=\"16-1-正则表达式实例\"><a href=\"#16-1-正则表达式实例\" class=\"headerlink\" title=\"16-1 正则表达式实例\"></a>16-1 正则表达式实例</h3><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p>\n<p><strong>.</strong>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p>\n<p>下表列出了一些正则表达式的实例及描述：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225320769.png\" alt=\"image-20240228225320769\"></p>\n<p>Java 正则表达式和 Perl 的是最为相似的。</p>\n<p>java.util.regex 包主要包括以下三个类：</p>\n<ul>\n<li><p>Pattern 类：</p>\n<p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>\n</li>\n<li><p>Matcher 类：</p>\n<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>\n</li>\n<li><p>PatternSyntaxException：</p>\n<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>\n</li>\n</ul>\n<p>以下实例中使用了正则表达式 <strong>.*runoob.*</strong> 用于查找字符串中是否包了 <strong>runoob</strong> 子串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegexExample1</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;I am noob &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;from runoob.com.&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.*runoob.*&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isMatch</span> <span class=\"operator\">=</span> Pattern.matches(pattern, content);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot;</span> + isMatch);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串中是否包含了 &#x27;runoob&#x27; 子字符串? true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-捕获组\"><a href=\"#16-2-捕获组\" class=\"headerlink\" title=\"16-2 捕获组\"></a>16-2 捕获组</h3><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p>\n<p>例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p>\n<p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p>\n<ul>\n<li>((A)(B(C)))</li>\n<li>(A)</li>\n<li>(B(C))</li>\n<li>(C)</li>\n</ul>\n<p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p>\n<p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 按指定模式在字符串查找</span></span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\D*)(\\\\d+)(.*)&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 创建 Pattern 对象</span></span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 现在创建 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> r.matcher(line);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m.find( )) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">0</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">1</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">2</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">3</span>) ); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;NO MATCH&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found value: This order was placed for QT3000! OK?</span><br><span class=\"line\">Found value: This order was placed for QT</span><br><span class=\"line\">Found value: 3000</span><br><span class=\"line\">Found value: ! OK?</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"16-3-正则表达式语法\"><a href=\"#16-3-正则表达式语法\" class=\"headerlink\" title=\"16-3 正则表达式语法\"></a>16-3 正则表达式语法</h3><p>在其他语言中，<strong>\\</strong> 表示：<strong>我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</strong></p>\n<p>在 Java 中，<strong>\\</strong> 表示：<strong>我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</strong></p>\n<p>所以，在其他的语言中（如Perl），一个反斜杠 **** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <strong>\\</strong> 代表其他语言中的一个 ****，这也就是为什么表示一位数字的正则表达式是 <strong>\\d</strong>，而表示一个普通的反斜杠是 <strong>\\\\</strong>。</p>\n<p><img src=\"/http://localhost:4000//image-20240228225546405.png\" alt=\"image-20240228225546405\"></p>\n<h3 id=\"16-4-Matcher-类的方法\"><a href=\"#16-4-Matcher-类的方法\" class=\"headerlink\" title=\"16-4 Matcher 类的方法\"></a>16-4 Matcher 类的方法</h3><h4 id=\"16-4-1-索引方法\"><a href=\"#16-4-1-索引方法\" class=\"headerlink\" title=\"16-4-1 索引方法\"></a>16-4-1 索引方法</h4><p>索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225637596.png\" alt=\"image-20240228225637596\"></p>\n<h4 id=\"16-4-2-研究方法\"><a href=\"#16-4-2-研究方法\" class=\"headerlink\" title=\"16-4-2 研究方法\"></a>16-4-2 研究方法</h4><p>研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225700596.png\" alt=\"image-20240228225700596\"></p>\n<h4 id=\"16-4-3-替换方法\"><a href=\"#16-4-3-替换方法\" class=\"headerlink\" title=\"16-4-3 替换方法\"></a>16-4-3 替换方法</h4><p>替换方法是替换输入字符串里文本的方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225727777.png\" alt=\"image-20240228225727777\"></p>\n<h4 id=\"16-4-4-start-和-end-方法\"><a href=\"#16-4-4-start-和-end-方法\" class=\"headerlink\" title=\"16-4-4 start 和 end 方法\"></a>16-4-4 start 和 end 方法</h4><p>下面是一个对单词 “cat” 出现在输入字符串中出现次数进行计数的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\\\bcat\\\\b&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">         count++;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Match number &quot;</span>+count);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;start(): &quot;</span>+m.start());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;end(): &quot;</span>+m.end());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match number <span class=\"number\">1</span></span><br><span class=\"line\">start(): <span class=\"number\">0</span></span><br><span class=\"line\">end(): <span class=\"number\">3</span></span><br><span class=\"line\">Match number <span class=\"number\">2</span></span><br><span class=\"line\">start(): <span class=\"number\">4</span></span><br><span class=\"line\">end(): <span class=\"number\">7</span></span><br><span class=\"line\">Match number <span class=\"number\">3</span></span><br><span class=\"line\">start(): <span class=\"number\">8</span></span><br><span class=\"line\">end(): <span class=\"number\">11</span></span><br><span class=\"line\">Match number <span class=\"number\">4</span></span><br><span class=\"line\">start(): <span class=\"number\">19</span></span><br><span class=\"line\">end(): <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p>\n<p>Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。</p>\n<h4 id=\"16-4-5-matches-和-lookingAt-方法\"><a href=\"#16-4-5-matches-和-lookingAt-方法\" class=\"headerlink\" title=\"16-4-5 matches 和 lookingAt 方法\"></a>16-4-5 matches 和 lookingAt 方法</h4><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。</p>\n<p>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p>\n<p>这两个方法经常在输入字符串的开始使用。</p>\n<p>我们通过下面这个例子，来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern pattern;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher2;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       pattern = Pattern.compile(REGEX);</span><br><span class=\"line\">       matcher = pattern.matcher(INPUT);</span><br><span class=\"line\">       matcher2 = pattern.matcher(INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current REGEX is: foo</span><br><span class=\"line\">Current INPUT is: fooooooooooooooooo</span><br><span class=\"line\">Current INPUT2 is: ooooofoooooooooooo</span><br><span class=\"line\">lookingAt(): true</span><br><span class=\"line\">matches(): false</span><br><span class=\"line\">lookingAt(): false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-6-replaceFirst-和-replaceAll-方法\"><a href=\"#16-4-6-replaceFirst-和-replaceAll-方法\" class=\"headerlink\" title=\"16-4-6 replaceFirst 和 replaceAll 方法\"></a>16-4-6 replaceFirst 和 replaceAll 方法</h4><p>replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p>\n<p>下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dog&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;The dog says meow. &quot;</span> +</span><br><span class=\"line\">                                    <span class=\"string\">&quot;All dogs say meow.&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"comment\">// get a matcher object</span></span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); </span><br><span class=\"line\">       INPUT = m.replaceAll(REPLACE);</span><br><span class=\"line\">       System.out.println(INPUT);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat says meow. All cats say meow.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-7-appendReplacement-和-appendTail-方法\"><a href=\"#16-4-7-appendReplacement-和-appendTail-方法\" class=\"headerlink\" title=\"16-4-7 appendReplacement 和 appendTail 方法\"></a>16-4-7 appendReplacement 和 appendTail 方法</h4><p>Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：</p>\n<p>看下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a*b&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">      <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT);</span><br><span class=\"line\">      <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(m.find())&#123;</span><br><span class=\"line\">         m.appendReplacement(sb,REPLACE);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      m.appendTail(sb);</span><br><span class=\"line\">      System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-foo-foo-foo-kkk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-8-PatternSyntaxException-类的方法\"><a href=\"#16-4-8-PatternSyntaxException-类的方法\" class=\"headerlink\" title=\"16-4-8 PatternSyntaxException 类的方法\"></a>16-4-8 PatternSyntaxException 类的方法</h4><p>PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。</p>\n<p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p>\n<p><img src=\"/http://localhost:4000//image-20240228230136771.png\" alt=\"image-20240228230136771\"></p>\n<h2 id=\"17，Java-方法\"><a href=\"#17，Java-方法\" class=\"headerlink\" title=\"17，Java 方法\"></a>17，Java 方法</h2><p>在前面几个章节中我们经常使用到 <strong>System.out.println()</strong>，那么它是什么呢？</p>\n<ul>\n<li>println() 是一个方法。</li>\n<li>System 是系统类。</li>\n<li>out 是标准输出对象。</li>\n</ul>\n<p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p>\n<h3 id=\"17-1-那么什么是方法呢？\"><a href=\"#17-1-那么什么是方法呢？\" class=\"headerlink\" title=\"17-1 那么什么是方法呢？\"></a>17-1 那么什么是方法呢？</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<h3 id=\"17-2-方法的优点\"><a href=\"#17-2-方法的优点\" class=\"headerlink\" title=\"17-2 方法的优点\"></a>17-2 方法的优点</h3><ul>\n<li>\\1. 使程序变得更简短而清晰。</li>\n<li>\\2. 有利于程序维护。</li>\n<li>\\3. 可以提高程序开发的效率。</li>\n<li>\\4. 提高了代码的重用性。</li>\n</ul>\n<h3 id=\"17-3-方法的命名规则\"><a href=\"#17-3-方法的命名规则\" class=\"headerlink\" title=\"17-3 方法的命名规则\"></a>17-3 方法的命名规则</h3><ul>\n<li>1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<strong>addPerson</strong>。</li>\n<li>2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<strong>test<MethodUnderTest>_<state></state></MethodUnderTest></strong>，例如 <strong>testPop_emptyStack</strong>。</li>\n</ul>\n<hr>\n<h3 id=\"17-4-方法的定义\"><a href=\"#17-4-方法的定义\" class=\"headerlink\" title=\"17-4 方法的定义\"></a>17-4 方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p>\n<ul>\n<li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>\n<li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li>\n<li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>\n<li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">(<span class=\"type\">int</span> birthday)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数可以有多个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">float</span> <span class=\"title function_\">interest</span><span class=\"params\">(<span class=\"type\">float</span> principal, <span class=\"type\">int</span> year)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p>\n<p>下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回两个整型变量数据的较大值 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> result;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">      result = num1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-5-方法调用\"><a href=\"#17-5-方法调用\" class=\"headerlink\" title=\"17-5 方法调用\"></a>17-5 方法调用</h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p>\n<p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p>\n<p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">larger</span> <span class=\"operator\">=</span> max(<span class=\"number\">30</span>, <span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;欢迎访问菜鸟教程！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子演示了如何定义一个方法，以及如何调用它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestMax.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMax</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 主方法 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> max(i, j);</span><br><span class=\"line\">      System.out.println( i + <span class=\"string\">&quot; 和 &quot;</span> + j + <span class=\"string\">&quot; 比较，最大值是：&quot;</span> + k);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** 返回两个整数变量较大的值 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">         result = num1;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 和 2 比较，最大值是：5</span><br></pre></td></tr></table></figure>\n\n<p>这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。</p>\n<p>main 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。</p>\n<h3 id=\"17-6-void-关键字\"><a href=\"#17-6-void-关键字\" class=\"headerlink\" title=\"17-6 void 关键字\"></a>17-6 void 关键字</h3><p>本节说明如何声明和调用一个 void 方法。</p>\n<p>下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestVoidMethod.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVoidMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    printGrade(<span class=\"number\">78.5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printGrade</span><span class=\"params\">(<span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n\n<p>这里printGrade方法是一个void类型方法，它不返回值。</p>\n<p>一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。</p>\n<hr>\n<h3 id=\"17-7-通过值传递参数\"><a href=\"#17-7-通过值传递参数\" class=\"headerlink\" title=\"17-7 通过值传递参数\"></a>17-7 通过值传递参数</h3><p>调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。</p>\n<p>例如，下面的方法连续n次打印一个消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestVoidMethod.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nPrintln</span><span class=\"params\">(String message, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    System.out.println(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<p>下面的例子演示按值传递的效果。</p>\n<p>该程序创建一个方法，该方法用于交换两个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestPassByValue.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPassByValue</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换前 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                        num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用swap方法</span></span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换后 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                       num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/** 交换两个变量的方法 */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> n1, <span class=\"type\">int</span> n2)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t进入 swap 方法&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换前 n1 的值为：&quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">    <span class=\"comment\">// 交换 n1 与 n2的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> n1;</span><br><span class=\"line\">    n1 = n2;</span><br><span class=\"line\">    n2 = temp;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换后 n1 的值为 &quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交换前 num1 的值为：1 ，num2 的值为：2</span><br><span class=\"line\">    进入 swap 方法</span><br><span class=\"line\">        交换前 n1 的值为：1，n2 的值：2</span><br><span class=\"line\">        交换后 n1 的值为 2，n2 的值：1</span><br><span class=\"line\">交换后 num1 的值为：1 ，num2 的值为：2</span><br></pre></td></tr></table></figure>\n\n<p>传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。</p>\n<hr>\n<h3 id=\"17-8-方法的重载\"><a href=\"#17-8-方法的重载\" class=\"headerlink\" title=\"17-8 方法的重载\"></a>17-8 方法的重载</h3><p>上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？</p>\n<p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> num1, <span class=\"type\">double</span> num2)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；</p>\n<p>如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；</p>\n<p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p>\n<p>Java编译器根据方法签名判断哪个方法应该被调用。</p>\n<p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p>\n<p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p>\n<h3 id=\"17-9-变量作用域\"><a href=\"#17-9-变量作用域\" class=\"headerlink\" title=\"17-9 变量作用域\"></a>17-9 变量作用域</h3><ul>\n<li>变量的范围是程序中该变量可以被引用的部分。</li>\n<li>方法内定义的变量被称为局部变量。</li>\n<li>局部变量的作用范围从声明开始，直到包含它的块结束。</li>\n<li>局部变量必须声明才可以使用。</li>\n<li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li>\n<li>for循环的初始化部分声明的变量，其作用范围在整个循环。</li>\n<li>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li>\n<li>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</li>\n</ul>\n<h3 id=\"17-10-命令行参数的使用\"><a href=\"#17-10-命令行参数的使用\" class=\"headerlink\" title=\"17-10 命令行参数的使用\"></a>17-10 命令行参数的使用</h3><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p>\n<p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p>\n<p>下面的程序打印所有的命令行参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLine.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommandLine</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;args.length; i++)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;args[&quot;</span> + i + <span class=\"string\">&quot;]: &quot;</span> + args[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，运行这个程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac CommandLine.java </span><br><span class=\"line\">$ java CommandLine this is a command line 200 -100</span><br><span class=\"line\">args[0]: this</span><br><span class=\"line\">args[1]: is</span><br><span class=\"line\">args[2]: a</span><br><span class=\"line\">args[3]: command</span><br><span class=\"line\">args[4]: line</span><br><span class=\"line\">args[5]: 200</span><br><span class=\"line\">args[6]: -100</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"17-11-构造方法\"><a href=\"#17-11-构造方法\" class=\"headerlink\" title=\"17-11 构造方法\"></a>17-11 构造方法</h3><ul>\n<li>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</li>\n<li>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</li>\n<li>不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</li>\n<li>一旦你定义了自己的构造方法，默认构造方法就会失效。</li>\n</ul>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass() &#123;</span><br><span class=\"line\">    x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多时候需要一个有参数的构造方法。</p>\n<p><strong>实例</strong></p>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass(<span class=\"type\">int</span> i ) &#123;</span><br><span class=\"line\">    x = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">10</span> );</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">20</span> );</span><br><span class=\"line\">    System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-12-可变参数\"><a href=\"#17-12-可变参数\" class=\"headerlink\" title=\"17-12 可变参数\"></a>17-12 可变参数</h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>\n<p>方法的可变参数的声明如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName... parameterName</span><br></pre></td></tr></table></figure>\n\n<p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p>\n<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VarargsDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用可变参数的方法</span></span><br><span class=\"line\">        printMax(<span class=\"number\">34</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">56.5</span>);</span><br><span class=\"line\">        printMax(<span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">( <span class=\"type\">double</span>... numbers)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No argument passed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> numbers[<span class=\"number\">0</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;  numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class=\"line\">                result = numbers[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The max value is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The max value is 56.5</span><br><span class=\"line\">The max value is 3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-13-finalize-方法\"><a href=\"#17-13-finalize-方法\" class=\"headerlink\" title=\"17-13 finalize() 方法\"></a>17-13 finalize() 方法</h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p>\n<p>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p>\n<p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p>\n<p>finalize() 一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 在这里终结代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p>\n<p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FinalizationDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalizationDemo</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    c2 = c3 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    System.gc(); <span class=\"comment\">//调用Java垃圾收集器</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cake</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Cake</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is created&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.Throwable &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">super</span>.finalize();  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is disposed&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac FinalizationDemo.java </span><br><span class=\"line\">$ java FinalizationDemo</span><br><span class=\"line\">Cake Object 1is created</span><br><span class=\"line\">Cake Object 2is created</span><br><span class=\"line\">Cake Object 3is created</span><br><span class=\"line\">Cake Object 3is disposed</span><br><span class=\"line\">Cake Object 2is disposed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18，Java-流-Stream-、文件-File-和IO\"><a href=\"#18，Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"18，Java 流(Stream)、文件(File)和IO\"></a>18，Java 流(Stream)、文件(File)和IO</h2><ul>\n<li>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</li>\n<li>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</li>\n<li>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</li>\n<li>Java 为 I&#x2F;O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</li>\n<li>但本节讲述最基本的和流与 I&#x2F;O 相关的功能。我们将通过一个个例子来学习这些功能。</li>\n</ul>\n<h3 id=\"18-1-读取控制台输入\"><a href=\"#18-1-读取控制台输入\" class=\"headerlink\" title=\"18-1 读取控制台输入\"></a>18-1 读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<p>下面是创建 BufferedReader 的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> </span><br><span class=\"line\">                      <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure>\n\n<p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p>\n<h3 id=\"18-2-从控制台读取多字符输入\"><a href=\"#18-2-从控制台读取多字符输入\" class=\"headerlink\" title=\"18-2 从控制台读取多字符输入\"></a>18-2 从控制台读取多字符输入</h3><p>从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。</p>\n<p>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 “q”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BRRead.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRRead</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取字符</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            c = (<span class=\"type\">char</span>) br.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (c != <span class=\"string\">&#x27;q&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入字符, 按下 &#x27;q&#x27; 键退出。</span><br><span class=\"line\">runoob</span><br><span class=\"line\">r</span><br><span class=\"line\">u</span><br><span class=\"line\">n</span><br><span class=\"line\">o</span><br><span class=\"line\">o</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q</span><br><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-3-从控制台读取字符串\"><a href=\"#18-3-从控制台读取字符串\" class=\"headerlink\" title=\"18-3 从控制台读取字符串\"></a>18-3 从控制台读取字符串</h3><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。</p>\n<p>它的一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">readLine</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>下面的程序读取和显示字符行直到你输入了单词”end”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRReadLines</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter lines of text.&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter &#x27;end&#x27; to quit.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter lines of text.</span><br><span class=\"line\">Enter &#x27;end&#x27; to quit.</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>‘) 类来获取控制台的输入。</p>\n</blockquote>\n<h3 id=\"18-4-控制台输出\"><a href=\"#18-4-控制台输出\" class=\"headerlink\" title=\"18-4 控制台输出\"></a>18-4 控制台输出</h3><p>在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<p>PrintStream 定义 write() 的最简单格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> byteval)</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将 byteval 的低八位字节写到流中。</p>\n<p>下面的例子用 write() 把字符 “A” 和紧跟着的换行符输出到屏幕：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteDemo.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//演示 System.out.write().</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriteDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b;</span><br><span class=\"line\">        b = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        System.out.write(b);</span><br><span class=\"line\">        System.out.write(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上实例在输出窗口输出 “A” 字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"18-5-读写文件\"><a href=\"#18-5-读写文件\" class=\"headerlink\" title=\"18-5 读写文件\"></a>18-5 读写文件</h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p>\n<h4 id=\"18-5-1-FileInputStream\"><a href=\"#18-5-1-FileInputStream\" class=\"headerlink\" title=\"18-5-1 FileInputStream\"></a>18-5-1 FileInputStream</h4><ul>\n<li>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</li>\n<li>有多种构造方法可用来创建对象。</li>\n<li>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); <span class=\"type\">InputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。</li>\n</ul>\n<p><img src=\"/http://localhost:4000//image-20240228231544486.png\" alt=\"image-20240228231544486\"></p>\n<p>除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>‘)</li>\n<li>[DataInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>‘)</li>\n</ul>\n<hr>\n<h4 id=\"18-5-2-FileOutputStream\"><a href=\"#18-5-2-FileOutputStream\" class=\"headerlink\" title=\"18-5-2 FileOutputStream\"></a>18-5-2 FileOutputStream</h4><p>该类用来创建一个文件并向文件中写数据。</p>\n<p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p>\n<p>有两个构造方法可以用来创建 FileOutputStream 对象。</p>\n<p>使用字符串类型的文件名来创建一个输出流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); </span><br><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<p>创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。</p>\n<p><img src=\"/http://localhost:4000//image-20240228231647489.png\" alt=\"image-20240228231647489\"></p>\n<p>除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>‘)</li>\n<li>[DataOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>‘)</li>\n</ul>\n<p>下面是一个演示 InputStream 和 OutputStream 用法的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fileStreamTest.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span> bWrite[] = &#123; <span class=\"number\">11</span>, <span class=\"number\">21</span>, <span class=\"number\">3</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class=\"line\">                os.write(bWrite[x]); <span class=\"comment\">// writes the bytes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> is.available();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) is.read() + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。</p>\n<p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileStreamTest2.java 文件代码：</span><br><span class=\"line\"><span class=\"comment\">//文件名 :fileStreamTest2.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fop, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;中文输入&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写入到缓冲区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fop.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输出流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileInputStream对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fip, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader.ready()) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"type\">char</span>) reader.read());</span><br><span class=\"line\">            <span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fip.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-6-文件和I-O\"><a href=\"#18-6-文件和I-O\" class=\"headerlink\" title=\"18-6 文件和I&#x2F;O\"></a>18-6 文件和I&#x2F;O</h3><p>还有一些关于文件和I&#x2F;O的类，我们也需要知道：</p>\n<ul>\n<li>[File Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>‘)</li>\n<li>[FileReader Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>‘)</li>\n<li>[FileWriter Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>‘)</li>\n</ul>\n<hr>\n<h3 id=\"18-7-Java中的目录\"><a href=\"#18-7-Java中的目录\" class=\"headerlink\" title=\"18-7 Java中的目录\"></a>18-7 Java中的目录</h3><h4 id=\"18-7-1-创建目录：\"><a href=\"#18-7-1-创建目录：\" class=\"headerlink\" title=\"18-7-1 创建目录：\"></a>18-7-1 创建目录：</h4><p>File类中有两个方法可以用来创建文件夹：</p>\n<ul>\n<li>**mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li>\n<li>**mkdirs()**方法创建一个文件夹和它的所有父文件夹。</li>\n</ul>\n<p>下面的例子创建 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”文件夹：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CreateDir.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDir</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp/user//images/bin&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"comment\">// 现在创建目录</span></span><br><span class=\"line\">        d.mkdirs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并执行上面代码来创建目录 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”。</p>\n<p><strong>注意：</strong> Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (&#x2F;) ，路径依然能够被正确解析。</p>\n<h4 id=\"18-7-2-读取目录\"><a href=\"#18-7-2-读取目录\" class=\"headerlink\" title=\"18-7-2 读取目录\"></a>18-7-2 读取目录</h4><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。</p>\n<p>如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。</p>\n<p>可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p>\n<p>下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DirList.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f1.isDirectory()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;目录 &quot;</span> + dirname);</span><br><span class=\"line\">            String s[] = f1.list();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname + <span class=\"string\">&quot;/&quot;</span> + s[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个目录&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个文件&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(dirname + <span class=\"string\">&quot; 不是一个目录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录 /tmp</span><br><span class=\"line\">bin 是一个目录</span><br><span class=\"line\">lib 是一个目录</span><br><span class=\"line\">demo 是一个目录</span><br><span class=\"line\">test.txt 是一个文件</span><br><span class=\"line\">README 是一个文件</span><br><span class=\"line\">index.html 是一个文件</span><br><span class=\"line\">include 是一个目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-7-3-删除目录或文件\"><a href=\"#18-7-3-删除目录或文件\" class=\"headerlink\" title=\"18-7-3 删除目录或文件\"></a>18-7-3 删除目录或文件</h4><p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。</p>\n<p>以下代码会删除目录 <strong>&#x2F;tmp&#x2F;&#x2F;images&#x2F;</strong>，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p>\n<p>测试目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp//images/</span><br><span class=\"line\">|-- 1.log</span><br><span class=\"line\">|-- test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeleteFileDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里修改为自己的测试目录</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp//images/&quot;</span>);</span><br><span class=\"line\">        deleteFolder(folder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 删除文件及目录</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteFolder</span><span class=\"params\">(File folder)</span> &#123;</span><br><span class=\"line\">        File[] files = folder.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    deleteFolder(f);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        folder.delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19，Java-Scanner-类\"><a href=\"#19，Java-Scanner-类\" class=\"headerlink\" title=\"19，Java Scanner 类\"></a>19，Java Scanner 类</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p>\n<p>下面是创建 Scanner 对象的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>\n<h3 id=\"19-1-使用-next-方法：\"><a href=\"#19-1-使用-next-方法：\" class=\"headerlink\" title=\"19-1 使用 next 方法：\"></a>19-1 使用 next 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// next方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> scan.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">next方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串并未输出，接下来我们看 nextLine。</p>\n<h3 id=\"19-2-使用-nextLine-方法：\"><a href=\"#19-2-使用-nextLine-方法：\" class=\"headerlink\" title=\"19-2 使用 nextLine 方法：\"></a>19-2 使用 nextLine 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// nextLine方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;nextLine方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextLine()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">nextLine方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串输出。</p>\n<h3 id=\"19-3-next-与-nextLine-区别\"><a href=\"#19-3-next-与-nextLine-区别\" class=\"headerlink\" title=\"19-3 next() 与 nextLine() 区别\"></a>19-3 next() 与 nextLine() 区别</h3><p>next():</p>\n<ul>\n<li>1、一定要读取到有效字符后才可以结束输入。</li>\n<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>\n<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>\n<li>next() 不能得到带有空格的字符串。</li>\n</ul>\n<p>nextLine()：</p>\n<ul>\n<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>\n<li>2、可以获得空白。</li>\n</ul>\n<p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextInt()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是整数</span></span><br><span class=\"line\">            i = scan.nextInt();</span><br><span class=\"line\">            <span class=\"comment\">// 接收整数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;整数数据：&quot;</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是整数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入小数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextFloat()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是小数</span></span><br><span class=\"line\">            f = scan.nextFloat();</span><br><span class=\"line\">            <span class=\"comment\">// 接收小数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;小数数据：&quot;</span> + f);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是小数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">输入整数：12</span><br><span class=\"line\">整数数据：12</span><br><span class=\"line\">输入小数：1.2</span><br><span class=\"line\">小数数据：1.2</span><br></pre></td></tr></table></figure>\n\n<p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scan.hasNextDouble()) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scan.nextDouble();</span><br><span class=\"line\">            m = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            sum = sum + x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的和为&quot;</span> + sum);</span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">21.4</span></span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">4</span>个数的和为<span class=\"number\">71.4</span></span><br><span class=\"line\"><span class=\"number\">4</span>个数的平均值是<span class=\"number\">17.85</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20，Java异常处理\"><a href=\"#20，Java异常处理\" class=\"headerlink\" title=\"20，Java异常处理\"></a>20，Java异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11&#x2F;0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li>**检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查</li>\n</ul>\n<h3 id=\"20-1-异常方法\"><a href=\"#20-1-异常方法\" class=\"headerlink\" title=\"20-1 异常方法\"></a>20-1 异常方法</h3><p><img src=\"/http://localhost:4000//image-20240228232401552.png\" alt=\"image-20240228232401552\"></p>\n<h3 id=\"20-2-捕获异常\"><a href=\"#20-2-捕获异常\" class=\"headerlink\" title=\"20-2 捕获异常\"></a>20-2 捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try&#x2F;catch 代码块放在异常可能发生的地方。</p>\n<p>try&#x2F;catch代码块中的代码称为保护代码，使用 try&#x2F;catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ExceptionName e1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcepTest.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名 : ExcepTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Out of the block&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">Out of the block</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-多重捕获块\"><a href=\"#20-3-多重捕获块\" class=\"headerlink\" title=\"20-3 多重捕获块\"></a>20-3 多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<p>多重捕获块的语法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的代码段包含了 3 个 catch块。</li>\n<li>可以在 try 语句后面添加任意数量的 catch 块。</li>\n<li>如果保护代码中发生异常，异常被抛给第一个 catch 块。</li>\n<li>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</li>\n<li>如果不匹配，它会被传递给第二个 catch 块。</li>\n<li>如此，直到异常被捕获或者通过所有的 catch 块。</li>\n</ul>\n<p>该实例展示了怎么使用多重 try&#x2F;catch。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    file = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName);</span><br><span class=\"line\">    x = (<span class=\"type\">byte</span>) file.read();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotFoundException f) &#123; <span class=\"comment\">// Not valid!</span></span><br><span class=\"line\">    f.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(IOException i) &#123;</span><br><span class=\"line\">    i.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-throws-throw-关键字：\"><a href=\"#20-4-throws-throw-关键字：\" class=\"headerlink\" title=\"20-4 throws&#x2F;throw 关键字：\"></a>20-4 throws&#x2F;throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteException</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException,</span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-5-finally关键字\"><a href=\"#20-5-finally关键字\" class=\"headerlink\" title=\"20-5 finally关键字\"></a>20-5 finally关键字</h3><ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li>\n<li>无论是否发生异常，finally 代码块中的代码总会被执行。</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExcepTest.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       a[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;First element value: &quot;</span> +a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;The finally statement is executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">First element value: 6</span><br><span class=\"line\">The finally statement is executed</span><br></pre></td></tr></table></figure>\n\n<p>注意下面事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try&#x2F;catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h3 id=\"20-6-声明自定义异常\"><a href=\"#20-6-声明自定义异常\" class=\"headerlink\" title=\"20-6 声明自定义异常\"></a>20-6 声明自定义异常</h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<p>可以像下面这样定义自己的异常类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只继承Exception 类来创建的异常类是检查性异常类。</li>\n<li>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。</li>\n<li>一个异常类和其它任何类一样，包含有变量和方法。</li>\n</ul>\n<p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// InsufficientFundsException.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名InsufficientFundsException.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义异常类，继承Exception类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsufficientFundsException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">double</span> amount;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">InsufficientFundsException</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.amount = amount;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAmount</span><span class=\"params\">()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示如何使用我们自定义的异常类，</p>\n<p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名称 CheckingAccount.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//此类模拟银行账户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckingAccount</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//balance为余额，number为卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> number;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CheckingAccount</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：存钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      balance += amount;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：取钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(amount &lt;= balance)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         balance -= amount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"type\">double</span> <span class=\"variable\">needs</span> <span class=\"operator\">=</span> amount - balance;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InsufficientFundsException</span>(needs);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回余额</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名称 BankDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String [] args)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">CheckingAccount</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckingAccount</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Depositing $500...&quot;</span>);</span><br><span class=\"line\">      c.deposit(<span class=\"number\">500.00</span>);</span><br><span class=\"line\">      <span class=\"keyword\">try</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $100...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">100.00</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $600...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">600.00</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(InsufficientFundsException e)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Sorry, but you are short $&quot;</span></span><br><span class=\"line\">                                  + e.getAmount());</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Depositing $500...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $100...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $600...</span><br><span class=\"line\">Sorry, but you are short $200.0</span><br><span class=\"line\">InsufficientFundsException</span><br><span class=\"line\">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span><br><span class=\"line\">        at BankDemo.main(BankDemo.java:13)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-7-通用异常\"><a href=\"#20-7-通用异常\" class=\"headerlink\" title=\"20-7 通用异常\"></a>20-7 通用异常</h3><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java**<strong>虚拟机</strong></strong>)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li>**程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n"},{"title":"Java初学者学习笔记","_content":"\n## 1，Java基础语法\n\n一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n\n- **对象**：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n- **类**：类是一个模板，它描述一类对象的行为和状态。\n- **方法**：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。\n- **实例变量**：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\n\n### 1-1 第一个Java程序\n\n下面看一个简单的 Java 程序，它将打印字符串 *Hello World*\n\n```Java\npublic class HelloWorld {\n    /* 第一个Java程序\n     * 它将打印字符串 Hello World\n     */\n    public static void main(String []args) {\n        System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n}\n```\n\n下面将逐步介绍如何保存、编译以及运行这个程序：\n\n- 打开代码编辑器，把上面的代码添加进去；\n- 把文件名保存为：HelloWorld.java；\n- 打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\\n- 在命令行窗口输入 **javac HelloWorld.java** 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。\n- 再键输入 **java HelloWorld** 按下回车键就可以运行程序了\n\n你将会在窗口看到 Hello World\n\n```shell\nC : > javac HelloWorld.java\nC : > java HelloWorld \nHello World\n```\n\nGif 图演示：\n\n![img](/images//images/java-HelloWorld.gif)\n\n### 1-2 基本语法\n\n编写 Java 程序时，应注意以下几点：\n\n- **大小写敏感**：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。\n- **类名**：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 **MyFirstJavaClass** 。\n- **方法名**：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。\n- **源文件名**：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 **.java**。（如果文件名和类名不相同则会导致编译错误）。\n- **主方法入口**：所有的 Java 程序由 **public static void main(String []args)** 方法开始执行。\n\n### 1-3 Java 标识符\n\nJava 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。\n\n关于 Java 标识符，有以下几点需要注意：\n\n- 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n- 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n- 关键字不能用作标识符\n- 标识符是大小写敏感的\n- 合法标识符举例：age、$salary、_value、__1_value\n- 非法标识符举例：123abc、-salary\n\n### 1-4 Java修饰符\n\n像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：\n\n- 访问控制修饰符 : default, public , protected, private\n- 非访问控制修饰符 : final, abstract, static, synchronized\n\n在后面的章节中我们会深入讨论 Java 修饰符。\n\n### 1-5 Java 变量\n\nJava 中主要有如下几种类型的变量\n\n- 局部变量\n- 类变量（静态变量）\n- 成员变量（非静态变量）\n\n### 1-6 Java 数组\n\n数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。\n\n### 1-7 Java 枚举\n\nava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。\n\n例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。\n\n```java\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM , LARGE }\n   FreshJuiceSize size;\n}\n \npublic class FreshJuiceTest {\n   public static void main(String []args){\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;\n   }\n}\n```\n\n### 1-8 Java 关键字\n\n![image-20240228195010033](/images/image-20240228195010033.png)\n\n### 1-9 Java注释\n\n类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。\n\n```Java\npublic class HelloWorld {\n   /* 这是第一个Java程序\n    *它将打印Hello World\n    * 这是一个多行注释的示例\n    */\n    public static void main(String []args){\n       // 这是单行注释的示例\n       /* 这个也是单行注释的示例 */\n       System.out.println(\"Hello World\"); \n    }\n}\n```\n\n### 1-10 Java 空行\n\n空白行或者有注释的行，Java 编译器都会忽略掉。\n\n### 1-11 继承\n\n在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。\n\n利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。\n\n------\n\n### 1-12 接口\n\n在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。\n\n接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。\n\n## 2，Java对象和类\n\n### 2-1 Java中的对象\n\n现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。\n\n拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。\n\n对比现实对象和软件对象，它们之间十分相似。\n\n软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。\n\n在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。\n\n### 2-2 Java中的类\n\n类可以看成是创建Java对象的模板。\n\n通过下面一个简单的类来理解下Java中类的定义：\n\n```Java\npublic class Dog{\n  String breed;\n  int age;\n  String color;\n  void barking(){\n  }\n \n  void hungry(){\n  }\n \n  void sleeping(){\n  }\n}\n```\n\n一个类可以包含以下类型变量：\n\n- **局部变量**：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。\n- **成员变量**：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。\n- **类变量**：类变量也声明在类中，方法体之外，但必须声明为static类型。\n\n一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。\n\n------\n\n### 2-3 构造方法\n\n每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。\n\n在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。\n\n下面是一个构造方法示例：\n\n```Java\npublic class Puppy{\n    public Puppy(){\n    }\n \n    public Puppy(String name){\n        // 这个构造器仅有一个参数：name\n    }\n}\n```\n\n### 2-4 创建对象\n\n对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：\n\n- **声明**：声明一个对象，包括对象名称和对象类型。\n- **实例化**：使用关键字new来创建一个对象。\n- **初始化**：使用new创建对象时，会调用构造方法初始化对象。\n\n下面是一个创建对象的例子：\n\n```java\npublic class Puppy{\n   public Puppy(String name){\n      //这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n   public static void main(String[] args){\n      // 下面的语句将创建一个Puppy对象\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n```\n\n编译并运行上面的程序，会打印出下面的结果：\n\n```\n小狗的名字是 : tommy\n```\n\n### 2-5 访问实例变量和方法\n\n通过已创建的对象来访问成员变量和成员方法，如下所示：\n\n```Java\n/* 实例化对象 */\nObject referenceVariable = new Constructor();\n/* 访问类中的变量 */\nreferenceVariable.variableName;\n/* 访问类中的方法 */\nreferenceVariable.methodName();\n```\n\n### 2-6 实例\n\n下面的例子展示如何访问实例变量和调用成员方法：\n\n```java\npublic class Puppy{\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n \n   public void setAge( int age ){\n       puppyAge = age;\n   }\n \n   public int getAge( ){\n       System.out.println(\"小狗的年龄为 : \" + puppyAge ); \n       return puppyAge;\n   }\n \n   public static void main(String[] args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"变量值 : \" + myPuppy.puppyAge ); \n   }\n}\n```\n\n编译并运行上面的程序，产生如下结果：\n\n```\n小狗的名字是 : tommy\n小狗的年龄为 : 2\n变量值 : 2\n```\n\n### 2-7 源文件声明规则\n\n在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。\n\n- 一个源文件中只能有一个public类\n- 一个源文件可以有多个非public类\n- 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。\n- 如果一个类定义在某个包中，那么package语句应该在源文件的首行。\n- 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。\n- import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\n\n类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。\n\n除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。\n\n### 2-8 Java包\n\n包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。\n\n### 2-9 Import语句\n\n在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。\n\n例如，下面的命令行将会命令编译器载入java_installation//images/io路径下的所有类\n\n```java\nimport java.io.*;\n```\n\n### 2-10 一个简单的例子\n\n在该例子中，我们创建两个类：**Employee** 和 **EmployeeTest**。\n\n首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。\n\nEmployee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee{\n   String name;\n   int age;\n   String designation;\n   double salary;\n   // Employee 类的构造器\n   public Employee(String name){\n      this.name = name;\n   }\n   // 设置age的值\n   public void empAge(int empAge){\n      age =  empAge;\n   }\n   /* 设置designation的值*/\n   public void empDesignation(String empDesig){\n      designation = empDesig;\n   }\n   /* 设置salary的值*/\n   public void empSalary(double empSalary){\n      salary = empSalary;\n   }\n   /* 打印信息 */\n   public void printEmployee(){\n      System.out.println(\"名字:\"+ name );\n      System.out.println(\"年龄:\" + age );\n      System.out.println(\"职位:\" + designation );\n      System.out.println(\"薪水:\" + salary);\n   }\n}\n```\n\n程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。\n\n下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。\n\n将下面的代码保存在 EmployeeTest.java文件中。\n\n**EmployeeTest.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class EmployeeTest{\n \n   public static void main(String[] args){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"RUNOOB1\");\n      Employee empTwo = new Employee(\"RUNOOB2\");\n \n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"高级程序员\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n \n      empTwo.empAge(21);\n      empTwo.empDesignation(\"菜鸟程序员\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n\n编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：\n\n```Java\n$ javac EmployeeTest.java\n$ java EmployeeTest \n名字:RUNOOB1\n年龄:26\n职位:高级程序员\n薪水:1000.0\n名字:RUNOOB2\n年龄:21\n职位:菜鸟程序员\n薪水:500.0\n```\n\n## 3，Java基本数据类型\n\n### 3-1 内置数据类型\n\nJava语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。\n\n#### 3-1-1 **byte：**\n\n- byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n- 最小值是 **-128（-2^7）**；\n- 最大值是 **127（2^7-1）**；\n- 默认值是 **0**；\n- byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n- 例子：byte a = 100，byte b = -50。\n\n#### 3-1-2 **short：**\n\n- short 数据类型是 16 位、有符号的以二进制补码表示的整数\n- 最小值是 **-32768（-2^15）**；\n- 最大值是 **32767（2^15 - 1）**；\n- Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n- 默认值是 **0**；\n- 例子：short s = 1000，short r = -20000。\n\n#### 3-1-3 **int：**\n\n- int 数据类型是32位、有符号的以二进制补码表示的整数；\n- 最小值是 **-2,147,483,648（-2^31）**；\n- 最大值是 **2,147,483,647（2^31 - 1）**；\n- 一般地整型变量默认为 int 类型；\n- 默认值是 **0** ；\n- 例子：int a = 100000, int b = -200000。\n\n#### 3-1-4 **long：**\n\n- long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n- 最小值是 **-9,223,372,036,854,775,808（-2^63）**；\n- 最大值是 **9,223,372,036,854,775,807（2^63 -1）**；\n- 这种类型主要使用在需要比较大整数的系统上；\n- 默认值是 **0L**；\n- 例子： long a = 100000L，Long b = -200000L。\n  \"L\"理论上不分大小写，但是若写成\"l\"容易与数字\"1\"混淆，不容易分辩。所以最好大写。\n\n#### 3-1-5 **float：**\n\n- float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\n- float 在储存大型浮点数组的时候可节省内存空间；\n- 默认值是 **0.0f**；\n- 浮点数不能用来表示精确的值，如货币；\n- 例子：float f1 = 234.5f。\n\n#### 3-1-6 **double：**\n\n- double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；\n- 浮点数的默认类型为double类型；\n- double类型同样不能表示精确的值，如货币；\n- 默认值是 **0.0d**；\n- 例子：double d1 = 123.4。\n\n#### 3-1-7 **boolean：**\n\n- boolean数据类型表示一位的信息；\n- 只有两个取值：true 和 false；\n- 这种类型只作为一种标志来记录 true/false 情况；\n- 默认值是 **false**；\n- 例子：boolean one = true。\n\n#### 3-1-8 **char：**\n\n- char类型是一个单一的 16 位 Unicode 字符；\n- 最小值是 **\\u0000**（即为0）；\n- 最大值是 **\\uffff**（即为65,535）；\n- char 数据类型可以储存任何字符；\n- 例子：char letter = 'A';。\n\n### 3-2 实例\n\n对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：\n\n```Java\npublic class PrimitiveTypeTest {  \n    public static void main(String[] args) {  \n        // byte  \n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);  \n        System.out.println(\"包装类：java.lang.Byte\");  \n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);  \n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);  \n        System.out.println();  \n  \n        // short  \n        System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);  \n        System.out.println(\"包装类：java.lang.Short\");  \n        System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);  \n        System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);  \n        System.out.println();  \n  \n        // int  \n        System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);  \n        System.out.println(\"包装类：java.lang.Integer\");  \n        System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);  \n        System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);  \n        System.out.println();  \n  \n        // long  \n        System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);  \n        System.out.println(\"包装类：java.lang.Long\");  \n        System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);  \n        System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);  \n        System.out.println();  \n  \n        // float  \n        System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);  \n        System.out.println(\"包装类：java.lang.Float\");  \n        System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);  \n        System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);  \n        System.out.println();  \n  \n        // double  \n        System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);  \n        System.out.println(\"包装类：java.lang.Double\");  \n        System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);  \n        System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);  \n        System.out.println();  \n  \n        // char  \n        System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);  \n        System.out.println(\"包装类：java.lang.Character\");  \n        // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  \n        System.out.println(\"最小值：Character.MIN_VALUE=\"  \n                + (int) Character.MIN_VALUE);  \n        // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  \n        System.out.println(\"最大值：Character.MAX_VALUE=\"  \n                + (int) Character.MAX_VALUE);  \n    }  \n}\n```\n\n编译以上代码输出结果如下所示：\n\n```Java\n基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127\n\n基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308\n\n基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\n```\n\nFloat和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的\"E+数字\"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。\n\n实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。\n\n### 3-3 类型默认值\n\n下表列出了 Java 各个类型的默认值：\n\n![image-20240228200611781](/images/image-20240228200611781.png)\n\n### 3-4 实例\n\n```Java\npublic class Test {\n    static boolean bool;\n    static byte by;\n    static char ch;\n    static double d;\n    static float f;\n    static int i;\n    static long l;\n    static short sh;\n    static String str;\n \n    public static void main(String[] args) {\n        System.out.println(\"Bool :\" + bool);\n        System.out.println(\"Byte :\" + by);\n        System.out.println(\"Character:\" + ch);\n        System.out.println(\"Double :\" + d);\n        System.out.println(\"Float :\" + f);\n        System.out.println(\"Integer :\" + i);\n        System.out.println(\"Long :\" + l);\n        System.out.println(\"Short :\" + sh);\n        System.out.println(\"String :\" + str);\n    }\n}\n```\n\n实例输出结果为：\n\n```Java\nBool     :false\nByte     :0\nCharacter:\nDouble   :0.0\nFloat    :0.0\nInteger  :0\nLong     :0\nShort    :0\nString   :null\n```\n\n### 3-5 引用类型\n\n- 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\n- 对象、数组都是引用数据类型。\n- 所有引用类型的默认值都是null。\n- 一个引用变量可以用来引用任何与之兼容的类型。\n- 例子：Site site = new Site(\"Runoob\")。\n\n### 3-6 Java 常量\n\n常量在程序运行时是不能被修改的。\n\n在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：\n\n```Java\nfinal double PI = 3.1415927;\n```\n\n虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。\n\n字面量可以赋给任何内置类型的变量。例如：\n\n```Java\nbyte a = 68;\nchar a = 'A'\n```\n\nbyte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。\n\n当使用常量的时候，前缀 **0** 表示 8 进制，而前缀 **0x** 代表 16 进制, 例如：\n\n```Java\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n```\n\n和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：\n\n```Java\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n字符串常量和字符常量都可以包含任何Unicode字符。例如：\n\n```Java\nchar a = '\\u0001';\nString a = \"\\u0001\";\n```\n\nJava语言支持一些特殊的转义字符序列。\n\n![image-20240228200803273](/images/image-20240228200803273.png)\n\n### 3-7 自动类型转换\n\n**整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。**\n\n转换从低级到高级。\n\n```Java\n低  ------------------------------------>  高\n\nbyte,short,char—> int —> long—> float —> double \n```\n\n数据类型转换必须满足如下规则：\n\n- \\1. 不能对boolean类型进行类型转换。\n\n- \\2. 不能把对象类型转换成不相关类的对象。\n\n- \\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n- \\4. 转换过程中可能导致溢出或损失精度，例如：\n\n  ```Java\n  int i =128;   \n  byte b = (byte)i;\n  ```\n\n  因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n- \\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n  ```Java\n  (int)23.7 == 23;        \n  (int)-45.89f == -45\n  ```\n\n**自动类型转换**\n\n必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。\n\n```Java\npublic class ZiDongLeiZhuan{\n        public static void main(String[] args){\n            char c1='a';//定义一个char类型\n            int i1 = c1;//char自动类型转换为int\n            System.out.println(\"char自动类型转换为int后的值等于\"+i1);\n            char c2 = 'A';//定义一个char类型\n            int i2 = c2+1;//char 类型和 int 类型计算\n            System.out.println(\"char类型和int计算后的值等于\"+i2);\n        }\n}\n```\n\n运行结果为:\n\n```\nchar自动类型转换为int后的值等于97\nchar类型和int计算后的值等于66\n```\n\n**解析：**c1 的值为字符 **a** ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 **i2=65+1=66**。\n\n### 3-8 强制类型转换\n\n- \\1. 条件是转换的数据类型必须是兼容的。\n- \\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：\n\n\n\n实例\n\n```Java\npublic class QiangZhiZhuanHuan{\n    public static void main(String[] args){\n        int i1 = 123;\n        byte b = (byte)i1;//强制类型转换为byte\n        System.out.println(\"int强制类型转换为byte后的值等于\"+b);\n    }\n}\n```\n\n- 运行结果：\n\n  ```\n  int强制类型转换为byte后的值等于123\n  ```\n\n### 3-9  隐含强制类型转换\n\n- \\1. 整数的默认类型是 int。\n- \\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。\n\n这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。\n\n## 4，Java变量类型\n\n- 在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n- type identifier [ = value][, identifier [= value] ...] ;\n\n- 格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。\n\n\n以下列出了一些变量的声明实例。注意有些包含了初始化过程。\n\n```Java\nint a, b, c;         // 声明三个int型整数：a、 b、c\nint d = 3, e = 4, f = 5; // 声明三个整数并赋予初值\nbyte z = 22;         // 声明并初始化 z\nString s = \"runoob\";  // 声明并初始化字符串 s\ndouble pi = 3.14159; // 声明了双精度浮点型变量 pi\nchar x = 'x';        // 声明变量 x 的值是字符 'x'。\n```\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n**实例**\n\n```Java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n \n    String str=\"hello world\";  // 实例变量\n \n    public void method(){\n \n        int i =0;  // 局部变量\n \n    }\n}\n```\n\n### 4-1 Java局部变量\n\n- 局部变量声明在方法、构造方法或者语句块中；\n- 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n- 访问修饰符不能用于局部变量；\n- 局部变量只在声明它的方法、构造方法或者语句块中可见；\n- 局部变量是在栈上分配的。\n- 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n#### 4-1-1 **实例 1**\n\n在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是: \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n小狗的年龄是: 7\n```\n\n#### 4-1-2 实例 2\n\n在下面的例子中 age 变量没有初始化，所以在编译时会出错：\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是 : \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n```\n\n### 4-2 实例变量\n\n- 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n- 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n- 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n- 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n- 实例变量可以声明在使用前或者使用后；\n- 访问修饰符可以修饰实例变量；\n- 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；\n- 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n- 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n**实例**\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class Employee{\n   // 这个实例变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"名字 : \" + name );\n      System.out.println(\"薪水 : \" + salary);\n   }\n \n   public static void main(String[] args){\n      Employee empOne = new Employee(\"RUNOOB\");\n      empOne.setSalary(1000.0);\n      empOne.printEmp();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ javac Employee.java \n$ java Employee\n名字 : RUNOOB\n薪水 : 1000.0\n```\n\n### 4-3 类变量（静态变量）\n\n- 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n- 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n- 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。\n- 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。\n- 静态变量在第一次被访问时创建，在程序结束时销毁。\n- 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。\n- 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n- 静态变量可以通过：*ClassName.VariableName*的方式访问。\n- 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n实例：\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee {\n    //salary是静态的私有变量\n    private static double salary;\n    // DEPARTMENT是一个常量\n    public static final String DEPARTMENT = \"开发人员\";\n    public static void main(String[] args){\n    salary = 10000;\n        System.out.println(DEPARTMENT+\"平均工资:\"+salary);\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n开发人员平均工资:10000.0\n```\n\n**注意：**如果其他类想要访问该变量，可以这样访问：**Employee.DEPARTMENT**。\n\n本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。\n\n## 5，Java修饰符\n\nJava语言提供了很多修饰符，主要分为以下两类：\n\n- 访问修饰符\n- 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：\n\n```Java\npublic class ClassName {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 5-1 访问控制修饰符\n\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n- **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n- **private** : 在同一类内可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**\n- **public** : 对所有类可见。使用对象：类、接口、变量、方法\n- **protected** : 对同一包内的类和所有子类可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**。\n\n我们可以通过以下表来说明访问权限：\n\n![image-20240228202210130](/images/image-20240228202210130.png)\n\n**默认访问修饰符-不使用任何关键字**\n\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 **public static final**,而接口里的方法默认情况下访问权限为 **public**。\n\n如下例所示，变量和方法的声明可以不使用任何修饰符。\n\n**实例**\n\n```Java\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n\n### 5-2 私有访问修饰符-private\n\n私有访问修饰符是最严格的访问级别，所以被声明为 **private** 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 **private**。\n\n声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。\n\nPrivate 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n\n下面的类使用了私有访问修饰符：\n\n```Java\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n\n实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）\n\n### 5-3 公有访问修饰符-public\n\n被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n\n以下函数使用了公有访问控制：\n\n```Java\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\nJava 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。\n\n### 5-4 受保护的访问修饰符-protected\n\nprotected 需要从以下两个点来分析说明：\n\n- **子类与基类在同一包中**：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；\n- **子类与基类不在同一包中**：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。\n\nprotected 可以修饰数据成员，构造方法，方法成员，**不能修饰类（内部类除外）**。\n\n子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。\n\n```Java\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n \nclass StreamingAudioPlayer extends AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n\n如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。\n\n如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。\n\n如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。\n\n### 5-5 访问控制和继承\n\n请注意以下方法继承的规则：\n\n- 父类中声明为 public 的方法在子类中也必须为 public。\n- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。\n- 父类中声明为 private 的方法，不能够被继承。\n\n### 5-6 非访问修饰符\n\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\n\nstatic 修饰符，用来修饰类方法和类变量。\n\nfinal 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\nabstract 修饰符，用来创建抽象类和抽象方法。\n\nsynchronized 和 volatile 修饰符，主要用于线程的编程。\n\n#### 5-6-1 static 修饰符\n\n- **静态变量：**\n\n  static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n- **静态方法：**\n\n  static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n对类变量和方法的访问可以直接使用 **classname.variablename** 和 **classname.methodname** 的方式访问。\n\n如下例所示，static修饰符用来创建类方法和类变量。\n\n```Java\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n \n   private static void addInstance() {\n      numInstances++;\n   }\n \n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n \n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" +\n      InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n          }\n      System.out.println(\"Created \" +\n      InstanceCounter.getCount() + \" instances\");\n   }\n}\n```\n\n以上实例运行编辑结果如下:\n\n```Java\nStarting with 0 instances\nCreated 500 instances\n```\n\n#### 5-6-2 final 修饰符\n\n**final 变量：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n```Java\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n \n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\n\n**inal 方法**\n\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\n声明 final 方法的主要目的是防止该方法的内容被修改。\n\n如下所示，使用 final 修饰符声明方法。\n\n```Java\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\n**final 类**\n\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n```Java\npublic final class Test {\n   // 类体\n}\n```\n\n### 5-7 abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n```Java\nabstract class Caravan{\n   private double price;\n   private String model;\n   private String year;\n   public abstract void goFast(); //抽象方法\n   public abstract void changeColor();\n}\n```\n\n**抽象方法**\n\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n\n抽象方法不能被声明成 final 和 static。\n\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n\n抽象方法的声明以分号结尾，例如：**public abstract sample();**。\n\n```Java\npublic abstract class SuperClass{\n    abstract void m(); //抽象方法\n}\n \nclass SubClass extends SuperClass{\n     //实现抽象方法\n      void m(){\n          .........\n      }\n}\n```\n\n### synchronized 修饰符\n\nsynchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。\n\n```Java\npublic synchronized void showDetails(){\n.......\n}\n```\n\n### transient 修饰符\n\n序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n\n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n\n```Java\npublic transient int limit = 55;   // 不会持久化\npublic int b; // 持久化\n```\n\n### volatile 修饰符\n\nvolatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。\n\n```javascript\npublic class MyRunnable implements Runnable\n{\n    private volatile boolean active;\n    public void run()\n    {\n        active = true;\n        while (active) // 第一行\n        {\n            // 代码\n        }\n    }\n    public void stop()\n    {\n        active = false; // 第二行\n    }\n}\n```\n\n通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 ***第一行\\*** 中缓冲区的 active 值被使用，那么在 ***第二行\\*** 的 active 值为 false 时循环不会停止。\n\n但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。\n\n## 6，Java运算符\n\n### 6-1 算术运算符\n\n算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。\n\n表格中的实例假设整数变量A的值为10，变量B的值为20：\n\n![image-20240228212912288](/images/image-20240228212912288.png)\n\n下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     int c = 25;\n     int d = 25;\n     System.out.println(\"a + b = \" + (a + b) );\n     System.out.println(\"a - b = \" + (a - b) );\n     System.out.println(\"a * b = \" + (a * b) );\n     System.out.println(\"b / a = \" + (b / a) );\n     System.out.println(\"b % a = \" + (b % a) );\n     System.out.println(\"c % a = \" + (c % a) );\n     System.out.println(\"a++   = \" +  (a++) );\n     System.out.println(\"a--   = \" +  (a--) );\n     // 查看  d++ 与 ++d 的不同\n     System.out.println(\"d++   = \" +  (d++) );\n     System.out.println(\"++d   = \" +  (++d) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na + b = 30\na - b = -10\na * b = 200\nb / a = 2\nb % a = 0\nc % a = 5\na++   = 10\na--   = 11\nd++   = 25\n++d   = 27\n```\n\n### 6-2 自增自减运算符\n\n**1、自增（++）自减（--）运算符**是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 3;//定义一个变量；\n        int b = ++a;//自增运算\n        int c = 3;\n        int d = --c;//自减运算\n        System.out.println(\"进行自增运算后的值等于\"+b);\n        System.out.println(\"进行自减运算后的值等于\"+d);\n    }\n}\n```\n\n运行结果为：\n\n```\n进行自增运算后的值等于4\n进行自减运算后的值等于2\n```\n\n解析：\n\n- int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4\n- int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2\n\n**2、前缀自增自减法(++a,--a):** 先进行自增或者自减运算，再进行表达式运算。\n\n**3、后缀自增自减法(a++,a--):** 先进行表达式运算，再进行自增或者自减运算 实例：\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        int b = 5;\n        int x = 2*++a;\n        int y = 2*b++;\n        System.out.println(\"自增运算符前缀运算后a=\"+a+\",x=\"+x);\n        System.out.println(\"自增运算符后缀运算后b=\"+b+\",y=\"+y);\n    }\n}\n```\n\n运行结果为：\n\n```\n自增运算符前缀运算后a=6，x=12\n自增运算符后缀运算后b=6，y=10\n```\n\n### 6-3 关系运算符\n\n下表为Java支持的关系运算符\n\n表格中的实例整数变量A的值为10，变量B的值为20：\n\n![image-20240228213115946](/images/image-20240228213115946.png)\n\n下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     System.out.println(\"a == b = \" + (a == b) );\n     System.out.println(\"a != b = \" + (a != b) );\n     System.out.println(\"a > b = \" + (a > b) );\n     System.out.println(\"a < b = \" + (a < b) );\n     System.out.println(\"b >= a = \" + (b >= a) );\n     System.out.println(\"b <= a = \" + (b <= a) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na == b = false\na != b = true\na > b = false\na < b = true\nb >= a = true\nb <= a = false\n```\n\n### 6-4 位运算符\n\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。\n\n位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：\n\n```Java\nA = 0011 1100\nB = 0000 1101\n-----------------\nA&B = 0000 1100\nA | B = 0011 1101\nA ^ B = 0011 0001\n~A= 1100 0011\n```\n\n下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：\n\n![image-20240228213253912](/images/image-20240228213253912.png)\n\n下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     int a = 60; /* 60 = 0011 1100 */ \n     int b = 13; /* 13 = 0000 1101 */\n     int c = 0;\n     c = a & b;       /* 12 = 0000 1100 */\n     System.out.println(\"a & b = \" + c );\n \n     c = a | b;       /* 61 = 0011 1101 */\n     System.out.println(\"a | b = \" + c );\n \n     c = a ^ b;       /* 49 = 0011 0001 */\n     System.out.println(\"a ^ b = \" + c );\n \n     c = ~a;          /*-61 = 1100 0011 */\n     System.out.println(\"~a = \" + c );\n \n     c = a << 2;     /* 240 = 1111 0000 */\n     System.out.println(\"a << 2 = \" + c );\n \n     c = a >> 2;     /* 15 = 1111 */\n     System.out.println(\"a >> 2  = \" + c );\n  \n     c = a >>> 2;     /* 15 = 0000 1111 */\n     System.out.println(\"a >>> 2 = \" + c );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2  = 15\na >>> 2 = 15\n```\n\n### 6-5 逻辑运算符\n\n下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假\n\n![image-20240228213402353](/images/image-20240228213402353.png)\n\n下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     boolean a = true;\n     boolean b = false;\n     System.out.println(\"a && b = \" + (a&&b));\n     System.out.println(\"a || b = \" + (a||b) );\n     System.out.println(\"!(a && b) = \" + !(a && b));\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na && b = false\na || b = true\n!(a && b) = true\n```\n\n### 6-6 短路逻辑运算符\n\n当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。\n\n```Java\npublic class LuoJi{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        boolean b = (a<4)&&(a++<10);\n        System.out.println(\"使用短路逻辑运算符的结果为\"+b);\n        System.out.println(\"a的结果为\"+a);\n    }\n}\n```\n\n运行结果为：\n\n```\n使用短路逻辑运算符的结果为false\na的结果为5\n```\n\n**解析：** *该程序使用到了短路逻辑运算符(&&)，首先判断 a<4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++<10 的判断，所以 a 的值为 5。*\n\n### 6-7 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n![image-20240228213543244](/images/image-20240228213543244.png)\n\n面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        int c = 0;\n        c = a + b;\n        System.out.println(\"c = a + b = \" + c );\n        c += a ;\n        System.out.println(\"c += a  = \" + c );\n        c -= a ;\n        System.out.println(\"c -= a = \" + c );\n        c *= a ;\n        System.out.println(\"c *= a = \" + c );\n        a = 10;\n        c = 15;\n        c /= a ;\n        System.out.println(\"c /= a = \" + c );\n        a = 10;\n        c = 15;\n        c %= a ;\n        System.out.println(\"c %= a  = \" + c );\n        c <<= 2 ;\n        System.out.println(\"c <<= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c &= a ;\n        System.out.println(\"c &= a  = \" + c );\n        c ^= a ;\n        System.out.println(\"c ^= a   = \" + c );\n        c |= a ;\n        System.out.println(\"c |= a   = \" + c );\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nc = a + b = 30\nc += a  = 40\nc -= a = 30\nc *= a = 300\nc /= a = 1\nc %= a  = 5\nc <<= 2 = 20\nc >>= 2 = 5\nc >>= 2 = 1\nc &= a  = 0\nc ^= a   = 10\nc |= a   = 10\n```\n\n### 6-8 条件运算符（?:）\n\n条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。\n\n```Java\nvariable x = (expression) ? value if true : value if false\n```\n\n```Java\n// Test.java 文件代码：\n    \npublic class Test {\n   public static void main(String[] args){\n      int a , b;\n      a = 10;\n      // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30\n      b = (a == 1) ? 20 : 30;\n      System.out.println( \"Value of b is : \" +  b );\n \n      // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30\n      b = (a == 10) ? 20 : 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nValue of b is : 30\nValue of b is : 20\n```\n\n### 6-9 instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\ntrue\n```\n\n### 6-10 Java运算符优先级\n\n当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。\n\n例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。\n\n再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。\n\n下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。\n\n![image-20240228213815636](/images/image-20240228213815636.png)\n\n## 7，Java循环结构\n\n### 7-1 while 循环\n\nwhile是最基本的循环，它的结构为：\n\n```Java\nwhile( 布尔表达式 ) {\n  //循环内容\n}\n```\n\n只要布尔表达式为 true，循环就会一直执行下去。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n   public static void main(String args[]) {\n      int x = 10;\n      while( x < 20 ) {\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-2 do…while 循环\n\n对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。\n\ndo…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。\n\n```Java\ndo {\n       //代码语句\n}while(布尔表达式);\n```\n\n**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int x = 10;\n \n      do{\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }while( x < 20 );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-3 for循环\n\n虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。\n\nfor循环执行的次数是在执行前就确定的。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    //代码语句\n}\n```\n\n关于 for 循环有以下几点说明：\n\n- 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。\n- 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。\n- 执行一次循环后，更新循环控制变量。\n- 再次检测布尔表达式。循环执行上面的过程。\n\n实例\n\n**Test.java 文件代码**\n\n```java\npublic class Test {\n   public static void main(String args[]) {\n \n      for(int x = 10; x < 20; x = x+1) {\n         System.out.print(\"value of x : \" + x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-4 Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\n```java\nfor(声明语句 : 表达式)\n{\n   //代码句子\n}\n```\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10,20,30,40,50,\nJames,Larry,Tom,Lacy,\n```\n\n### 7-5 break 关键字\n\nbreak 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。\n\nbreak 跳出最里层的循环，并且继续执行该循环下面的语句。\n\n语法\n\nbreak 的用法很简单，就是循环结构中的一条语句：\n\n```\nbreak;\n```\n\n实例\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         // x 等于 30 时跳出循环\n         if( x == 30 ) {\n            break;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n10\n20\n```\n\n### 7-6 continue 关键字\n\ncontinue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。\n\n在 for 循环中，continue 语句使程序立即跳转到更新语句。\n\n在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。\n\n语法\n\ncontinue 就是循环体中一条简单的语句：\n\n```\ncontinue;\n```\n\n实例\n\n```java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         if( x == 30 ) {\n        continue;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10\n20\n40\n50\n```\n\n## 8，Java条件语句\n\n### 8-1 if...else语句\n\nif 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。\n\n语法\n\nif…else 的用法如下：\n\n```Java\nif(布尔表达式){\n   //如果布尔表达式的值为true\n}else{\n   //如果布尔表达式的值为false\n}\n```\n\n实例\n\n```Java\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n \n      if( x < 20 ){\n         System.out.print(\"这是 if 语句\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n这是 else 语句\n```\n\n### 8-2 if...else if...else 语句\n\nif 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。\n\n使用 if，else if，else 语句的时候，需要注意下面几点：\n\n- if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。\n- if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。\n- 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。\n\n**语法**\n\nif...else 语法格式如下:\n\n```java\nif(布尔表达式 1){\n   //如果布尔表达式 1的值为true执行代码\n}else if(布尔表达式 2){\n   //如果布尔表达式 2的值为true执行代码\n}else if(布尔表达式 3){\n   //如果布尔表达式 3的值为true执行代码\n}else {\n   //如果以上布尔表达式都不为true执行代码\n}\n```\n\n**实例**\n\n```Java\n// Test.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int x = 30;\n \n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\nValue of X is 30\n```\n\n### 8-3 嵌套的 if…else 语句\n\n使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。\n\n**语法**\n\n嵌套的 if…else 语法格式如下：\n\n```java\nif(布尔表达式 1){\n   ////如果布尔表达式 1的值为true执行代码\n   if(布尔表达式 2){\n      ////如果布尔表达式 2的值为true执行代码\n   }\n}\n```\n\n你可以像 if 语句一样嵌套 else if...else。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n \n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n以上代码编译运行结果如下：\n\n```java\nX = 30 and Y = 10\n```\n\n## 9，Java switch case 语句\n\nswitch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。\n\n**语法**\n\nswitch case 语句语法格式如下：\n\n```Java\nswitch(expression){\n    case value :\n       //语句\n       break; //可选\n    case value :\n       //语句\n       break; //可选\n    //你可以有任意数量的case语句\n    default : //可选\n       //语句\n}\n```\n\nswitch case 语句有如下规则：\n\n- switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。\n- switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。\n- case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。\n- 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。\n- 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。\n- switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。\n\n**switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。**\n\n**实例**\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n \n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n            break;\n         case 'F' :\n            System.out.println(\"你需要再努力努力\");\n            break;\n         default :\n            System.out.println(\"未知等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```Java\n良好\n你的等级是 C\n```\n\n如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int i = 5;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\ndefault\n```\n\n如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。\n\n```Java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\ndefault\n```\n\n如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         case 3:\n            System.out.println(\"3\"); break;\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\n3\n```\n\n## 10，Java Number & Math 类\n\n一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：**byte、int、long、double** 等。\n\n```Java\nint a = 5000;\nfloat b = 13.65f;\nbyte c = 0x4a;\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。\n\n所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。\n\n这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。\n\n下面是一个使用 Integer 对象的实例：\n\n```java\n// Test.java 文件代码：\n\npublic class Test{\n \n   public static void main(String args[]){\n      Integer x = 5;\n      x =  x + 10;\n      System.out.println(x); \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n15\n```\n\n当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。\n\n### 10-1 Java Math 类\n\nJava 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。\n\nMath 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。\n\n```java\nTest.java 文件代码：\npublic class Test {  \n    public static void main (String []args)  \n    {  \n        System.out.println(\"90 度的正弦值：\" + Math.sin(Math.PI/2));  \n        System.out.println(\"0度的余弦值：\" + Math.cos(0));  \n        System.out.println(\"60度的正切值：\" + Math.tan(Math.PI/3));  \n        System.out.println(\"1的反正切值： \" + Math.atan(1));  \n        System.out.println(\"π/2的角度值：\" + Math.toDegrees(Math.PI/2));  \n        System.out.println(Math.PI);  \n    }  \n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n90 度的正弦值：1.0\n0度的余弦值：1.0\n60度的正切值：1.7320508075688767\n1的反正切值： 0.7853981633974483\nπ/2的角度值：90.0\n3.141592653589793\n```\n\n### 10-2 Number & Math 类方法\n\n下面的表中列出的是 Number & Math 类常用的一些方法：\n\n![image-20240228220453132](/images/image-20240228220453132.png)\n\n### 10-3 Math 的 floor,round 和 ceil 方法实例比较\n\n![image-20240228220635826](/images/image-20240228220635826.png)\n\n**floor,round 和 ceil 实例：**\n\n```java\npublic class Main {   \n  public static void main(String[] args) {   \n    double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };   \n    for (double num : nums) {   \n      test(num);   \n    }   \n  }   \n  \n  private static void test(double num) {   \n    System.out.println(\"Math.floor(\" + num + \")=\" + Math.floor(num));   \n    System.out.println(\"Math.round(\" + num + \")=\" + Math.round(num));   \n    System.out.println(\"Math.ceil(\" + num + \")=\" + Math.ceil(num));   \n  }   \n}\n```\n\n以上实例执行输出结果为：\n\n```java\nMath.floor(1.4)=1.0\nMath.round(1.4)=1\nMath.ceil(1.4)=2.0\nMath.floor(1.5)=1.0\nMath.round(1.5)=2\nMath.ceil(1.5)=2.0\nMath.floor(1.6)=1.0\nMath.round(1.6)=2\nMath.ceil(1.6)=2.0\nMath.floor(-1.4)=-2.0\nMath.round(-1.4)=-1\nMath.ceil(-1.4)=-1.0\nMath.floor(-1.5)=-2.0\nMath.round(-1.5)=-1\nMath.ceil(-1.5)=-1.0\nMath.floor(-1.6)=-2.0\nMath.round(-1.6)=-2\nMath.ceil(-1.6)=-1.0\n```\n\n## 11，Java Character 类\n\nCharacter 类用于对单个字符进行操作。\n\nCharacter 类在对象中包装一个基本类型 **char** 的值\n\n```Java\nchar ch = 'a';\n \n// Unicode 字符表示形式\nchar uniChar = '\\u039A'; \n \n// 字符数组\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。\n\nCharacter类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：\n\n```Java\nCharacter ch = new Character('a');\n```\n\n在某些情况下，Java编译器会自动创建一个Character对象。\n\n例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。\n\n```Java\n// 原始字符 'a' 装箱到 Character 对象 ch 中\nCharacter ch = 'a';\n \n// 原始字符 'x' 用 test 方法装箱\n// 返回拆箱的值到 'c'\nchar c = test('x');\n```\n\n### 11-1 转义序列\n\n前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。\n\n下面列表展示了Java的转义序列：\n\n![image-20240228220904427](/images/image-20240228220904427.png)\n\n**实例**\n\n当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。\n\n以下实例转义双引号并输出：\n\n```Java\nTest.java 文件代码：\npublic class Test {\n \n   public static void main(String args[]) {\n      System.out.println(\"访问\\\"菜鸟教程!\\\"\");\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n访问\"菜鸟教程!\"\n```\n\n### 11-2 Character 方法\n\n下面是Character类的方法：\n\n![image-20240228220959034](/images/image-20240228220959034.png)\n\n## 12，Java String 类\n\n### 12-1 创建字符串\n\n创建字符串最简单的方式如下:\n\n```Java\nString greeting = \"菜鸟教程\";\n```\n\n在代码中遇到字符串常量时，这里的值是 \"**菜鸟教程**\"\"，编译器会使用该值创建一个 String 对象。\n\n和其它对象一样，可以使用关键字和构造方法来创建 String 对象。\n\nString 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo{\n   public static void main(String args[]){\n      char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'};\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nrunoob\n```\n\n**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。\n\n如果需要对字符串做很多修改，那么应该选择使用 [StringBuffer & StringBuilder 类](http://it028.com/java-stringbuffer.html)。\n\n### 12-2 字符串长度\n\n用于获取有关对象的信息的方法称为访问器方法。\n\nString 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。\n\n下面的代码执行后，len 变量等于 14:\n\n```java\n// StringDemo.java 文件代码：\npublic class StringDemo {\n    public static void main(String args[]) {\n        String site = \"www.runoob.com\";\n        int len = site.length();\n        System.out.println( \"菜鸟教程网址长度 : \" + len );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程网址长度 : 14\n```\n\n### 12-3 连接字符串\n\nString 类提供了连接两个字符串的方法：\n\nstring1.concat(string2);\n\n返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：\n\n```\n\"我的名字是 \".concat(\"Runoob\");\n```\n\n更常用的是使用'+'操作符来连接字符串，如：\n\n```\n\"Hello,\" + \" runoob\" + \"!\"\n```\n\n结果如下:\n\n```\n\"Hello, runoob!\"\n```\n\n下面是一个例子:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo {\n    public static void main(String args[]) {     \n        String string1 = \"菜鸟教程网址：\";     \n        System.out.println(\"1、\" + string1 + \"www.runoob.com\");  \n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1、菜鸟教程网址：www.runoob.com\n```\n\n### 12-4 创建格式化字符串\n\n我们知道输出格式化数字可以使用 printf() 和 format() 方法。\n\nString 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。\n\nString 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。\n\n如下所示：\n\n```java\nSystem.out.printf(\"浮点型变量的值为 \" +\n                  \"%f, 整型变量的值为 \" +\n                  \" %d, 字符串变量的值为 \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n```\n\n你也可以这样写\n\n```java\nString fs;\nfs = String.format(\"浮点型变量的值为 \" +\n                   \"%f, 整型变量的值为 \" +\n                   \" %d, 字符串变量的值为 \" +\n                   \" %s\", floatVar, intVar, stringVar);\n```\n\n### 12-5 String 方法\n\n下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm('https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html') 文档:\n\n![image-20240228221437713](/images/image-20240228221437713.png)\n\n## 13，Java StringBuffer 和 StringBuilder 类\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n```Java\nTest.java 文件代码：\npublic class Test{\n  public static void main(String args[]){\n    StringBuffer sBuffer = new StringBuffer(\"菜鸟教程官网：\");\n    sBuffer.append(\"www\");\n    sBuffer.append(\".runoob\");\n    sBuffer.append(\".com\");\n    System.out.println(sBuffer);  \n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程官网：www.runoob.com\n```\n\n### 13-1 StringBuffer 方法\n\n以下是 StringBuffer 类支持的主要方法\n\n![image-20240228221542960](/images/image-20240228221542960.png)\n\n下面的列表里的方法和 String 类的方法类似：\n\n![image-20240228221620605](/images/image-20240228221620605.png)\n\n## 14，Java数组\n\n### 14-1 声明数组变量\n\n首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：\n\n```Java\ndataType[] arrayRefVar;   // 首选的方法\n \n或\n \ndataType arrayRefVar[];  // 效果相同，但不是首选方法\n```\n\n**注意:** 建议使用 **dataType[] arrayRefVar** 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。\n\n下面是这两种语法的代码示例：\n\n```Java\ndouble[] myList;         // 首选的方法\n \n或\n \ndouble myList[];         //  效果相同，但不是首选方法\n```\n\n### 14-2 创建数组\n\nJava语言使用new操作符来创建数组，语法如下：\n\n```\narrayRefVar = new dataType[arraySize];\n```\n\n上面的语法语句做了两件事：\n\n- 一、使用 dataType[arraySize] 创建了一个数组。\n- 二、把新创建的数组的引用赋值给变量 arrayRefVar。\n\n数组变量的声明，和创建数组可以用一条语句完成，如下所示：\n\n```\ndataType[] arrayRefVar = new dataType[arraySize];\n```\n\n另外，你还可以使用如下的方式创建数组。\n\n```\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n```\n\n数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。\n\n**实例**\n\n下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。\n\n```Java\nTestArray.java 文件代码：\npublic class TestArray {\n   public static void main(String[] args) {\n      // 数组大小\n      int size = 10;\n      // 定义数组\n      double[] myList = new double[size];\n      myList[0] = 5.6;\n      myList[1] = 4.5;\n      myList[2] = 3.3;\n      myList[3] = 13.2;\n      myList[4] = 4.0;\n      myList[5] = 34.33;\n      myList[6] = 34.0;\n      myList[7] = 45.45;\n      myList[8] = 99.993;\n      myList[9] = 11123;\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < size; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"总和为： \" + total);\n   }\n}\n```\n\n以上实例输出结果为：\n\n```\n总和为： 11367.373\n```\n\n### 14-3 处理数组\n\n数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。\n\n**示例**\n\n该实例完整地展示了如何创建、初始化和操纵数组：\n\n```Java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      // 查找最大元素\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n```\n\n### 14-4 For-Each 循环\n\nJDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。\n\n语法格式如下：\n\n```java\nfor(type element: array)\n{\n    System.out.println(element);\n}\n```\n\n**实例**\n\n该实例用来显示数组 myList 中的所有元素：\n\n```java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1.9\n2.9\n3.4\n3.5\n```\n\n### 14-5 数组作为函数的参数\n\n数组可以作为参数传递给方法。\n\n例如，下面的例子就是一个打印 int 数组中元素的方法:\n\n```java\npublic static void printArray(int[] array) {\n  for (int i = 0; i < array.length; i++) {\n    System.out.print(array[i] + \" \");\n  }\n}\n```\n\n下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：\n\n```java\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n```\n\n### 14-6 数组作为函数的返回值\n\n```java\npublic static int[] reverse(int[] list) {\n  int[] result = new int[list.length];\n \n  for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n    result[j] = list[i];\n  }\n  return result;\n}\n```\n\n### 14-7 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：\n\n```java\nString str[][] = new String[3][4];\n```\n\n#### 14-7-1 多维数组的动态初始化（以二维数组为例）\n\n1. 直接为每一维分配空间，格式如下：\n\n```java\ntype[][] typeName = new type[typeLength1][typeLength2];\n```\n\ntype 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。\n\n例如：\n\n```java\nint a[][] = new int[2][3];\n```\n\n解析：\n\n二维数组 a 可以看成一个两行三列的数组。\n\n2，从最高维开始，分别为每一维分配空间，例如：\n\n```Java\nString s[][] = new String[2][];\ns[0] = new String[2];\ns[1] = new String[3];\ns[0][0] = new String(\"Good\");\ns[0][1] = new String(\"Luck\");\ns[1][0] = new String(\"to\");\ns[1][1] = new String(\"you\");\ns[1][2] = new String(\"!\");\n```\n\n解析：\n\n**s[0]=new String[2]** 和 **s[1]=new String[3]** 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 **s0=new String(\"Good\")** 等操作。\n\n#### 14-7-2 多维数组的引用（以二维数组为例）\n\n对二维数组中的每个元素，引用方式为 **arrayName[index1][index2]**，例如：\n\n```Java\nnum[1][0];\n```\n\n### 14-8 Arrays 类\n\njava.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。\n\n具有以下功能：\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n具体说明请查看下表：\n\n![image-20240228222507296](/images/image-20240228222507296.png)\n\n## 15，Java 日期时间\n\njava.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。\n\n第一个构造函数使用当前日期和时间来初始化对象。\n\n```Java\nDate( )\n```\n\n第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。\n\n```\nDate(long millisec)\n```\n\nDate对象创建以后，可以调用下面的方法。\n\n![image-20240228222725206](/images/image-20240228222725206.png)\n\n### 15-1 获取当前日期时间\n\nJava中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用 toString() 函数显示日期时间\n       System.out.println(date.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nMon May 04 09:51:52 CDT 2013\n```\n\n### 15-2 日期比较\n\nJava使用以下三种方法来比较两个日期：\n\n- 使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。\n- 使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。\n- 使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。\n\n### 15-3 使用 SimpleDateFormat 格式化日期\n\nSimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：\n\n```Java\nimport  java.util.*;\nimport java.text.*;\n \npublic class DateDemo {\n   public static void main(String args[]) {\n \n      Date dNow = new Date( );\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n \n      System.out.println(\"当前时间为: \" + ft.format(dNow));\n   }\n}\n```\n\n```\nSimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n```\n\n这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。\n\n**注意**:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。\n\n以上实例编译运行结果如下:\n\n```\n当前时间为: 2018-09-06 10:16:34\n```\n\n### 15-4 日期和时间的格式化编码\n\n时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：\n\n![image-20240228222933035](/images/image-20240228222933035.png)\n\n### 15-5 使用printf格式化日期\n\nprintf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 **%t** 开头并且以下面表格中的一个字母结尾。\n\n![image-20240228223002094](/images/image-20240228223002094.png)\n\n**实例**\n\n```Java\nimport java.util.Date;\n \npublic class DateDemo {\n \n  public static void main(String args[]) {\n     // 初始化 Date 对象\n     Date date = new Date();\n \n     //c的使用  \n    System.out.printf(\"全部日期和时间信息：%tc%n\",date);          \n    //f的使用  \n    System.out.printf(\"年-月-日格式：%tF%n\",date);  \n    //d的使用  \n    System.out.printf(\"月/日/年格式：%tD%n\",date);  \n    //r的使用  \n    System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\",date);  \n    //t的使用  \n    System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\",date);  \n    //R的使用  \n    System.out.printf(\"HH:MM格式（24时制）：%tR\",date);  \n  }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  \n年-月-日格式：2012-09-10  \n月/日/年格式：09/10/12  \nHH:MM:SS PM格式（12时制）：10:43:36 上午  \nHH:MM:SS格式（24时制）：10:43:36  \nHH:MM格式（24时制）：10:43  \n```\n\n如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。\n\n索引必须紧跟在%后面，而且必须以$结束。例如\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用toString()显示日期和时间\n       System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n或者，你可以使用 < 标志。它表明先前被格式化的参数要被再次使用。例如：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 显示格式化时间\n       System.out.printf(\"%s %tB %<te, %<tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：\n\n```Java\nimport java.util.*;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       Date date=new Date();                                      \n        //b的使用，月份简称  \n        String str=String.format(Locale.US,\"英文月份简称：%tb\",date);       \n        System.out.println(str);                                                                              \n        System.out.printf(\"本地月份简称：%tb%n\",date);  \n        //B的使用，月份全称  \n        str=String.format(Locale.US,\"英文月份全称：%tB\",date);  \n        System.out.println(str);  \n        System.out.printf(\"本地月份全称：%tB%n\",date);  \n        //a的使用，星期简称  \n        str=String.format(Locale.US,\"英文星期的简称：%ta\",date);  \n        System.out.println(str);  \n        //A的使用，星期全称  \n        System.out.printf(\"本地星期的简称：%tA%n\",date);  \n        //C的使用，年前两位  \n        System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\",date);  \n        //y的使用，年后两位  \n        System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\",date);  \n        //j的使用，一年的天数  \n        System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\",date);  \n        //m的使用，月份  \n        System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\",date);  \n        //d的使用，日（二位，不够补零）  \n        System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\",date);  \n        //e的使用，日（一位不补零）  \n        System.out.printf(\"月份的日（前面不补0）：%te\",date);  \n   }\n}\n```\n\n输出结果为：\n\n```Java\n英文月份简称：May\n本地月份简称：五月\n英文月份全称：May\n本地月份全称：五月\n英文星期的简称：Thu\n本地星期的简称：星期四\n年的前两位数字（不足两位前面补0）：20\n年的后两位数字（不足两位前面补0）：17\n一年中的天数（即年的第几天）：124\n两位数字的月份（不足两位前面补0）：05\n两位数字的日（不足两位前面补0）：04\n月份的日（前面不补0）：4\n```\n\n------\n\n### 15-6 解析字符串为时间\n\nSimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：\n\n```Java\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n \n      System.out.print(input + \" Parses as \"); \n \n      Date t; \n \n      try { \n          t = ft.parse(input); \n          System.out.println(t); \n      } catch (ParseException e) { \n          System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ java DateDemo\n1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818\n$ java DateDemo 2007-12-01\n2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007\n```\n\n### 15-7 Java 休眠(sleep)\n\nsleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。\n\n你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：\n\n```Java\nimport java.util.*;\n  \npublic class SleepDemo {\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(1000*3);   // 休眠3秒\n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) { \n          System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nThu Sep 17 10:20:30 CST 2015\n\nThu Sep 17 10:20:33 CST 2015\n```\n\n### 15-8 测量时间\n\n下面的一个例子表明如何测量时间间隔（以毫秒为单位）：\n\n```Java\nimport java.util.*;\n  \npublic class DiffDemo {\n \n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nFri Jan 08 09:48:47 CST 2016\n\nFri Jan 08 09:48:50 CST 2016\n\nDifference is : 3019\n```\n\n### 15-9 Calendar类\n\n我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。\n\nCalendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。\n\nCalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。\n\n#### 15-9-1 创建一个代表系统当前日期的Calendar对象\n\n```Java\nCalendar c = Calendar.getInstance();//默认是当前日期\n```\n\n#### 15-9-2 创建一个指定日期的Calendar对象\n\n使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。\n\n```Java\n//创建一个代表2009年6月12日的Calendar对象\nCalendar c1 = Calendar.getInstance();\nc1.set(2009, 6 - 1, 12);\n```\n\n#### 15-9-3 Calendar类对象字段类型\n\nCalendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想\n\n![image-20240228225026914](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225026914.png)\n\n#### 15-9-4 Calendar类对象信息的设置\n\n**Set设置**\n\n如：\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n调用：\n\n```\npublic final void set(int year,int month,int date)\nc1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12\n```\n\n利用字段类型设置\n\n如果只设定某个字段，例如日期的值，则可以使用如下set方法：\n\n```\npublic void set(int field,int value)\n```\n\n把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算\n\n```\nc1.set(Calendar.DATE,10);\n```\n\n把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算\n\n```\nc1.set(Calendar.YEAR,2008);\n```\n\n其他字段属性set的意义以此类推\n\n**Add设置**\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, 10);\n```\n\n把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, -10);\n```\n\n其他字段属性的add的意义以此类推\n\n#### 15-9-5 Calendar类对象信息的获得\n\n```Java\nCalendar c1 = Calendar.getInstance();\n// 获得年份\nint year = c1.get(Calendar.YEAR);\n// 获得月份\nint month = c1.get(Calendar.MONTH) + 1;\n// 获得日期\nint date = c1.get(Calendar.DATE);\n// 获得小时\nint hour = c1.get(Calendar.HOUR_OF_DAY);\n// 获得分钟\nint minute = c1.get(Calendar.MINUTE);\n// 获得秒\nint second = c1.get(Calendar.SECOND);\n// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）\nint day = c1.get(Calendar.DAY_OF_WEEK);\n```\n\n### 15-10 GregorianCalendar类\n\nCalendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。\n\nCalendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。\n\n下面列出GregorianCalendar对象的几个构造方法：\n\n![image-20240228225136150](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225136150.png)\n\n这里是GregorianCalendar 类提供的一些有用的方法列表：\n\n![image-20240228225205976](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225205976.png)\n\n```Java\nimport java.util.*;\n  \npublic class GregorianCalendarDemo {\n \n   public static void main(String args[]) {\n      String months[] = {\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n      \"May\", \"Jun\", \"Jul\", \"Aug\",\n      \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // 初始化 Gregorian 日历\n      // 使用当前时间和日期\n      // 默认为本地时间和时区\n      GregorianCalendar gcalendar = new GregorianCalendar();\n      // 显示当前时间和日期的信息\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n      \n      // 测试当前年份是否为闰年\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"当前年份是闰年\");\n      }\n      else {\n         System.out.println(\"当前年份不是闰年\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nDate: Apr 22 2009\nTime: 11:25:27\n当前年份不是闰年\n```\n\n关于 Calender 类的完整列表，你可以参考标准的 [Java文档](http://it028.com/index-10.htm)。\n\n## 16，Java 正则表达式\n\n正则表达式定义了字符串的模式。\n\n正则表达式可以用来搜索、编辑或处理文本。\n\n正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。\n\n### 16-1 正则表达式实例\n\n一个字符串其实就是一个简单的正则表达式，例如 **Hello World** 正则表达式匹配 \"Hello World\" 字符串。\n\n**.**（点号）也是一个正则表达式，它匹配任何一个字符如：\"a\" 或 \"1\"。\n\n下表列出了一些正则表达式的实例及描述：\n\n![image-20240228225320769](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225320769.png)\n\nJava 正则表达式和 Perl 的是最为相似的。\n\njava.util.regex 包主要包括以下三个类：\n\n- Pattern 类：\n\n  pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\n\n- Matcher 类：\n\n  Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\n\n- PatternSyntaxException：\n\n  PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\n\n以下实例中使用了正则表达式 **.\\*runoob.\\*** 用于查找字符串中是否包了 **runoob** 子串：\n\n```Java\nimport java.util.regex.*;\n \nclass RegexExample1{\n   public static void main(String args[]){\n      String content = \"I am noob \" +\n        \"from runoob.com.\";\n \n      String pattern = \".*runoob.*\";\n \n      boolean isMatch = Pattern.matches(pattern, content);\n      System.out.println(\"字符串中是否包含了 'runoob' 子字符串? \" + isMatch);\n   }\n}\n```\n\n实例输出结果为：\n\n```\n字符串中是否包含了 'runoob' 子字符串? true\n```\n\n### 16-2 捕获组\n\n捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。\n\n例如，正则表达式 (dog) 创建了单一分组，组里包含\"d\"，\"o\"，和\"g\"。\n\n捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：\n\n- ((A)(B(C)))\n- (A)\n- (B(C))\n- (C)\n\n可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。\n\n还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    public static void main( String args[] ){\n \n      // 按指定模式在字符串查找\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(\\\\D*)(\\\\d+)(.*)\";\n \n      // 创建 Pattern 对象\n      Pattern r = Pattern.compile(pattern);\n \n      // 现在创建 matcher 对象\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n         System.out.println(\"Found value: \" + m.group(3) ); \n      } else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT\nFound value: 3000\nFound value: ! OK?\n```\n\n------\n\n### 16-3 正则表达式语法\n\n在其他语言中，**\\\\** 表示：**我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。**\n\n在 Java 中，**\\\\** 表示：**我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。**\n\n所以，在其他的语言中（如Perl），一个反斜杠 **\\** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 **\\\\** 代表其他语言中的一个 **\\**，这也就是为什么表示一位数字的正则表达式是 **\\\\d**，而表示一个普通的反斜杠是 **\\\\\\\\**。\n\n![image-20240228225546405](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225546405.png)\n\n### 16-4 Matcher 类的方法\n\n#### 16-4-1 索引方法\n\n索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：\n\n![image-20240228225637596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225637596.png)\n\n#### 16-4-2 研究方法\n\n研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：\n\n![image-20240228225700596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225700596.png)\n\n#### 16-4-3 替换方法\n\n替换方法是替换输入字符串里文本的方法：\n\n![image-20240228225727777](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225727777.png)\n\n#### 16-4-4 start 和 end 方法\n\n下面是一个对单词 \"cat\" 出现在输入字符串中出现次数进行计数的例子：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"\\\\bcat\\\\b\";\n    private static final String INPUT =\n                                    \"cat cat cat cattie cat\";\n \n    public static void main( String args[] ){\n       Pattern p = Pattern.compile(REGEX);\n       Matcher m = p.matcher(INPUT); // 获取 matcher 对象\n       int count = 0;\n \n       while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n```\n\n可以看到这个例子是使用单词边界，以确保字母 \"c\" \"a\" \"t\" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。\n\nStart 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。\n\n#### 16-4-5 matches 和 lookingAt 方法\n\nmatches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。\n\nlookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。\n\n这两个方法经常在输入字符串的开始使用。\n\n我们通过下面这个例子，来解释这个功能：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"foo\";\n    private static final String INPUT = \"fooooooooooooooooo\";\n    private static final String INPUT2 = \"ooooofoooooooooooo\";\n    private static Pattern pattern;\n    private static Matcher matcher;\n    private static Matcher matcher2;\n \n    public static void main( String args[] ){\n       pattern = Pattern.compile(REGEX);\n       matcher = pattern.matcher(INPUT);\n       matcher2 = pattern.matcher(INPUT2);\n \n       System.out.println(\"Current REGEX is: \"+REGEX);\n       System.out.println(\"Current INPUT is: \"+INPUT);\n       System.out.println(\"Current INPUT2 is: \"+INPUT2);\n \n \n       System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n       System.out.println(\"matches(): \"+matcher.matches());\n       System.out.println(\"lookingAt(): \"+matcher2.lookingAt());\n   }\n```\n\n以上实例编译运行结果如下：\n\n```\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nCurrent INPUT2 is: ooooofoooooooooooo\nlookingAt(): true\nmatches(): false\nlookingAt(): false\n```\n\n#### 16-4-6 replaceFirst 和 replaceAll 方法\n\nreplaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。\n\n下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static String REGEX = \"dog\";\n    private static String INPUT = \"The dog says meow. \" +\n                                    \"All dogs say meow.\";\n    private static String REPLACE = \"cat\";\n \n    public static void main(String[] args) {\n       Pattern p = Pattern.compile(REGEX);\n       // get a matcher object\n       Matcher m = p.matcher(INPUT); \n       INPUT = m.replaceAll(REPLACE);\n       System.out.println(INPUT);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe cat says meow. All cats say meow.\n```\n\n#### 16-4-7 appendReplacement 和 appendTail 方法\n\nMatcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：\n\n看下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoobkkk\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      // 获取 matcher 对象\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()){\n         m.appendReplacement(sb,REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n-foo-foo-foo-kkk\n```\n\n#### 16-4-8 PatternSyntaxException 类的方法\n\nPatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。\n\nPatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。\n\n![image-20240228230136771](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228230136771.png)\n\n## 17，Java 方法\n\n在前面几个章节中我们经常使用到 **System.out.println()**，那么它是什么呢？\n\n- println() 是一个方法。\n- System 是系统类。\n- out 是标准输出对象。\n\n这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。\n\n\n\n### 17-1 那么什么是方法呢？\n\nJava方法是语句的集合，它们在一起执行一个功能。\n\n- 方法是解决一类问题的步骤的有序组合\n- 方法包含于类或对象中\n- 方法在程序中被创建，在其他地方被引用\n\n### 17-2 方法的优点\n\n- \\1. 使程序变得更简短而清晰。\n- \\2. 有利于程序维护。\n- \\3. 可以提高程序开发的效率。\n- \\4. 提高了代码的重用性。\n\n### 17-3 方法的命名规则\n\n- 1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：**addPerson**。\n- 2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：**test<MethodUnderTest>_<state>**，例如 **testPop_emptyStack**。\n\n------\n\n### 17-4 方法的定义\n\n一般情况下，定义一个方法包含以下语法：\n\n```Java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n\n方法包含一个方法头和一个方法体。下面是一个方法的所有部分：\n\n- **修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。\n- **返回值类型 ：**方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字**void**。\n- **方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。\n- **参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。\n- **方法体：**方法体包含具体的语句，定义该方法的功能。\n\n```Java\npublic static int age(int birthday){...}\n```\n\n参数可以有多个：\n\n```Java\nstatic float interest(float principal, int year){...}\n```\n\n**注意：** 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。\n\n下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。\n\n```Java\n/** 返回两个整型变量数据的较大值 */\npublic static int max(int num1, int num2) {\n   int result;\n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n```\n\n### 17-5 方法调用\n\nJava 支持两种调用方法的方式，根据方法是否返回值来选择。\n\n当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。\n\n当方法返回一个值的时候，方法调用通常被当做一个值。例如：\n\n```Java\nint larger = max(30, 40);\n```\n\n如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：\n\n```Java\nSystem.out.println(\"欢迎访问菜鸟教程！\");\n```\n\n下面的例子演示了如何定义一个方法，以及如何调用它：\n\n```Java\n// TestMax.java 文件代码：\n\npublic class TestMax {\n   /** 主方法 */\n   public static void main(String[] args) {\n      int i = 5;\n      int j = 2;\n      int k = max(i, j);\n      System.out.println( i + \" 和 \" + j + \" 比较，最大值是：\" + k);\n   }\n \n   /** 返回两个整数变量较大的值 */\n   public static int max(int num1, int num2) {\n      int result;\n      if (num1 > num2)\n         result = num1;\n      else\n         result = num2;\n \n      return result; \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n5 和 2 比较，最大值是：5\n```\n\n这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。\n\nmain 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。\n\n### 17-6 void 关键字\n\n本节说明如何声明和调用一个 void 方法。\n\n下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。\n\n```java\nTestVoidMethod.java 文件代码：\npublic class TestVoidMethod {\n  public static void main(String[] args) {\n    printGrade(78.5);\n  }\n \n  public static void printGrade(double score) {\n    if (score >= 90.0) {\n       System.out.println('A');\n    }\n    else if (score >= 80.0) {\n       System.out.println('B');\n    }\n    else if (score >= 70.0) {\n       System.out.println('C');\n    }\n    else if (score >= 60.0) {\n       System.out.println('D');\n    }\n    else {\n       System.out.println('F');\n    }\n  }\n}\n```\n\n\n\n以上实例编译运行结果如下：\n\n```\nC\n```\n\n这里printGrade方法是一个void类型方法，它不返回值。\n\n一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。\n\n------\n\n### 17-7 通过值传递参数\n\n调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。\n\n例如，下面的方法连续n次打印一个消息：\n\n```java\n// TestVoidMethod.java 文件代码：\npublic static void nPrintln(String message, int n) {\n  for (int i = 0; i < n; i++) {\n    System.out.println(message);\n  }\n}\n```\n\n**示例**\n\n下面的例子演示按值传递的效果。\n\n该程序创建一个方法，该方法用于交换两个变量。\n\n```java\n// TestPassByValue.java 文件代码：\npublic class TestPassByValue {\n  public static void main(String[] args) {\n    int num1 = 1;\n    int num2 = 2;\n \n    System.out.println(\"交换前 num1 的值为：\" +\n                        num1 + \" ，num2 的值为：\" + num2);\n \n    // 调用swap方法\n    swap(num1, num2);\n    System.out.println(\"交换后 num1 的值为：\" +\n                       num1 + \" ，num2 的值为：\" + num2);\n  }\n  /** 交换两个变量的方法 */\n  public static void swap(int n1, int n2) {\n    System.out.println(\"\\t进入 swap 方法\");\n    System.out.println(\"\\t\\t交换前 n1 的值为：\" + n1\n                         + \"，n2 的值：\" + n2);\n    // 交换 n1 与 n2的值\n    int temp = n1;\n    n1 = n2;\n    n2 = temp;\n \n    System.out.println(\"\\t\\t交换后 n1 的值为 \" + n1\n                         + \"，n2 的值：\" + n2);\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n交换前 num1 的值为：1 ，num2 的值为：2\n    进入 swap 方法\n        交换前 n1 的值为：1，n2 的值：2\n        交换后 n1 的值为 2，n2 的值：1\n交换后 num1 的值为：1 ，num2 的值为：2\n```\n\n传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。\n\n------\n\n### 17-8 方法的重载\n\n上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？\n\n解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：\n\n```java\npublic static double max(double num1, double num2) {\n  if (num1 > num2)\n    return num1;\n  else\n    return num2;\n}\n```\n\n如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；\n\n如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；\n\n就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。\n\nJava编译器根据方法签名判断哪个方法应该被调用。\n\n方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。\n\n重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。\n\n### 17-9 变量作用域\n\n- 变量的范围是程序中该变量可以被引用的部分。\n- 方法内定义的变量被称为局部变量。\n- 局部变量的作用范围从声明开始，直到包含它的块结束。\n- 局部变量必须声明才可以使用。\n- 方法的参数范围涵盖整个方法。参数实际上是一个局部变量。\n- for循环的初始化部分声明的变量，其作用范围在整个循环。\n- 但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：\n- 你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。\n\n### 17-10 命令行参数的使用\n\n有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。\n\n命令行参数是在执行程序时候紧跟在程序名字后面的信息。\n\n\n\n下面的程序打印所有的命令行参数：\n\n```java\nCommandLine.java 文件代码：\npublic class CommandLine {\n   public static void main(String args[]){ \n      for(int i=0; i<args.length; i++){\n         System.out.println(\"args[\" + i + \"]: \" + args[i]);\n      }\n   }\n}\n```\n\n如下所示，运行这个程序：\n\n```\n$ javac CommandLine.java \n$ java CommandLine this is a command line 200 -100\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n```\n\n------\n\n### 17-11 构造方法\n\n- 当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。\n- 通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。\n- 不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。\n- 一旦你定义了自己的构造方法，默认构造方法就会失效。\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass() {\n    x = 10;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n```\n\n大多时候需要一个有参数的构造方法。\n\n**实例**\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass(int i ) {\n    x = i;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n  public static void main(String args[]) {\n    MyClass t1 = new MyClass( 10 );\n    MyClass t2 = new MyClass( 20 );\n    System.out.println(t1.x + \" \" + t2.x);\n  }\n}\n```\n\n运行结果如下：\n\n```\n10 20\n```\n\n### 17-12 可变参数\n\nJDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。\n\n方法的可变参数的声明如下所示：\n\n```\ntypeName... parameterName\n```\n\n在方法声明中，在指定参数类型后加一个省略号(...) 。\n\n一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。\n\n```java\npublic class VarargsDemo {\n    public static void main(String args[]) {\n        // 调用可变参数的方法\n        printMax(34, 3, 3, 2, 56.5);\n        printMax(new double[]{1, 2, 3});\n    }\n \n    public static void printMax( double... numbers) {\n        if (numbers.length == 0) {\n            System.out.println(\"No argument passed\");\n            return;\n        }\n \n        double result = numbers[0];\n \n        for (int i = 1; i <  numbers.length; i++){\n            if (numbers[i] >  result) {\n                result = numbers[i];\n            }\n        }\n        System.out.println(\"The max value is \" + result);\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe max value is 56.5\nThe max value is 3.0\n```\n\n### 17-13 finalize() 方法\n\nJava 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。\n\n例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。\n\n在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。\n\nfinalize() 一般格式是：\n\n```java\nprotected void finalize()\n{\n   // 在这里终结代码\n}\n```\n\n关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。\n\n当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。\n\n```java\n// FinalizationDemo.java 文件代码：\npublic class FinalizationDemo {  \n  public static void main(String[] args) {  \n    Cake c1 = new Cake(1);  \n    Cake c2 = new Cake(2);  \n    Cake c3 = new Cake(3);  \n      \n    c2 = c3 = null;  \n    System.gc(); //调用Java垃圾收集器\n  }  \n}  \n \nclass Cake extends Object {  \n  private int id;  \n  public Cake(int id) {  \n    this.id = id;  \n    System.out.println(\"Cake Object \" + id + \"is created\");  \n  }  \n    \n  protected void finalize() throws java.lang.Throwable {  \n    super.finalize();  \n    System.out.println(\"Cake Object \" + id + \"is disposed\");  \n  }  \n}\n```\n\n运行以上代码，输出结果如下：\n\n```\n$ javac FinalizationDemo.java \n$ java FinalizationDemo\nCake Object 1is created\nCake Object 2is created\nCake Object 3is created\nCake Object 3is disposed\nCake Object 2is disposed\n```\n\n## 18，Java 流(Stream)、文件(File)和IO\n\n- Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n- Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n- 一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n- Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。\n- 但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。\n\n### 18-1 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n下面是创建 BufferedReader 的基本语法：\n\n```Java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\nBufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。\n\n### 18-2 从控制台读取多字符输入\n\n从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：\n\n```Java\nint read( ) throws IOException\n```\n\n每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。\n\n下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 \"q\"。\n\n```java\n// BRRead.java 文件代码：\n//使用 BufferedReader 在控制台读取字符\n \nimport java.io.*;\n \npublic class BRRead {\n    public static void main(String args[]) throws IOException {\n        char c;\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"输入字符, 按下 'q' 键退出。\");\n        // 读取字符\n        do {\n            c = (char) br.read();\n            System.out.println(c);\n        } while (c != 'q');\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n输入字符, 按下 'q' 键退出。\nrunoob\nr\nu\nn\no\no\nb\n\n\nq\nq\n```\n\n### 18-3 从控制台读取字符串\n\n从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。\n\n它的一般格式是：\n\n```java\nString readLine( ) throws IOException\n```\n\n下面的程序读取和显示字符行直到你输入了单词\"end\"。\n\n```java\n//使用 BufferedReader 在控制台读取字符\nimport java.io.*;\n \npublic class BRReadLines {\n    public static void main(String args[]) throws IOException {\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String str;\n        System.out.println(\"Enter lines of text.\");\n        System.out.println(\"Enter 'end' to quit.\");\n        do {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nEnter lines of text.\nEnter 'end' to quit.\nThis is line one\nThis is line one\nThis is line two\nThis is line two\nend\nend\n```\n\n> JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm('https://www.runoob.com//images/sqlite-c-cpp.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-c-cpp.html') 类来获取控制台的输入。\n\n### 18-4 控制台输出\n\n在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\nPrintStream 定义 write() 的最简单格式如下所示：\n\n```java\nvoid write(int byteval)\n```\n\n该方法将 byteval 的低八位字节写到流中。\n\n下面的例子用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕：\n\n```java\nWriteDemo.java 文件代码：\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\n运行以上实例在输出窗口输出 \"A\" 字符\n\n```\nA\n```\n\n**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 18-5 读写文件\n\n如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。\n\n#### 18-5-1 FileInputStream\n\n- 该流用于从文件读取数据，它的对象可以用关键字 new 来创建。\n- 有多种构造方法可用来创建对象。\n- 可以使用字符串类型的文件名来创建一个输入流对象来读取文件：\n\n```java\nInputStream f = new FileInputStream(\"C://images/hello\");\n```\n\n- 也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); InputStream out = new FileInputStream(f);\n```\n\n- 创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。\n\n![image-20240228231544486](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231544486.png)\n\n除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：\n\n- [ByteArrayInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-php.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-php.html')\n- [DataInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-perl.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-perl.html')\n\n------\n\n#### 18-5-2 FileOutputStream\n\n该类用来创建一个文件并向文件中写数据。\n\n如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。\n\n有两个构造方法可以用来创建 FileOutputStream 对象。\n\n使用字符串类型的文件名来创建一个输出流对象：\n\n```java\nOutputStream f = new FileOutputStream(\"C://images/hello\")\n```\n\n也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); \nOutputStream f = new FileOutputStream(f);\n```\n\n创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。\n\n![image-20240228231647489](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231647489.png)\n\n除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：\n\n- [ByteArrayOutputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-python.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-python.html')\n- [DataOutputStream](javascript:if(confirm('https://www.runoob.com//images/execute_sql_online.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/execute_sql_online.php')\n\n下面是一个演示 InputStream 和 OutputStream 用法的例子\n\n```java\n// fileStreamTest.java 文件代码：\n\nimport java.io.*;\n \npublic class fileStreamTest {\n    public static void main(String args[]) {\n        try {\n            byte bWrite[] = { 11, 21, 3, 40, 5 };\n            OutputStream os = new FileOutputStream(\"test.txt\");\n            for (int x = 0; x < bWrite.length; x++) {\n                os.write(bWrite[x]); // writes the bytes\n            }\n            os.close();\n \n            InputStream is = new FileInputStream(\"test.txt\");\n            int size = is.available();\n \n            for (int i = 0; i < size; i++) {\n                System.out.print((char) is.read() + \"  \");\n            }\n            is.close();\n        } catch (IOException e) {\n            System.out.print(\"Exception\");\n        }\n    }\n}\n```\n\n上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。\n\n以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：\n\n```java\nfileStreamTest2.java 文件代码：\n//文件名 :fileStreamTest2.java\nimport java.io.*;\n \npublic class fileStreamTest2 {\n    public static void main(String[] args) throws IOException {\n \n        File f = new File(\"a.txt\");\n        FileOutputStream fop = new FileOutputStream(f);\n        // 构建FileOutputStream对象,文件不存在会自动新建\n \n        OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\");\n        // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk\n \n        writer.append(\"中文输入\");\n        // 写入到缓冲区\n \n        writer.append(\"\\r\\n\");\n        // 换行\n \n        writer.append(\"English\");\n        // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入\n \n        writer.close();\n        // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉\n \n        fop.close();\n        // 关闭输出流,释放系统资源\n \n        FileInputStream fip = new FileInputStream(f);\n        // 构建FileInputStream对象\n \n        InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\");\n        // 构建InputStreamReader对象,编码与写入相同\n \n        StringBuffer sb = new StringBuffer();\n        while (reader.ready()) {\n            sb.append((char) reader.read());\n            // 转成char加到StringBuffer对象中\n        }\n        System.out.println(sb.toString());\n        reader.close();\n        // 关闭读取流\n \n        fip.close();\n        // 关闭输入流,释放系统资源\n \n    }\n}\n```\n\n### 18-6 文件和I/O\n\n还有一些关于文件和I/O的类，我们也需要知道：\n\n- [File Class(类)](javascript:if(confirm('https://www.runoob.com//images/book.sqlite3.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/book.sqlite3.php')\n- [FileReader Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite-jdbc  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-jdbc')\n- [FileWriter Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite3.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite3.html')\n\n------\n\n### 18-7 Java中的目录\n\n#### 18-7-1 创建目录：\n\nFile类中有两个方法可以用来创建文件夹：\n\n- **mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。\n- **mkdirs()**方法创建一个文件夹和它的所有父文件夹。\n\n下面的例子创建 \"/tmp/user//images/bin\"文件夹：\n\n```java\nCreateDir.java 文件代码：\nimport java.io.File;\n \npublic class CreateDir {\n    public static void main(String args[]) {\n        String dirname = \"/tmp/user//images/bin\";\n        File d = new File(dirname);\n        // 现在创建目录\n        d.mkdirs();\n    }\n}\n```\n\n编译并执行上面代码来创建目录 \"/tmp/user//images/bin\"。\n\n**注意：** Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (/) ，路径依然能够被正确解析。\n\n#### 18-7-2 读取目录\n\n一个目录其实就是一个 File 对象，它包含其他文件和文件夹。\n\n如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。\n\n可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。\n\n下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：\n\n```java\n// DirList.java 文件代码：\nimport java.io.File;\n \npublic class DirList {\n    public static void main(String args[]) {\n        String dirname = \"/tmp\";\n        File f1 = new File(dirname);\n        if (f1.isDirectory()) {\n            System.out.println(\"目录 \" + dirname);\n            String s[] = f1.list();\n            for (int i = 0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                    System.out.println(s[i] + \" 是一个目录\");\n                } else {\n                    System.out.println(s[i] + \" 是一个文件\");\n                }\n            }\n        } else {\n            System.out.println(dirname + \" 不是一个目录\");\n        }\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n目录 /tmp\nbin 是一个目录\nlib 是一个目录\ndemo 是一个目录\ntest.txt 是一个文件\nREADME 是一个文件\nindex.html 是一个文件\ninclude 是一个目录\n```\n\n#### 18-7-3 删除目录或文件\n\n删除文件可以使用 **java.io.File.delete()** 方法。\n\n以下代码会删除目录 **/tmp//images/**，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。\n\n测试目录结构：\n\n```\n/tmp//images/\n|-- 1.log\n|-- test\n```\n\n```java\nimport java.io.File;\n \npublic class DeleteFileDemo {\n    public static void main(String args[]) {\n        // 这里修改为自己的测试目录\n        File folder = new File(\"/tmp//images/\");\n        deleteFolder(folder);\n    }\n \n    // 删除文件及目录\n    public static void deleteFolder(File folder) {\n        File[] files = folder.listFiles();\n        if (files != null) {\n            for (File f : files) {\n                if (f.isDirectory()) {\n                    deleteFolder(f);\n                } else {\n                    f.delete();\n                }\n            }\n        }\n        folder.delete();\n    }\n}\n```\n\n## 19，Java Scanner 类\n\njava.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。\n\n下面是创建 Scanner 对象的基本语法：\n\n```Java\nScanner s = new Scanner(System.in);\n```\n\n接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：\n\n### 19-1 使用 next 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner; \n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // next方式接收字符串\n        System.out.println(\"next方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNext()) {\n            String str1 = scan.next();\n            System.out.println(\"输入的数据为：\" + str1);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnext方式接收：\nrunoob com\n输入的数据为：runoob\n```\n\n可以看到 com 字符串并未输出，接下来我们看 nextLine。\n\n### 19-2 使用 nextLine 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // nextLine方式接收字符串\n        System.out.println(\"nextLine方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNextLine()) {\n            String str2 = scan.nextLine();\n            System.out.println(\"输入的数据为：\" + str2);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnextLine方式接收：\nrunoob com\n输入的数据为：runoob com\n```\n\n可以看到 com 字符串输出。\n\n### 19-3 next() 与 nextLine() 区别\n\nnext():\n\n- 1、一定要读取到有效字符后才可以结束输入。\n- 2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。\n- 3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。\n- next() 不能得到带有空格的字符串。\n\nnextLine()：\n\n- 1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。\n- 2、可以获得空白。\n\n如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n        int i = 0;\n        float f = 0.0f;\n        System.out.print(\"输入整数：\");\n        if (scan.hasNextInt()) {\n            // 判断输入的是否是整数\n            i = scan.nextInt();\n            // 接收整数\n            System.out.println(\"整数数据：\" + i);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是整数！\");\n        }\n        System.out.print(\"输入小数：\");\n        if (scan.hasNextFloat()) {\n            // 判断输入的是否是小数\n            f = scan.nextFloat();\n            // 接收小数\n            System.out.println(\"小数数据：\" + f);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是小数！\");\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\n输入整数：12\n整数数据：12\n输入小数：1.2\n小数数据：1.2\n```\n\n以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：\n\n```java\n // ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \nclass ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n \n        double sum = 0;\n        int m = 0;\n \n        while (scan.hasNextDouble()) {\n            double x = scan.nextDouble();\n            m = m + 1;\n            sum = sum + x;\n        }\n \n        System.out.println(m + \"个数的和为\" + sum);\n        System.out.println(m + \"个数的平均值是\" + (sum / m));\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```java\n$ javac ScannerDemo.java\n$ java ScannerDemo\n12\n23\n15\n21.4\nend\n4个数的和为71.4\n4个数的平均值是17.85\n```\n\n## 20，Java异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查\n\n### 20-1 异常方法\n\n![image-20240228232401552](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228232401552.png)\n\n### 20-2 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```Java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。\n\n```Java\n// ExcepTest.java 文件代码：\n// 文件名 : ExcepTest.java\nimport java.io.*;\npublic class ExcepTest{\n \n   public static void main(String args[]){\n      try{\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      }catch(ArrayIndexOutOfBoundsException e){\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n```\n\n以上代码编译运行输出结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n```\n\n### 20-3 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n多重捕获块的语法如下所示：\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}\n```\n\n- 上面的代码段包含了 3 个 catch块。\n- 可以在 try 语句后面添加任意数量的 catch 块。\n- 如果保护代码中发生异常，异常被抛给第一个 catch 块。\n- 如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n- 如果不匹配，它会被传递给第二个 catch 块。\n- 如此，直到异常被捕获或者通过所有的 catch 块。\n\n\n\n该实例展示了怎么使用多重 try/catch。\n\n```java\ntry {\n    file = new FileInputStream(fileName);\n    x = (byte) file.read();\n} catch(FileNotFoundException f) { // Not valid!\n    f.printStackTrace();\n    return -1;\n} catch(IOException i) {\n    i.printStackTrace();\n    return -1;\n}\n```\n\n### 20-4 throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### 20-5 finally关键字\n\n- finally 关键字用来创建在 try 代码块后面执行的代码块。\n- 无论是否发生异常，finally 代码块中的代码总会被执行。\n- 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n- finally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n\n\n```java\nExcepTest.java 文件代码：\npublic class ExcepTest{\n  public static void main(String args[]){\n    int a[] = new int[2];\n    try{\n       System.out.println(\"Access element three :\" + a[3]);\n    }catch(ArrayIndexOutOfBoundsException e){\n       System.out.println(\"Exception thrown  :\" + e);\n    }\n    finally{\n       a[0] = 6;\n       System.out.println(\"First element value: \" +a[0]);\n       System.out.println(\"The finally statement is executed\");\n    }\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n```\n\n注意下面事项：\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n### 20-6 声明自定义异常\n\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。\n\n- 所有异常都必须是 Throwable 的子类。\n- 如果希望写一个检查性异常类，则需要继承 Exception 类。\n- 如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。\n\n可以像下面这样定义自己的异常类：\n\n```java\nclass MyException extends Exception{ }\n```\n\n- 只继承Exception 类来创建的异常类是检查性异常类。\n- 下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。\n- 一个异常类和其它任何类一样，包含有变量和方法。\n\n以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。\n\n```java\n// InsufficientFundsException.java 文件代码：\n// 文件名InsufficientFundsException.java\nimport java.io.*;\n \n//自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n{\n  //此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\n  private double amount;\n  public InsufficientFundsException(double amount)\n  {\n    this.amount = amount;\n  } \n  public double getAmount()\n  {\n    return amount;\n  }\n}\n```\n\n为了展示如何使用我们自定义的异常类，\n\n在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。\n\n```java\n// 文件名称 CheckingAccount.java\nimport java.io.*;\n \n//此类模拟银行账户\npublic class CheckingAccount\n{\n  //balance为余额，number为卡号\n   private double balance;\n   private int number;\n   public CheckingAccount(int number)\n   {\n      this.number = number;\n   }\n  //方法：存钱\n   public void deposit(double amount)\n   {\n      balance += amount;\n   }\n  //方法：取钱\n   public void withdraw(double amount) throws\n                              InsufficientFundsException\n   {\n      if(amount <= balance)\n      {\n         balance -= amount;\n      }\n      else\n      {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n  //方法：返回余额\n   public double getBalance()\n   {\n      return balance;\n   }\n  //方法：返回卡号\n   public int getNumber()\n   {\n      return number;\n   }\n}\n```\n\n下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。\n\n```java\n//文件名称 BankDemo.java\npublic class BankDemo\n{\n   public static void main(String [] args)\n   {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      try\n      {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      }catch(InsufficientFundsException e)\n      {\n         System.out.println(\"Sorry, but you are short $\"\n                                  + e.getAmount());\n         e.printStackTrace();\n      }\n    }\n}\n```\n\n编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：\n\n```\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n        at CheckingAccount.withdraw(CheckingAccount.java:25)\n        at BankDemo.main(BankDemo.java:13)\n```\n\n### 20-7 通用异常\n\n在Java中定义了两种类型的异常和错误。\n\n- **JVM(Java****虚拟机****)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。\n- **程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。\n","source":"_posts/java1.md","raw":"---\ntitle: Java初学者学习笔记\n\n---\n\n## 1，Java基础语法\n\n一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。\n\n- **对象**：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。\n- **类**：类是一个模板，它描述一类对象的行为和状态。\n- **方法**：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。\n- **实例变量**：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。\n\n### 1-1 第一个Java程序\n\n下面看一个简单的 Java 程序，它将打印字符串 *Hello World*\n\n```Java\npublic class HelloWorld {\n    /* 第一个Java程序\n     * 它将打印字符串 Hello World\n     */\n    public static void main(String []args) {\n        System.out.println(\"Hello World\"); // 打印 Hello World\n    }\n}\n```\n\n下面将逐步介绍如何保存、编译以及运行这个程序：\n\n- 打开代码编辑器，把上面的代码添加进去；\n- 把文件名保存为：HelloWorld.java；\n- 打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\\n- 在命令行窗口输入 **javac HelloWorld.java** 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。\n- 再键输入 **java HelloWorld** 按下回车键就可以运行程序了\n\n你将会在窗口看到 Hello World\n\n```shell\nC : > javac HelloWorld.java\nC : > java HelloWorld \nHello World\n```\n\nGif 图演示：\n\n![img](/images//images/java-HelloWorld.gif)\n\n### 1-2 基本语法\n\n编写 Java 程序时，应注意以下几点：\n\n- **大小写敏感**：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。\n- **类名**：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 **MyFirstJavaClass** 。\n- **方法名**：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。\n- **源文件名**：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 **.java**。（如果文件名和类名不相同则会导致编译错误）。\n- **主方法入口**：所有的 Java 程序由 **public static void main(String []args)** 方法开始执行。\n\n### 1-3 Java 标识符\n\nJava 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。\n\n关于 Java 标识符，有以下几点需要注意：\n\n- 所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始\n- 首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合\n- 关键字不能用作标识符\n- 标识符是大小写敏感的\n- 合法标识符举例：age、$salary、_value、__1_value\n- 非法标识符举例：123abc、-salary\n\n### 1-4 Java修饰符\n\n像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：\n\n- 访问控制修饰符 : default, public , protected, private\n- 非访问控制修饰符 : final, abstract, static, synchronized\n\n在后面的章节中我们会深入讨论 Java 修饰符。\n\n### 1-5 Java 变量\n\nJava 中主要有如下几种类型的变量\n\n- 局部变量\n- 类变量（静态变量）\n- 成员变量（非静态变量）\n\n### 1-6 Java 数组\n\n数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。\n\n### 1-7 Java 枚举\n\nava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。\n\n例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。\n\n```java\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM , LARGE }\n   FreshJuiceSize size;\n}\n \npublic class FreshJuiceTest {\n   public static void main(String []args){\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;\n   }\n}\n```\n\n### 1-8 Java 关键字\n\n![image-20240228195010033](/images/image-20240228195010033.png)\n\n### 1-9 Java注释\n\n类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。\n\n```Java\npublic class HelloWorld {\n   /* 这是第一个Java程序\n    *它将打印Hello World\n    * 这是一个多行注释的示例\n    */\n    public static void main(String []args){\n       // 这是单行注释的示例\n       /* 这个也是单行注释的示例 */\n       System.out.println(\"Hello World\"); \n    }\n}\n```\n\n### 1-10 Java 空行\n\n空白行或者有注释的行，Java 编译器都会忽略掉。\n\n### 1-11 继承\n\n在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。\n\n利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。\n\n------\n\n### 1-12 接口\n\n在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。\n\n接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。\n\n## 2，Java对象和类\n\n### 2-1 Java中的对象\n\n现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。\n\n拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。\n\n对比现实对象和软件对象，它们之间十分相似。\n\n软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。\n\n在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。\n\n### 2-2 Java中的类\n\n类可以看成是创建Java对象的模板。\n\n通过下面一个简单的类来理解下Java中类的定义：\n\n```Java\npublic class Dog{\n  String breed;\n  int age;\n  String color;\n  void barking(){\n  }\n \n  void hungry(){\n  }\n \n  void sleeping(){\n  }\n}\n```\n\n一个类可以包含以下类型变量：\n\n- **局部变量**：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。\n- **成员变量**：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。\n- **类变量**：类变量也声明在类中，方法体之外，但必须声明为static类型。\n\n一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。\n\n------\n\n### 2-3 构造方法\n\n每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。\n\n在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。\n\n下面是一个构造方法示例：\n\n```Java\npublic class Puppy{\n    public Puppy(){\n    }\n \n    public Puppy(String name){\n        // 这个构造器仅有一个参数：name\n    }\n}\n```\n\n### 2-4 创建对象\n\n对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：\n\n- **声明**：声明一个对象，包括对象名称和对象类型。\n- **实例化**：使用关键字new来创建一个对象。\n- **初始化**：使用new创建对象时，会调用构造方法初始化对象。\n\n下面是一个创建对象的例子：\n\n```java\npublic class Puppy{\n   public Puppy(String name){\n      //这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n   public static void main(String[] args){\n      // 下面的语句将创建一个Puppy对象\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n```\n\n编译并运行上面的程序，会打印出下面的结果：\n\n```\n小狗的名字是 : tommy\n```\n\n### 2-5 访问实例变量和方法\n\n通过已创建的对象来访问成员变量和成员方法，如下所示：\n\n```Java\n/* 实例化对象 */\nObject referenceVariable = new Constructor();\n/* 访问类中的变量 */\nreferenceVariable.variableName;\n/* 访问类中的方法 */\nreferenceVariable.methodName();\n```\n\n### 2-6 实例\n\n下面的例子展示如何访问实例变量和调用成员方法：\n\n```java\npublic class Puppy{\n   int puppyAge;\n   public Puppy(String name){\n      // 这个构造器仅有一个参数：name\n      System.out.println(\"小狗的名字是 : \" + name ); \n   }\n \n   public void setAge( int age ){\n       puppyAge = age;\n   }\n \n   public int getAge( ){\n       System.out.println(\"小狗的年龄为 : \" + puppyAge ); \n       return puppyAge;\n   }\n \n   public static void main(String[] args){\n      /* 创建对象 */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n      /* 通过方法来设定age */\n      myPuppy.setAge( 2 );\n      /* 调用另一个方法获取age */\n      myPuppy.getAge( );\n      /*你也可以像下面这样访问成员变量 */\n      System.out.println(\"变量值 : \" + myPuppy.puppyAge ); \n   }\n}\n```\n\n编译并运行上面的程序，产生如下结果：\n\n```\n小狗的名字是 : tommy\n小狗的年龄为 : 2\n变量值 : 2\n```\n\n### 2-7 源文件声明规则\n\n在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。\n\n- 一个源文件中只能有一个public类\n- 一个源文件可以有多个非public类\n- 源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。\n- 如果一个类定义在某个包中，那么package语句应该在源文件的首行。\n- 如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。\n- import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。\n\n类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。\n\n除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。\n\n### 2-8 Java包\n\n包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。\n\n### 2-9 Import语句\n\n在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。\n\n例如，下面的命令行将会命令编译器载入java_installation//images/io路径下的所有类\n\n```java\nimport java.io.*;\n```\n\n### 2-10 一个简单的例子\n\n在该例子中，我们创建两个类：**Employee** 和 **EmployeeTest**。\n\n首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。\n\nEmployee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee{\n   String name;\n   int age;\n   String designation;\n   double salary;\n   // Employee 类的构造器\n   public Employee(String name){\n      this.name = name;\n   }\n   // 设置age的值\n   public void empAge(int empAge){\n      age =  empAge;\n   }\n   /* 设置designation的值*/\n   public void empDesignation(String empDesig){\n      designation = empDesig;\n   }\n   /* 设置salary的值*/\n   public void empSalary(double empSalary){\n      salary = empSalary;\n   }\n   /* 打印信息 */\n   public void printEmployee(){\n      System.out.println(\"名字:\"+ name );\n      System.out.println(\"年龄:\" + age );\n      System.out.println(\"职位:\" + designation );\n      System.out.println(\"薪水:\" + salary);\n   }\n}\n```\n\n程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。\n\n下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。\n\n将下面的代码保存在 EmployeeTest.java文件中。\n\n**EmployeeTest.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class EmployeeTest{\n \n   public static void main(String[] args){\n      /* 使用构造器创建两个对象 */\n      Employee empOne = new Employee(\"RUNOOB1\");\n      Employee empTwo = new Employee(\"RUNOOB2\");\n \n      // 调用这两个对象的成员方法\n      empOne.empAge(26);\n      empOne.empDesignation(\"高级程序员\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n \n      empTwo.empAge(21);\n      empTwo.empDesignation(\"菜鸟程序员\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n```\n\n编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：\n\n```Java\n$ javac EmployeeTest.java\n$ java EmployeeTest \n名字:RUNOOB1\n年龄:26\n职位:高级程序员\n薪水:1000.0\n名字:RUNOOB2\n年龄:21\n职位:菜鸟程序员\n薪水:500.0\n```\n\n## 3，Java基本数据类型\n\n### 3-1 内置数据类型\n\nJava语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。\n\n#### 3-1-1 **byte：**\n\n- byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n- 最小值是 **-128（-2^7）**；\n- 最大值是 **127（2^7-1）**；\n- 默认值是 **0**；\n- byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n- 例子：byte a = 100，byte b = -50。\n\n#### 3-1-2 **short：**\n\n- short 数据类型是 16 位、有符号的以二进制补码表示的整数\n- 最小值是 **-32768（-2^15）**；\n- 最大值是 **32767（2^15 - 1）**；\n- Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n- 默认值是 **0**；\n- 例子：short s = 1000，short r = -20000。\n\n#### 3-1-3 **int：**\n\n- int 数据类型是32位、有符号的以二进制补码表示的整数；\n- 最小值是 **-2,147,483,648（-2^31）**；\n- 最大值是 **2,147,483,647（2^31 - 1）**；\n- 一般地整型变量默认为 int 类型；\n- 默认值是 **0** ；\n- 例子：int a = 100000, int b = -200000。\n\n#### 3-1-4 **long：**\n\n- long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n- 最小值是 **-9,223,372,036,854,775,808（-2^63）**；\n- 最大值是 **9,223,372,036,854,775,807（2^63 -1）**；\n- 这种类型主要使用在需要比较大整数的系统上；\n- 默认值是 **0L**；\n- 例子： long a = 100000L，Long b = -200000L。\n  \"L\"理论上不分大小写，但是若写成\"l\"容易与数字\"1\"混淆，不容易分辩。所以最好大写。\n\n#### 3-1-5 **float：**\n\n- float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\n- float 在储存大型浮点数组的时候可节省内存空间；\n- 默认值是 **0.0f**；\n- 浮点数不能用来表示精确的值，如货币；\n- 例子：float f1 = 234.5f。\n\n#### 3-1-6 **double：**\n\n- double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；\n- 浮点数的默认类型为double类型；\n- double类型同样不能表示精确的值，如货币；\n- 默认值是 **0.0d**；\n- 例子：double d1 = 123.4。\n\n#### 3-1-7 **boolean：**\n\n- boolean数据类型表示一位的信息；\n- 只有两个取值：true 和 false；\n- 这种类型只作为一种标志来记录 true/false 情况；\n- 默认值是 **false**；\n- 例子：boolean one = true。\n\n#### 3-1-8 **char：**\n\n- char类型是一个单一的 16 位 Unicode 字符；\n- 最小值是 **\\u0000**（即为0）；\n- 最大值是 **\\uffff**（即为65,535）；\n- char 数据类型可以储存任何字符；\n- 例子：char letter = 'A';。\n\n### 3-2 实例\n\n对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：\n\n```Java\npublic class PrimitiveTypeTest {  \n    public static void main(String[] args) {  \n        // byte  \n        System.out.println(\"基本类型：byte 二进制位数：\" + Byte.SIZE);  \n        System.out.println(\"包装类：java.lang.Byte\");  \n        System.out.println(\"最小值：Byte.MIN_VALUE=\" + Byte.MIN_VALUE);  \n        System.out.println(\"最大值：Byte.MAX_VALUE=\" + Byte.MAX_VALUE);  \n        System.out.println();  \n  \n        // short  \n        System.out.println(\"基本类型：short 二进制位数：\" + Short.SIZE);  \n        System.out.println(\"包装类：java.lang.Short\");  \n        System.out.println(\"最小值：Short.MIN_VALUE=\" + Short.MIN_VALUE);  \n        System.out.println(\"最大值：Short.MAX_VALUE=\" + Short.MAX_VALUE);  \n        System.out.println();  \n  \n        // int  \n        System.out.println(\"基本类型：int 二进制位数：\" + Integer.SIZE);  \n        System.out.println(\"包装类：java.lang.Integer\");  \n        System.out.println(\"最小值：Integer.MIN_VALUE=\" + Integer.MIN_VALUE);  \n        System.out.println(\"最大值：Integer.MAX_VALUE=\" + Integer.MAX_VALUE);  \n        System.out.println();  \n  \n        // long  \n        System.out.println(\"基本类型：long 二进制位数：\" + Long.SIZE);  \n        System.out.println(\"包装类：java.lang.Long\");  \n        System.out.println(\"最小值：Long.MIN_VALUE=\" + Long.MIN_VALUE);  \n        System.out.println(\"最大值：Long.MAX_VALUE=\" + Long.MAX_VALUE);  \n        System.out.println();  \n  \n        // float  \n        System.out.println(\"基本类型：float 二进制位数：\" + Float.SIZE);  \n        System.out.println(\"包装类：java.lang.Float\");  \n        System.out.println(\"最小值：Float.MIN_VALUE=\" + Float.MIN_VALUE);  \n        System.out.println(\"最大值：Float.MAX_VALUE=\" + Float.MAX_VALUE);  \n        System.out.println();  \n  \n        // double  \n        System.out.println(\"基本类型：double 二进制位数：\" + Double.SIZE);  \n        System.out.println(\"包装类：java.lang.Double\");  \n        System.out.println(\"最小值：Double.MIN_VALUE=\" + Double.MIN_VALUE);  \n        System.out.println(\"最大值：Double.MAX_VALUE=\" + Double.MAX_VALUE);  \n        System.out.println();  \n  \n        // char  \n        System.out.println(\"基本类型：char 二进制位数：\" + Character.SIZE);  \n        System.out.println(\"包装类：java.lang.Character\");  \n        // 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  \n        System.out.println(\"最小值：Character.MIN_VALUE=\"  \n                + (int) Character.MIN_VALUE);  \n        // 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  \n        System.out.println(\"最大值：Character.MAX_VALUE=\"  \n                + (int) Character.MAX_VALUE);  \n    }  \n}\n```\n\n编译以上代码输出结果如下所示：\n\n```Java\n基本类型：byte 二进制位数：8\n包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127\n\n基本类型：short 二进制位数：16\n包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767\n\n基本类型：int 二进制位数：32\n包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647\n\n基本类型：long 二进制位数：64\n包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807\n\n基本类型：float 二进制位数：32\n包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38\n\n基本类型：double 二进制位数：64\n包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308\n\n基本类型：char 二进制位数：16\n包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535\n```\n\nFloat和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的\"E+数字\"表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 =3140，3.14E-3 就是 3.14 x 10-3 =0.00314。\n\n实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。\n\n### 3-3 类型默认值\n\n下表列出了 Java 各个类型的默认值：\n\n![image-20240228200611781](/images/image-20240228200611781.png)\n\n### 3-4 实例\n\n```Java\npublic class Test {\n    static boolean bool;\n    static byte by;\n    static char ch;\n    static double d;\n    static float f;\n    static int i;\n    static long l;\n    static short sh;\n    static String str;\n \n    public static void main(String[] args) {\n        System.out.println(\"Bool :\" + bool);\n        System.out.println(\"Byte :\" + by);\n        System.out.println(\"Character:\" + ch);\n        System.out.println(\"Double :\" + d);\n        System.out.println(\"Float :\" + f);\n        System.out.println(\"Integer :\" + i);\n        System.out.println(\"Long :\" + l);\n        System.out.println(\"Short :\" + sh);\n        System.out.println(\"String :\" + str);\n    }\n}\n```\n\n实例输出结果为：\n\n```Java\nBool     :false\nByte     :0\nCharacter:\nDouble   :0.0\nFloat    :0.0\nInteger  :0\nLong     :0\nShort    :0\nString   :null\n```\n\n### 3-5 引用类型\n\n- 在Java中，引用类型的变量非常类似于C/C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。\n- 对象、数组都是引用数据类型。\n- 所有引用类型的默认值都是null。\n- 一个引用变量可以用来引用任何与之兼容的类型。\n- 例子：Site site = new Site(\"Runoob\")。\n\n### 3-6 Java 常量\n\n常量在程序运行时是不能被修改的。\n\n在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：\n\n```Java\nfinal double PI = 3.1415927;\n```\n\n虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。\n\n字面量可以赋给任何内置类型的变量。例如：\n\n```Java\nbyte a = 68;\nchar a = 'A'\n```\n\nbyte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。\n\n当使用常量的时候，前缀 **0** 表示 8 进制，而前缀 **0x** 代表 16 进制, 例如：\n\n```Java\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n```\n\n和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：\n\n```Java\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n```\n\n字符串常量和字符常量都可以包含任何Unicode字符。例如：\n\n```Java\nchar a = '\\u0001';\nString a = \"\\u0001\";\n```\n\nJava语言支持一些特殊的转义字符序列。\n\n![image-20240228200803273](/images/image-20240228200803273.png)\n\n### 3-7 自动类型转换\n\n**整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。**\n\n转换从低级到高级。\n\n```Java\n低  ------------------------------------>  高\n\nbyte,short,char—> int —> long—> float —> double \n```\n\n数据类型转换必须满足如下规则：\n\n- \\1. 不能对boolean类型进行类型转换。\n\n- \\2. 不能把对象类型转换成不相关类的对象。\n\n- \\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。\n\n- \\4. 转换过程中可能导致溢出或损失精度，例如：\n\n  ```Java\n  int i =128;   \n  byte b = (byte)i;\n  ```\n\n  因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。\n\n- \\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：\n\n  ```Java\n  (int)23.7 == 23;        \n  (int)-45.89f == -45\n  ```\n\n**自动类型转换**\n\n必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。\n\n```Java\npublic class ZiDongLeiZhuan{\n        public static void main(String[] args){\n            char c1='a';//定义一个char类型\n            int i1 = c1;//char自动类型转换为int\n            System.out.println(\"char自动类型转换为int后的值等于\"+i1);\n            char c2 = 'A';//定义一个char类型\n            int i2 = c2+1;//char 类型和 int 类型计算\n            System.out.println(\"char类型和int计算后的值等于\"+i2);\n        }\n}\n```\n\n运行结果为:\n\n```\nchar自动类型转换为int后的值等于97\nchar类型和int计算后的值等于66\n```\n\n**解析：**c1 的值为字符 **a** ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 **i2=65+1=66**。\n\n### 3-8 强制类型转换\n\n- \\1. 条件是转换的数据类型必须是兼容的。\n- \\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：\n\n\n\n实例\n\n```Java\npublic class QiangZhiZhuanHuan{\n    public static void main(String[] args){\n        int i1 = 123;\n        byte b = (byte)i1;//强制类型转换为byte\n        System.out.println(\"int强制类型转换为byte后的值等于\"+b);\n    }\n}\n```\n\n- 运行结果：\n\n  ```\n  int强制类型转换为byte后的值等于123\n  ```\n\n### 3-9  隐含强制类型转换\n\n- \\1. 整数的默认类型是 int。\n- \\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。\n\n这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。\n\n## 4，Java变量类型\n\n- 在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：\n\n- type identifier [ = value][, identifier [= value] ...] ;\n\n- 格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。\n\n\n以下列出了一些变量的声明实例。注意有些包含了初始化过程。\n\n```Java\nint a, b, c;         // 声明三个int型整数：a、 b、c\nint d = 3, e = 4, f = 5; // 声明三个整数并赋予初值\nbyte z = 22;         // 声明并初始化 z\nString s = \"runoob\";  // 声明并初始化字符串 s\ndouble pi = 3.14159; // 声明了双精度浮点型变量 pi\nchar x = 'x';        // 声明变量 x 的值是字符 'x'。\n```\n\nJava语言支持的变量类型有：\n\n- 类变量：独立于方法之外的变量，用 static 修饰。\n- 实例变量：独立于方法之外的变量，不过没有 static 修饰。\n- 局部变量：类的方法中的变量。\n\n**实例**\n\n```Java\npublic class Variable{\n    static int allClicks=0;    // 类变量\n \n    String str=\"hello world\";  // 实例变量\n \n    public void method(){\n \n        int i =0;  // 局部变量\n \n    }\n}\n```\n\n### 4-1 Java局部变量\n\n- 局部变量声明在方法、构造方法或者语句块中；\n- 局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；\n- 访问修饰符不能用于局部变量；\n- 局部变量只在声明它的方法、构造方法或者语句块中可见；\n- 局部变量是在栈上分配的。\n- 局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。\n\n#### 4-1-1 **实例 1**\n\n在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是: \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n小狗的年龄是: 7\n```\n\n#### 4-1-2 实例 2\n\n在下面的例子中 age 变量没有初始化，所以在编译时会出错：\n\n```Java\npackage com.runoob.test;\n \npublic class Test{ \n   public void pupAge(){\n      int age;\n      age = age + 7;\n      System.out.println(\"小狗的年龄是 : \" + age);\n   }\n   \n   public static void main(String[] args){\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n```\n\n### 4-2 实例变量\n\n- 实例变量声明在一个类中，但在方法、构造方法和语句块之外；\n- 当一个对象被实例化之后，每个实例变量的值就跟着确定；\n- 实例变量在对象创建的时候创建，在对象被销毁的时候销毁；\n- 实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；\n- 实例变量可以声明在使用前或者使用后；\n- 访问修饰符可以修饰实例变量；\n- 实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；\n- 实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；\n- 实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。\n\n**实例**\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\npublic class Employee{\n   // 这个实例变量对子类可见\n   public String name;\n   // 私有变量，仅在该类可见\n   private double salary;\n   //在构造器中对name赋值\n   public Employee (String empName){\n      name = empName;\n   }\n   //设定salary的值\n   public void setSalary(double empSal){\n      salary = empSal;\n   }  \n   // 打印信息\n   public void printEmp(){\n      System.out.println(\"名字 : \" + name );\n      System.out.println(\"薪水 : \" + salary);\n   }\n \n   public static void main(String[] args){\n      Employee empOne = new Employee(\"RUNOOB\");\n      empOne.setSalary(1000.0);\n      empOne.printEmp();\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ javac Employee.java \n$ java Employee\n名字 : RUNOOB\n薪水 : 1000.0\n```\n\n### 4-3 类变量（静态变量）\n\n- 类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。\n- 无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。\n- 静态变量除了被声明为常量外很少使用。常量是指声明为public/private，final和static类型的变量。常量初始化后不可改变。\n- 静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。\n- 静态变量在第一次被访问时创建，在程序结束时销毁。\n- 与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。\n- 默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。\n- 静态变量可以通过：*ClassName.VariableName*的方式访问。\n- 类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。\n\n实例：\n\n**Employee.java 文件代码：**\n\n```Java\nimport java.io.*;\n \npublic class Employee {\n    //salary是静态的私有变量\n    private static double salary;\n    // DEPARTMENT是一个常量\n    public static final String DEPARTMENT = \"开发人员\";\n    public static void main(String[] args){\n    salary = 10000;\n        System.out.println(DEPARTMENT+\"平均工资:\"+salary);\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n开发人员平均工资:10000.0\n```\n\n**注意：**如果其他类想要访问该变量，可以这样访问：**Employee.DEPARTMENT**。\n\n本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。\n\n## 5，Java修饰符\n\nJava语言提供了很多修饰符，主要分为以下两类：\n\n- 访问修饰符\n- 非访问修饰符\n\n修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：\n\n```Java\npublic class ClassName {\n   // ...\n}\nprivate boolean myFlag;\nstatic final double weeks = 9.5;\nprotected static final int BOXWIDTH = 42;\npublic static void main(String[] arguments) {\n   // 方法体\n}\n```\n\n### 5-1 访问控制修饰符\n\nJava中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。\n\n- **default** (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。\n- **private** : 在同一类内可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**\n- **public** : 对所有类可见。使用对象：类、接口、变量、方法\n- **protected** : 对同一包内的类和所有子类可见。使用对象：变量、方法。 **注意：不能修饰类（外部类）**。\n\n我们可以通过以下表来说明访问权限：\n\n![image-20240228202210130](/images/image-20240228202210130.png)\n\n**默认访问修饰符-不使用任何关键字**\n\n使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 **public static final**,而接口里的方法默认情况下访问权限为 **public**。\n\n如下例所示，变量和方法的声明可以不使用任何修饰符。\n\n**实例**\n\n```Java\nString version = \"1.5.1\";\nboolean processOrder() {\n   return true;\n}\n```\n\n### 5-2 私有访问修饰符-private\n\n私有访问修饰符是最严格的访问级别，所以被声明为 **private** 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 **private**。\n\n声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。\n\nPrivate 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。\n\n下面的类使用了私有访问修饰符：\n\n```Java\npublic class Logger {\n   private String format;\n   public String getFormat() {\n      return this.format;\n   }\n   public void setFormat(String format) {\n      this.format = format;\n   }\n}\n```\n\n实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）\n\n### 5-3 公有访问修饰符-public\n\n被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。\n\n如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。\n\n以下函数使用了公有访问控制：\n\n```Java\npublic static void main(String[] arguments) {\n   // ...\n}\n```\n\nJava 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。\n\n### 5-4 受保护的访问修饰符-protected\n\nprotected 需要从以下两个点来分析说明：\n\n- **子类与基类在同一包中**：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；\n- **子类与基类不在同一包中**：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。\n\nprotected 可以修饰数据成员，构造方法，方法成员，**不能修饰类（内部类除外）**。\n\n子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。\n\n下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。\n\n```Java\nclass AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n \nclass StreamingAudioPlayer extends AudioPlayer {\n   protected boolean openSpeaker(Speaker sp) {\n      // 实现细节\n   }\n}\n```\n\n如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。\n\n如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。\n\n如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。\n\n### 5-5 访问控制和继承\n\n请注意以下方法继承的规则：\n\n- 父类中声明为 public 的方法在子类中也必须为 public。\n- 父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。\n- 父类中声明为 private 的方法，不能够被继承。\n\n### 5-6 非访问修饰符\n\n为了实现一些其他的功能，Java 也提供了许多非访问修饰符。\n\nstatic 修饰符，用来修饰类方法和类变量。\n\nfinal 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。\n\nabstract 修饰符，用来创建抽象类和抽象方法。\n\nsynchronized 和 volatile 修饰符，主要用于线程的编程。\n\n#### 5-6-1 static 修饰符\n\n- **静态变量：**\n\n  static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。\n\n- **静态方法：**\n\n  static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。\n\n对类变量和方法的访问可以直接使用 **classname.variablename** 和 **classname.methodname** 的方式访问。\n\n如下例所示，static修饰符用来创建类方法和类变量。\n\n```Java\npublic class InstanceCounter {\n   private static int numInstances = 0;\n   protected static int getCount() {\n      return numInstances;\n   }\n \n   private static void addInstance() {\n      numInstances++;\n   }\n \n   InstanceCounter() {\n      InstanceCounter.addInstance();\n   }\n \n   public static void main(String[] arguments) {\n      System.out.println(\"Starting with \" +\n      InstanceCounter.getCount() + \" instances\");\n      for (int i = 0; i < 500; ++i){\n         new InstanceCounter();\n          }\n      System.out.println(\"Created \" +\n      InstanceCounter.getCount() + \" instances\");\n   }\n}\n```\n\n以上实例运行编辑结果如下:\n\n```Java\nStarting with 0 instances\nCreated 500 instances\n```\n\n#### 5-6-2 final 修饰符\n\n**final 变量：**\n\nfinal 表示\"最后的、最终的\"含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。\n\nfinal 修饰符通常和 static 修饰符一起使用来创建类常量。\n\n```Java\npublic class Test{\n  final int value = 10;\n  // 下面是声明常量的实例\n  public static final int BOXWIDTH = 6;\n  static final String TITLE = \"Manager\";\n \n  public void changeValue(){\n     value = 12; //将输出一个错误\n  }\n}\n```\n\n**inal 方法**\n\n父类中的 final 方法可以被子类继承，但是不能被子类重写。\n\n声明 final 方法的主要目的是防止该方法的内容被修改。\n\n如下所示，使用 final 修饰符声明方法。\n\n```Java\npublic class Test{\n    public final void changeName(){\n       // 方法体\n    }\n}\n```\n\n**final 类**\n\nfinal 类不能被继承，没有类能够继承 final 类的任何特性。\n\n```Java\npublic final class Test {\n   // 类体\n}\n```\n\n### 5-7 abstract 修饰符\n\n**抽象类：**\n\n抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。\n\n一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。\n\n抽象类可以包含抽象方法和非抽象方法。\n\n```Java\nabstract class Caravan{\n   private double price;\n   private String model;\n   private String year;\n   public abstract void goFast(); //抽象方法\n   public abstract void changeColor();\n}\n```\n\n**抽象方法**\n\n抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。\n\n抽象方法不能被声明成 final 和 static。\n\n任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。\n\n如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。\n\n抽象方法的声明以分号结尾，例如：**public abstract sample();**。\n\n```Java\npublic abstract class SuperClass{\n    abstract void m(); //抽象方法\n}\n \nclass SubClass extends SuperClass{\n     //实现抽象方法\n      void m(){\n          .........\n      }\n}\n```\n\n### synchronized 修饰符\n\nsynchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。\n\n```Java\npublic synchronized void showDetails(){\n.......\n}\n```\n\n### transient 修饰符\n\n序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。\n\n该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。\n\n```Java\npublic transient int limit = 55;   // 不会持久化\npublic int b; // 持久化\n```\n\n### volatile 修饰符\n\nvolatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。\n\n```javascript\npublic class MyRunnable implements Runnable\n{\n    private volatile boolean active;\n    public void run()\n    {\n        active = true;\n        while (active) // 第一行\n        {\n            // 代码\n        }\n    }\n    public void stop()\n    {\n        active = false; // 第二行\n    }\n}\n```\n\n通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 ***第一行\\*** 中缓冲区的 active 值被使用，那么在 ***第二行\\*** 的 active 值为 false 时循环不会停止。\n\n但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。\n\n## 6，Java运算符\n\n### 6-1 算术运算符\n\n算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。\n\n表格中的实例假设整数变量A的值为10，变量B的值为20：\n\n![image-20240228212912288](/images/image-20240228212912288.png)\n\n下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     int c = 25;\n     int d = 25;\n     System.out.println(\"a + b = \" + (a + b) );\n     System.out.println(\"a - b = \" + (a - b) );\n     System.out.println(\"a * b = \" + (a * b) );\n     System.out.println(\"b / a = \" + (b / a) );\n     System.out.println(\"b % a = \" + (b % a) );\n     System.out.println(\"c % a = \" + (c % a) );\n     System.out.println(\"a++   = \" +  (a++) );\n     System.out.println(\"a--   = \" +  (a--) );\n     // 查看  d++ 与 ++d 的不同\n     System.out.println(\"d++   = \" +  (d++) );\n     System.out.println(\"++d   = \" +  (++d) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na + b = 30\na - b = -10\na * b = 200\nb / a = 2\nb % a = 0\nc % a = 5\na++   = 10\na--   = 11\nd++   = 25\n++d   = 27\n```\n\n### 6-2 自增自减运算符\n\n**1、自增（++）自减（--）运算符**是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 3;//定义一个变量；\n        int b = ++a;//自增运算\n        int c = 3;\n        int d = --c;//自减运算\n        System.out.println(\"进行自增运算后的值等于\"+b);\n        System.out.println(\"进行自减运算后的值等于\"+d);\n    }\n}\n```\n\n运行结果为：\n\n```\n进行自增运算后的值等于4\n进行自减运算后的值等于2\n```\n\n解析：\n\n- int b = ++a; 拆分运算过程为: a=a+1=4; b=a=4, 最后结果为b=4,a=4\n- int d = --c; 拆分运算过程为: c=c-1=2; d=c=2, 最后结果为d=2,c=2\n\n**2、前缀自增自减法(++a,--a):** 先进行自增或者自减运算，再进行表达式运算。\n\n**3、后缀自增自减法(a++,a--):** 先进行表达式运算，再进行自增或者自减运算 实例：\n\n```Java\npublic class selfAddMinus{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        int b = 5;\n        int x = 2*++a;\n        int y = 2*b++;\n        System.out.println(\"自增运算符前缀运算后a=\"+a+\",x=\"+x);\n        System.out.println(\"自增运算符后缀运算后b=\"+b+\",y=\"+y);\n    }\n}\n```\n\n运行结果为：\n\n```\n自增运算符前缀运算后a=6，x=12\n自增运算符后缀运算后b=6，y=10\n```\n\n### 6-3 关系运算符\n\n下表为Java支持的关系运算符\n\n表格中的实例整数变量A的值为10，变量B的值为20：\n\n![image-20240228213115946](/images/image-20240228213115946.png)\n\n下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n \n  public static void main(String[] args) {\n     int a = 10;\n     int b = 20;\n     System.out.println(\"a == b = \" + (a == b) );\n     System.out.println(\"a != b = \" + (a != b) );\n     System.out.println(\"a > b = \" + (a > b) );\n     System.out.println(\"a < b = \" + (a < b) );\n     System.out.println(\"b >= a = \" + (b >= a) );\n     System.out.println(\"b <= a = \" + (b <= a) );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\na == b = false\na != b = true\na > b = false\na < b = true\nb >= a = true\nb <= a = false\n```\n\n### 6-4 位运算符\n\nJava定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。\n\n位运算符作用在所有的位上，并且按位运算。假设a = 60，b = 13;它们的二进制格式表示将如下：\n\n```Java\nA = 0011 1100\nB = 0000 1101\n-----------------\nA&B = 0000 1100\nA | B = 0011 1101\nA ^ B = 0011 0001\n~A= 1100 0011\n```\n\n下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：\n\n![image-20240228213253912](/images/image-20240228213253912.png)\n\n下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     int a = 60; /* 60 = 0011 1100 */ \n     int b = 13; /* 13 = 0000 1101 */\n     int c = 0;\n     c = a & b;       /* 12 = 0000 1100 */\n     System.out.println(\"a & b = \" + c );\n \n     c = a | b;       /* 61 = 0011 1101 */\n     System.out.println(\"a | b = \" + c );\n \n     c = a ^ b;       /* 49 = 0011 0001 */\n     System.out.println(\"a ^ b = \" + c );\n \n     c = ~a;          /*-61 = 1100 0011 */\n     System.out.println(\"~a = \" + c );\n \n     c = a << 2;     /* 240 = 1111 0000 */\n     System.out.println(\"a << 2 = \" + c );\n \n     c = a >> 2;     /* 15 = 1111 */\n     System.out.println(\"a >> 2  = \" + c );\n  \n     c = a >>> 2;     /* 15 = 0000 1111 */\n     System.out.println(\"a >>> 2 = \" + c );\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na & b = 12\na | b = 61\na ^ b = 49\n~a = -61\na << 2 = 240\na >> 2  = 15\na >>> 2 = 15\n```\n\n### 6-5 逻辑运算符\n\n下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假\n\n![image-20240228213402353](/images/image-20240228213402353.png)\n\n下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n  public static void main(String[] args) {\n     boolean a = true;\n     boolean b = false;\n     System.out.println(\"a && b = \" + (a&&b));\n     System.out.println(\"a || b = \" + (a||b) );\n     System.out.println(\"!(a && b) = \" + !(a && b));\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\na && b = false\na || b = true\n!(a && b) = true\n```\n\n### 6-6 短路逻辑运算符\n\n当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。\n\n```Java\npublic class LuoJi{\n    public static void main(String[] args){\n        int a = 5;//定义一个变量；\n        boolean b = (a<4)&&(a++<10);\n        System.out.println(\"使用短路逻辑运算符的结果为\"+b);\n        System.out.println(\"a的结果为\"+a);\n    }\n}\n```\n\n运行结果为：\n\n```\n使用短路逻辑运算符的结果为false\na的结果为5\n```\n\n**解析：** *该程序使用到了短路逻辑运算符(&&)，首先判断 a<4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++<10 的判断，所以 a 的值为 5。*\n\n### 6-7 赋值运算符\n\n下面是Java语言支持的赋值运算符：\n\n![image-20240228213543244](/images/image-20240228213543244.png)\n\n面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：\n\n```Java\npublic class Test {\n    public static void main(String[] args) {\n        int a = 10;\n        int b = 20;\n        int c = 0;\n        c = a + b;\n        System.out.println(\"c = a + b = \" + c );\n        c += a ;\n        System.out.println(\"c += a  = \" + c );\n        c -= a ;\n        System.out.println(\"c -= a = \" + c );\n        c *= a ;\n        System.out.println(\"c *= a = \" + c );\n        a = 10;\n        c = 15;\n        c /= a ;\n        System.out.println(\"c /= a = \" + c );\n        a = 10;\n        c = 15;\n        c %= a ;\n        System.out.println(\"c %= a  = \" + c );\n        c <<= 2 ;\n        System.out.println(\"c <<= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c >>= 2 ;\n        System.out.println(\"c >>= 2 = \" + c );\n        c &= a ;\n        System.out.println(\"c &= a  = \" + c );\n        c ^= a ;\n        System.out.println(\"c ^= a   = \" + c );\n        c |= a ;\n        System.out.println(\"c |= a   = \" + c );\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nc = a + b = 30\nc += a  = 40\nc -= a = 30\nc *= a = 300\nc /= a = 1\nc %= a  = 5\nc <<= 2 = 20\nc >>= 2 = 5\nc >>= 2 = 1\nc &= a  = 0\nc ^= a   = 10\nc |= a   = 10\n```\n\n### 6-8 条件运算符（?:）\n\n条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。\n\n```Java\nvariable x = (expression) ? value if true : value if false\n```\n\n```Java\n// Test.java 文件代码：\n    \npublic class Test {\n   public static void main(String[] args){\n      int a , b;\n      a = 10;\n      // 如果 a 等于 1 成立，则设置 b 为 20，否则为 30\n      b = (a == 1) ? 20 : 30;\n      System.out.println( \"Value of b is : \" +  b );\n \n      // 如果 a 等于 10 成立，则设置 b 为 20，否则为 30\n      b = (a == 10) ? 20 : 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nValue of b is : 30\nValue of b is : 20\n```\n\n### 6-9 instanceof 运算符\n\n该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。\n\ninstanceof运算符使用格式如下：\n\n```\n( Object reference variable ) instanceof  (class/interface type)\n```\n\n如果运算符左侧变量所指的对象，是操作符右侧类或接口(class/interface)的一个对象，那么结果为真。\n\n下面是一个例子：\n\n```\nString name = \"James\";\nboolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真\n```\n\n如果被比较的对象兼容于右侧类型,该运算符仍然返回true。\n\n看下面的例子：\n\n```java\nclass Vehicle {}\n \npublic class Car extends Vehicle {\n   public static void main(String[] args){\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\ntrue\n```\n\n### 6-10 Java运算符优先级\n\n当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。\n\n例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。\n\n再如，x = 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。\n\n下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。\n\n![image-20240228213815636](/images/image-20240228213815636.png)\n\n## 7，Java循环结构\n\n### 7-1 while 循环\n\nwhile是最基本的循环，它的结构为：\n\n```Java\nwhile( 布尔表达式 ) {\n  //循环内容\n}\n```\n\n只要布尔表达式为 true，循环就会一直执行下去。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```Java\npublic class Test {\n   public static void main(String args[]) {\n      int x = 10;\n      while( x < 20 ) {\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```Java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-2 do…while 循环\n\n对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。\n\ndo…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。\n\n```Java\ndo {\n       //代码语句\n}while(布尔表达式);\n```\n\n**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int x = 10;\n \n      do{\n         System.out.print(\"value of x : \" + x );\n         x++;\n         System.out.print(\"\\n\");\n      }while( x < 20 );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-3 for循环\n\n虽然所有循环结构都可以用 while 或者 do...while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。\n\nfor循环执行的次数是在执行前就确定的。语法格式如下：\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    //代码语句\n}\n```\n\n关于 for 循环有以下几点说明：\n\n- 最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。\n- 然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。\n- 执行一次循环后，更新循环控制变量。\n- 再次检测布尔表达式。循环执行上面的过程。\n\n实例\n\n**Test.java 文件代码**\n\n```java\npublic class Test {\n   public static void main(String args[]) {\n \n      for(int x = 10; x < 20; x = x+1) {\n         System.out.print(\"value of x : \" + x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nvalue of x : 10\nvalue of x : 11\nvalue of x : 12\nvalue of x : 13\nvalue of x : 14\nvalue of x : 15\nvalue of x : 16\nvalue of x : 17\nvalue of x : 18\nvalue of x : 19\n```\n\n### 7-4 Java 增强 for 循环\n\nJava5 引入了一种主要用于数组的增强型 for 循环。\n\nJava 增强 for 循环语法格式如下:\n\n```java\nfor(声明语句 : 表达式)\n{\n   //代码句子\n}\n```\n\n**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。\n\n**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。\n\n**实例**\n\n**Test.java 文件代码：**\n\n```java\npublic class Test {\n   public static void main(String args[]){\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ){\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names ={\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10,20,30,40,50,\nJames,Larry,Tom,Lacy,\n```\n\n### 7-5 break 关键字\n\nbreak 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。\n\nbreak 跳出最里层的循环，并且继续执行该循环下面的语句。\n\n语法\n\nbreak 的用法很简单，就是循环结构中的一条语句：\n\n```\nbreak;\n```\n\n实例\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         // x 等于 30 时跳出循环\n         if( x == 30 ) {\n            break;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n10\n20\n```\n\n### 7-6 continue 关键字\n\ncontinue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。\n\n在 for 循环中，continue 语句使程序立即跳转到更新语句。\n\n在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。\n\n语法\n\ncontinue 就是循环体中一条简单的语句：\n\n```\ncontinue;\n```\n\n实例\n\n```java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n \n      for(int x : numbers ) {\n         if( x == 30 ) {\n        continue;\n         }\n         System.out.print( x );\n         System.out.print(\"\\n\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n10\n20\n40\n50\n```\n\n## 8，Java条件语句\n\n### 8-1 if...else语句\n\nif 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。\n\n语法\n\nif…else 的用法如下：\n\n```Java\nif(布尔表达式){\n   //如果布尔表达式的值为true\n}else{\n   //如果布尔表达式的值为false\n}\n```\n\n实例\n\n```Java\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n \n      if( x < 20 ){\n         System.out.print(\"这是 if 语句\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n这是 else 语句\n```\n\n### 8-2 if...else if...else 语句\n\nif 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。\n\n使用 if，else if，else 语句的时候，需要注意下面几点：\n\n- if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。\n- if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。\n- 一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。\n\n**语法**\n\nif...else 语法格式如下:\n\n```java\nif(布尔表达式 1){\n   //如果布尔表达式 1的值为true执行代码\n}else if(布尔表达式 2){\n   //如果布尔表达式 2的值为true执行代码\n}else if(布尔表达式 3){\n   //如果布尔表达式 3的值为true执行代码\n}else {\n   //如果以上布尔表达式都不为true执行代码\n}\n```\n\n**实例**\n\n```Java\n// Test.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int x = 30;\n \n      if( x == 10 ){\n         System.out.print(\"Value of X is 10\");\n      }else if( x == 20 ){\n         System.out.print(\"Value of X is 20\");\n      }else if( x == 30 ){\n         System.out.print(\"Value of X is 30\");\n      }else{\n         System.out.print(\"这是 else 语句\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\nValue of X is 30\n```\n\n### 8-3 嵌套的 if…else 语句\n\n使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。\n\n**语法**\n\n嵌套的 if…else 语法格式如下：\n\n```java\nif(布尔表达式 1){\n   ////如果布尔表达式 1的值为true执行代码\n   if(布尔表达式 2){\n      ////如果布尔表达式 2的值为true执行代码\n   }\n}\n```\n\n你可以像 if 语句一样嵌套 else if...else。\n\n**实例**\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n \n   public static void main(String args[]){\n      int x = 30;\n      int y = 10;\n \n      if( x == 30 ){\n         if( y == 10 ){\n             System.out.print(\"X = 30 and Y = 10\");\n          }\n       }\n    }\n}\n```\n\n以上代码编译运行结果如下：\n\n```java\nX = 30 and Y = 10\n```\n\n## 9，Java switch case 语句\n\nswitch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。\n\n**语法**\n\nswitch case 语句语法格式如下：\n\n```Java\nswitch(expression){\n    case value :\n       //语句\n       break; //可选\n    case value :\n       //语句\n       break; //可选\n    //你可以有任意数量的case语句\n    default : //可选\n       //语句\n}\n```\n\nswitch case 语句有如下规则：\n\n- switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。\n- switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。\n- case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。\n- 当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。\n- 当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。\n- switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。\n\n**switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。**\n\n**实例**\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      //char grade = args[0].charAt(0);\n      char grade = 'C';\n \n      switch(grade)\n      {\n         case 'A' :\n            System.out.println(\"优秀\"); \n            break;\n         case 'B' :\n         case 'C' :\n            System.out.println(\"良好\");\n            break;\n         case 'D' :\n            System.out.println(\"及格\");\n            break;\n         case 'F' :\n            System.out.println(\"你需要再努力努力\");\n            break;\n         default :\n            System.out.println(\"未知等级\");\n      }\n      System.out.println(\"你的等级是 \" + grade);\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```Java\n良好\n你的等级是 C\n```\n\n如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。\n\n```Java\nTest.java 文件代码：\npublic class Test {\n   public static void main(String args[]){\n      int i = 5;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\ndefault\n```\n\n如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。\n\n```Java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\ndefault\n```\n\n如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。\n\n```java\n// Test.java 文件代码：\n\npublic class Test {\n   public static void main(String args[]){\n      int i = 1;\n      switch(i){\n         case 0:\n            System.out.println(\"0\");\n         case 1:\n            System.out.println(\"1\");\n         case 2:\n            System.out.println(\"2\");\n         case 3:\n            System.out.println(\"3\"); break;\n         default:\n            System.out.println(\"default\");\n      }\n   }\n}\n```\n\n以上代码编译运行结果如下：\n\n```\n1\n2\n3\n```\n\n## 10，Java Number & Math 类\n\n一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：**byte、int、long、double** 等。\n\n```Java\nint a = 5000;\nfloat b = 13.65f;\nbyte c = 0x4a;\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。\n\n所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。\n\n这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。\n\n下面是一个使用 Integer 对象的实例：\n\n```java\n// Test.java 文件代码：\n\npublic class Test{\n \n   public static void main(String args[]){\n      Integer x = 5;\n      x =  x + 10;\n      System.out.println(x); \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n15\n```\n\n当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。\n\n### 10-1 Java Math 类\n\nJava 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。\n\nMath 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。\n\n```java\nTest.java 文件代码：\npublic class Test {  \n    public static void main (String []args)  \n    {  \n        System.out.println(\"90 度的正弦值：\" + Math.sin(Math.PI/2));  \n        System.out.println(\"0度的余弦值：\" + Math.cos(0));  \n        System.out.println(\"60度的正切值：\" + Math.tan(Math.PI/3));  \n        System.out.println(\"1的反正切值： \" + Math.atan(1));  \n        System.out.println(\"π/2的角度值：\" + Math.toDegrees(Math.PI/2));  \n        System.out.println(Math.PI);  \n    }  \n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n90 度的正弦值：1.0\n0度的余弦值：1.0\n60度的正切值：1.7320508075688767\n1的反正切值： 0.7853981633974483\nπ/2的角度值：90.0\n3.141592653589793\n```\n\n### 10-2 Number & Math 类方法\n\n下面的表中列出的是 Number & Math 类常用的一些方法：\n\n![image-20240228220453132](/images/image-20240228220453132.png)\n\n### 10-3 Math 的 floor,round 和 ceil 方法实例比较\n\n![image-20240228220635826](/images/image-20240228220635826.png)\n\n**floor,round 和 ceil 实例：**\n\n```java\npublic class Main {   \n  public static void main(String[] args) {   \n    double[] nums = { 1.4, 1.5, 1.6, -1.4, -1.5, -1.6 };   \n    for (double num : nums) {   \n      test(num);   \n    }   \n  }   \n  \n  private static void test(double num) {   \n    System.out.println(\"Math.floor(\" + num + \")=\" + Math.floor(num));   \n    System.out.println(\"Math.round(\" + num + \")=\" + Math.round(num));   \n    System.out.println(\"Math.ceil(\" + num + \")=\" + Math.ceil(num));   \n  }   \n}\n```\n\n以上实例执行输出结果为：\n\n```java\nMath.floor(1.4)=1.0\nMath.round(1.4)=1\nMath.ceil(1.4)=2.0\nMath.floor(1.5)=1.0\nMath.round(1.5)=2\nMath.ceil(1.5)=2.0\nMath.floor(1.6)=1.0\nMath.round(1.6)=2\nMath.ceil(1.6)=2.0\nMath.floor(-1.4)=-2.0\nMath.round(-1.4)=-1\nMath.ceil(-1.4)=-1.0\nMath.floor(-1.5)=-2.0\nMath.round(-1.5)=-1\nMath.ceil(-1.5)=-1.0\nMath.floor(-1.6)=-2.0\nMath.round(-1.6)=-2\nMath.ceil(-1.6)=-1.0\n```\n\n## 11，Java Character 类\n\nCharacter 类用于对单个字符进行操作。\n\nCharacter 类在对象中包装一个基本类型 **char** 的值\n\n```Java\nchar ch = 'a';\n \n// Unicode 字符表示形式\nchar uniChar = '\\u039A'; \n \n// 字符数组\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' };\n```\n\n然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。\n\nCharacter类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：\n\n```Java\nCharacter ch = new Character('a');\n```\n\n在某些情况下，Java编译器会自动创建一个Character对象。\n\n例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。\n\n```Java\n// 原始字符 'a' 装箱到 Character 对象 ch 中\nCharacter ch = 'a';\n \n// 原始字符 'x' 用 test 方法装箱\n// 返回拆箱的值到 'c'\nchar c = test('x');\n```\n\n### 11-1 转义序列\n\n前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。\n\n下面列表展示了Java的转义序列：\n\n![image-20240228220904427](/images/image-20240228220904427.png)\n\n**实例**\n\n当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。\n\n以下实例转义双引号并输出：\n\n```Java\nTest.java 文件代码：\npublic class Test {\n \n   public static void main(String args[]) {\n      System.out.println(\"访问\\\"菜鸟教程!\\\"\");\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n访问\"菜鸟教程!\"\n```\n\n### 11-2 Character 方法\n\n下面是Character类的方法：\n\n![image-20240228220959034](/images/image-20240228220959034.png)\n\n## 12，Java String 类\n\n### 12-1 创建字符串\n\n创建字符串最简单的方式如下:\n\n```Java\nString greeting = \"菜鸟教程\";\n```\n\n在代码中遇到字符串常量时，这里的值是 \"**菜鸟教程**\"\"，编译器会使用该值创建一个 String 对象。\n\n和其它对象一样，可以使用关键字和构造方法来创建 String 对象。\n\nString 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo{\n   public static void main(String args[]){\n      char[] helloArray = { 'r', 'u', 'n', 'o', 'o', 'b'};\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nrunoob\n```\n\n**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。\n\n如果需要对字符串做很多修改，那么应该选择使用 [StringBuffer & StringBuilder 类](http://it028.com/java-stringbuffer.html)。\n\n### 12-2 字符串长度\n\n用于获取有关对象的信息的方法称为访问器方法。\n\nString 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。\n\n下面的代码执行后，len 变量等于 14:\n\n```java\n// StringDemo.java 文件代码：\npublic class StringDemo {\n    public static void main(String args[]) {\n        String site = \"www.runoob.com\";\n        int len = site.length();\n        System.out.println( \"菜鸟教程网址长度 : \" + len );\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程网址长度 : 14\n```\n\n### 12-3 连接字符串\n\nString 类提供了连接两个字符串的方法：\n\nstring1.concat(string2);\n\n返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：\n\n```\n\"我的名字是 \".concat(\"Runoob\");\n```\n\n更常用的是使用'+'操作符来连接字符串，如：\n\n```\n\"Hello,\" + \" runoob\" + \"!\"\n```\n\n结果如下:\n\n```\n\"Hello, runoob!\"\n```\n\n下面是一个例子:\n\n```java\n// StringDemo.java 文件代码：\n\npublic class StringDemo {\n    public static void main(String args[]) {     \n        String string1 = \"菜鸟教程网址：\";     \n        System.out.println(\"1、\" + string1 + \"www.runoob.com\");  \n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1、菜鸟教程网址：www.runoob.com\n```\n\n### 12-4 创建格式化字符串\n\n我们知道输出格式化数字可以使用 printf() 和 format() 方法。\n\nString 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。\n\nString 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。\n\n如下所示：\n\n```java\nSystem.out.printf(\"浮点型变量的值为 \" +\n                  \"%f, 整型变量的值为 \" +\n                  \" %d, 字符串变量的值为 \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n```\n\n你也可以这样写\n\n```java\nString fs;\nfs = String.format(\"浮点型变量的值为 \" +\n                   \"%f, 整型变量的值为 \" +\n                   \" %d, 字符串变量的值为 \" +\n                   \" %s\", floatVar, intVar, stringVar);\n```\n\n### 12-5 String 方法\n\n下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm('https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html') 文档:\n\n![image-20240228221437713](/images/image-20240228221437713.png)\n\n## 13，Java StringBuffer 和 StringBuilder 类\n\n当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。\n\n和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。\n\nStringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。\n\n由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。\n\n```Java\nTest.java 文件代码：\npublic class Test{\n  public static void main(String args[]){\n    StringBuffer sBuffer = new StringBuffer(\"菜鸟教程官网：\");\n    sBuffer.append(\"www\");\n    sBuffer.append(\".runoob\");\n    sBuffer.append(\".com\");\n    System.out.println(sBuffer);  \n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n菜鸟教程官网：www.runoob.com\n```\n\n### 13-1 StringBuffer 方法\n\n以下是 StringBuffer 类支持的主要方法\n\n![image-20240228221542960](/images/image-20240228221542960.png)\n\n下面的列表里的方法和 String 类的方法类似：\n\n![image-20240228221620605](/images/image-20240228221620605.png)\n\n## 14，Java数组\n\n### 14-1 声明数组变量\n\n首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：\n\n```Java\ndataType[] arrayRefVar;   // 首选的方法\n \n或\n \ndataType arrayRefVar[];  // 效果相同，但不是首选方法\n```\n\n**注意:** 建议使用 **dataType[] arrayRefVar** 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。\n\n下面是这两种语法的代码示例：\n\n```Java\ndouble[] myList;         // 首选的方法\n \n或\n \ndouble myList[];         //  效果相同，但不是首选方法\n```\n\n### 14-2 创建数组\n\nJava语言使用new操作符来创建数组，语法如下：\n\n```\narrayRefVar = new dataType[arraySize];\n```\n\n上面的语法语句做了两件事：\n\n- 一、使用 dataType[arraySize] 创建了一个数组。\n- 二、把新创建的数组的引用赋值给变量 arrayRefVar。\n\n数组变量的声明，和创建数组可以用一条语句完成，如下所示：\n\n```\ndataType[] arrayRefVar = new dataType[arraySize];\n```\n\n另外，你还可以使用如下的方式创建数组。\n\n```\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n```\n\n数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。\n\n**实例**\n\n下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。\n\n```Java\nTestArray.java 文件代码：\npublic class TestArray {\n   public static void main(String[] args) {\n      // 数组大小\n      int size = 10;\n      // 定义数组\n      double[] myList = new double[size];\n      myList[0] = 5.6;\n      myList[1] = 4.5;\n      myList[2] = 3.3;\n      myList[3] = 13.2;\n      myList[4] = 4.0;\n      myList[5] = 34.33;\n      myList[6] = 34.0;\n      myList[7] = 45.45;\n      myList[8] = 99.993;\n      myList[9] = 11123;\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < size; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"总和为： \" + total);\n   }\n}\n```\n\n以上实例输出结果为：\n\n```\n总和为： 11367.373\n```\n\n### 14-3 处理数组\n\n数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。\n\n**示例**\n\n该实例完整地展示了如何创建、初始化和操纵数组：\n\n```Java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n      // 计算所有元素的总和\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      // 查找最大元素\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n```\n\n### 14-4 For-Each 循环\n\nJDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。\n\n语法格式如下：\n\n```java\nfor(type element: array)\n{\n    System.out.println(element);\n}\n```\n\n**实例**\n\n该实例用来显示数组 myList 中的所有元素：\n\n```java\n// TestArray.java 文件代码：\n\npublic class TestArray {\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n \n      // 打印所有数组元素\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n1.9\n2.9\n3.4\n3.5\n```\n\n### 14-5 数组作为函数的参数\n\n数组可以作为参数传递给方法。\n\n例如，下面的例子就是一个打印 int 数组中元素的方法:\n\n```java\npublic static void printArray(int[] array) {\n  for (int i = 0; i < array.length; i++) {\n    System.out.print(array[i] + \" \");\n  }\n}\n```\n\n下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：\n\n```java\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n```\n\n### 14-6 数组作为函数的返回值\n\n```java\npublic static int[] reverse(int[] list) {\n  int[] result = new int[list.length];\n \n  for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n    result[j] = list[i];\n  }\n  return result;\n}\n```\n\n### 14-7 多维数组\n\n多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：\n\n```java\nString str[][] = new String[3][4];\n```\n\n#### 14-7-1 多维数组的动态初始化（以二维数组为例）\n\n1. 直接为每一维分配空间，格式如下：\n\n```java\ntype[][] typeName = new type[typeLength1][typeLength2];\n```\n\ntype 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。\n\n例如：\n\n```java\nint a[][] = new int[2][3];\n```\n\n解析：\n\n二维数组 a 可以看成一个两行三列的数组。\n\n2，从最高维开始，分别为每一维分配空间，例如：\n\n```Java\nString s[][] = new String[2][];\ns[0] = new String[2];\ns[1] = new String[3];\ns[0][0] = new String(\"Good\");\ns[0][1] = new String(\"Luck\");\ns[1][0] = new String(\"to\");\ns[1][1] = new String(\"you\");\ns[1][2] = new String(\"!\");\n```\n\n解析：\n\n**s[0]=new String[2]** 和 **s[1]=new String[3]** 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 **s0=new String(\"Good\")** 等操作。\n\n#### 14-7-2 多维数组的引用（以二维数组为例）\n\n对二维数组中的每个元素，引用方式为 **arrayName[index1][index2]**，例如：\n\n```Java\nnum[1][0];\n```\n\n### 14-8 Arrays 类\n\njava.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。\n\n具有以下功能：\n\n- 给数组赋值：通过 fill 方法。\n- 对数组排序：通过 sort 方法,按升序。\n- 比较数组：通过 equals 方法比较数组中元素值是否相等。\n- 查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。\n\n具体说明请查看下表：\n\n![image-20240228222507296](/images/image-20240228222507296.png)\n\n## 15，Java 日期时间\n\njava.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。\n\n第一个构造函数使用当前日期和时间来初始化对象。\n\n```Java\nDate( )\n```\n\n第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。\n\n```\nDate(long millisec)\n```\n\nDate对象创建以后，可以调用下面的方法。\n\n![image-20240228222725206](/images/image-20240228222725206.png)\n\n### 15-1 获取当前日期时间\n\nJava中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用 toString() 函数显示日期时间\n       System.out.println(date.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nMon May 04 09:51:52 CDT 2013\n```\n\n### 15-2 日期比较\n\nJava使用以下三种方法来比较两个日期：\n\n- 使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。\n- 使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。\n- 使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。\n\n### 15-3 使用 SimpleDateFormat 格式化日期\n\nSimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：\n\n```Java\nimport  java.util.*;\nimport java.text.*;\n \npublic class DateDemo {\n   public static void main(String args[]) {\n \n      Date dNow = new Date( );\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n \n      System.out.println(\"当前时间为: \" + ft.format(dNow));\n   }\n}\n```\n\n```\nSimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd hh:mm:ss\");\n```\n\n这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。\n\n**注意**:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。\n\n以上实例编译运行结果如下:\n\n```\n当前时间为: 2018-09-06 10:16:34\n```\n\n### 15-4 日期和时间的格式化编码\n\n时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：\n\n![image-20240228222933035](/images/image-20240228222933035.png)\n\n### 15-5 使用printf格式化日期\n\nprintf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 **%t** 开头并且以下面表格中的一个字母结尾。\n\n![image-20240228223002094](/images/image-20240228223002094.png)\n\n**实例**\n\n```Java\nimport java.util.Date;\n \npublic class DateDemo {\n \n  public static void main(String args[]) {\n     // 初始化 Date 对象\n     Date date = new Date();\n \n     //c的使用  \n    System.out.printf(\"全部日期和时间信息：%tc%n\",date);          \n    //f的使用  \n    System.out.printf(\"年-月-日格式：%tF%n\",date);  \n    //d的使用  \n    System.out.printf(\"月/日/年格式：%tD%n\",date);  \n    //r的使用  \n    System.out.printf(\"HH:MM:SS PM格式（12时制）：%tr%n\",date);  \n    //t的使用  \n    System.out.printf(\"HH:MM:SS格式（24时制）：%tT%n\",date);  \n    //R的使用  \n    System.out.printf(\"HH:MM格式（24时制）：%tR\",date);  \n  }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  \n年-月-日格式：2012-09-10  \n月/日/年格式：09/10/12  \nHH:MM:SS PM格式（12时制）：10:43:36 上午  \nHH:MM:SS格式（24时制）：10:43:36  \nHH:MM格式（24时制）：10:43  \n```\n\n如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。\n\n索引必须紧跟在%后面，而且必须以$结束。例如\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 使用toString()显示日期和时间\n       System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n或者，你可以使用 < 标志。它表明先前被格式化的参数要被再次使用。例如：\n\n```Java\nimport java.util.Date;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n       // 初始化 Date 对象\n       Date date = new Date();\n        \n       // 显示格式化时间\n       System.out.printf(\"%s %tB %<te, %<tY\", \n                         \"Due date:\", date);\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nDue date: February 09, 2014\n```\n\n定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：\n\n```Java\nimport java.util.*;\n  \npublic class DateDemo {\n   public static void main(String args[]) {\n       Date date=new Date();                                      \n        //b的使用，月份简称  \n        String str=String.format(Locale.US,\"英文月份简称：%tb\",date);       \n        System.out.println(str);                                                                              \n        System.out.printf(\"本地月份简称：%tb%n\",date);  \n        //B的使用，月份全称  \n        str=String.format(Locale.US,\"英文月份全称：%tB\",date);  \n        System.out.println(str);  \n        System.out.printf(\"本地月份全称：%tB%n\",date);  \n        //a的使用，星期简称  \n        str=String.format(Locale.US,\"英文星期的简称：%ta\",date);  \n        System.out.println(str);  \n        //A的使用，星期全称  \n        System.out.printf(\"本地星期的简称：%tA%n\",date);  \n        //C的使用，年前两位  \n        System.out.printf(\"年的前两位数字（不足两位前面补0）：%tC%n\",date);  \n        //y的使用，年后两位  \n        System.out.printf(\"年的后两位数字（不足两位前面补0）：%ty%n\",date);  \n        //j的使用，一年的天数  \n        System.out.printf(\"一年中的天数（即年的第几天）：%tj%n\",date);  \n        //m的使用，月份  \n        System.out.printf(\"两位数字的月份（不足两位前面补0）：%tm%n\",date);  \n        //d的使用，日（二位，不够补零）  \n        System.out.printf(\"两位数字的日（不足两位前面补0）：%td%n\",date);  \n        //e的使用，日（一位不补零）  \n        System.out.printf(\"月份的日（前面不补0）：%te\",date);  \n   }\n}\n```\n\n输出结果为：\n\n```Java\n英文月份简称：May\n本地月份简称：五月\n英文月份全称：May\n本地月份全称：五月\n英文星期的简称：Thu\n本地星期的简称：星期四\n年的前两位数字（不足两位前面补0）：20\n年的后两位数字（不足两位前面补0）：17\n一年中的天数（即年的第几天）：124\n两位数字的月份（不足两位前面补0）：05\n两位数字的日（不足两位前面补0）：04\n月份的日（前面不补0）：4\n```\n\n------\n\n### 15-6 解析字符串为时间\n\nSimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：\n\n```Java\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n \n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n \n      System.out.print(input + \" Parses as \"); \n \n      Date t; \n \n      try { \n          t = ft.parse(input); \n          System.out.println(t); \n      } catch (ParseException e) { \n          System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n$ java DateDemo\n1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818\n$ java DateDemo 2007-12-01\n2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007\n```\n\n### 15-7 Java 休眠(sleep)\n\nsleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。\n\n你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：\n\n```Java\nimport java.util.*;\n  \npublic class SleepDemo {\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(1000*3);   // 休眠3秒\n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) { \n          System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nThu Sep 17 10:20:30 CST 2015\n\nThu Sep 17 10:20:33 CST 2015\n```\n\n### 15-8 测量时间\n\n下面的一个例子表明如何测量时间间隔（以毫秒为单位）：\n\n```Java\nimport java.util.*;\n  \npublic class DiffDemo {\n \n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下:\n\n```Java\nFri Jan 08 09:48:47 CST 2016\n\nFri Jan 08 09:48:50 CST 2016\n\nDifference is : 3019\n```\n\n### 15-9 Calendar类\n\n我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。\n\nCalendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。\n\nCalendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。\n\n#### 15-9-1 创建一个代表系统当前日期的Calendar对象\n\n```Java\nCalendar c = Calendar.getInstance();//默认是当前日期\n```\n\n#### 15-9-2 创建一个指定日期的Calendar对象\n\n使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。\n\n```Java\n//创建一个代表2009年6月12日的Calendar对象\nCalendar c1 = Calendar.getInstance();\nc1.set(2009, 6 - 1, 12);\n```\n\n#### 15-9-3 Calendar类对象字段类型\n\nCalendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想\n\n![image-20240228225026914](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225026914.png)\n\n#### 15-9-4 Calendar类对象信息的设置\n\n**Set设置**\n\n如：\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n调用：\n\n```\npublic final void set(int year,int month,int date)\nc1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12\n```\n\n利用字段类型设置\n\n如果只设定某个字段，例如日期的值，则可以使用如下set方法：\n\n```\npublic void set(int field,int value)\n```\n\n把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算\n\n```\nc1.set(Calendar.DATE,10);\n```\n\n把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算\n\n```\nc1.set(Calendar.YEAR,2008);\n```\n\n其他字段属性set的意义以此类推\n\n**Add设置**\n\n```\nCalendar c1 = Calendar.getInstance();\n```\n\n把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, 10);\n```\n\n把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算\n\n```\nc1.add(Calendar.DATE, -10);\n```\n\n其他字段属性的add的意义以此类推\n\n#### 15-9-5 Calendar类对象信息的获得\n\n```Java\nCalendar c1 = Calendar.getInstance();\n// 获得年份\nint year = c1.get(Calendar.YEAR);\n// 获得月份\nint month = c1.get(Calendar.MONTH) + 1;\n// 获得日期\nint date = c1.get(Calendar.DATE);\n// 获得小时\nint hour = c1.get(Calendar.HOUR_OF_DAY);\n// 获得分钟\nint minute = c1.get(Calendar.MINUTE);\n// 获得秒\nint second = c1.get(Calendar.SECOND);\n// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）\nint day = c1.get(Calendar.DAY_OF_WEEK);\n```\n\n### 15-10 GregorianCalendar类\n\nCalendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。\n\nCalendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。\n\n下面列出GregorianCalendar对象的几个构造方法：\n\n![image-20240228225136150](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225136150.png)\n\n这里是GregorianCalendar 类提供的一些有用的方法列表：\n\n![image-20240228225205976](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225205976.png)\n\n```Java\nimport java.util.*;\n  \npublic class GregorianCalendarDemo {\n \n   public static void main(String args[]) {\n      String months[] = {\n      \"Jan\", \"Feb\", \"Mar\", \"Apr\",\n      \"May\", \"Jun\", \"Jul\", \"Aug\",\n      \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // 初始化 Gregorian 日历\n      // 使用当前时间和日期\n      // 默认为本地时间和时区\n      GregorianCalendar gcalendar = new GregorianCalendar();\n      // 显示当前时间和日期的信息\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n      \n      // 测试当前年份是否为闰年\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"当前年份是闰年\");\n      }\n      else {\n         System.out.println(\"当前年份不是闰年\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nDate: Apr 22 2009\nTime: 11:25:27\n当前年份不是闰年\n```\n\n关于 Calender 类的完整列表，你可以参考标准的 [Java文档](http://it028.com/index-10.htm)。\n\n## 16，Java 正则表达式\n\n正则表达式定义了字符串的模式。\n\n正则表达式可以用来搜索、编辑或处理文本。\n\n正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。\n\n### 16-1 正则表达式实例\n\n一个字符串其实就是一个简单的正则表达式，例如 **Hello World** 正则表达式匹配 \"Hello World\" 字符串。\n\n**.**（点号）也是一个正则表达式，它匹配任何一个字符如：\"a\" 或 \"1\"。\n\n下表列出了一些正则表达式的实例及描述：\n\n![image-20240228225320769](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225320769.png)\n\nJava 正则表达式和 Perl 的是最为相似的。\n\njava.util.regex 包主要包括以下三个类：\n\n- Pattern 类：\n\n  pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。\n\n- Matcher 类：\n\n  Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。\n\n- PatternSyntaxException：\n\n  PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。\n\n以下实例中使用了正则表达式 **.\\*runoob.\\*** 用于查找字符串中是否包了 **runoob** 子串：\n\n```Java\nimport java.util.regex.*;\n \nclass RegexExample1{\n   public static void main(String args[]){\n      String content = \"I am noob \" +\n        \"from runoob.com.\";\n \n      String pattern = \".*runoob.*\";\n \n      boolean isMatch = Pattern.matches(pattern, content);\n      System.out.println(\"字符串中是否包含了 'runoob' 子字符串? \" + isMatch);\n   }\n}\n```\n\n实例输出结果为：\n\n```\n字符串中是否包含了 'runoob' 子字符串? true\n```\n\n### 16-2 捕获组\n\n捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。\n\n例如，正则表达式 (dog) 创建了单一分组，组里包含\"d\"，\"o\"，和\"g\"。\n\n捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：\n\n- ((A)(B(C)))\n- (A)\n- (B(C))\n- (C)\n\n可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。\n\n还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    public static void main( String args[] ){\n \n      // 按指定模式在字符串查找\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(\\\\D*)(\\\\d+)(.*)\";\n \n      // 创建 Pattern 对象\n      Pattern r = Pattern.compile(pattern);\n \n      // 现在创建 matcher 对象\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n         System.out.println(\"Found value: \" + m.group(3) ); \n      } else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT\nFound value: 3000\nFound value: ! OK?\n```\n\n------\n\n### 16-3 正则表达式语法\n\n在其他语言中，**\\\\** 表示：**我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。**\n\n在 Java 中，**\\\\** 表示：**我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。**\n\n所以，在其他的语言中（如Perl），一个反斜杠 **\\** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 **\\\\** 代表其他语言中的一个 **\\**，这也就是为什么表示一位数字的正则表达式是 **\\\\d**，而表示一个普通的反斜杠是 **\\\\\\\\**。\n\n![image-20240228225546405](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225546405.png)\n\n### 16-4 Matcher 类的方法\n\n#### 16-4-1 索引方法\n\n索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：\n\n![image-20240228225637596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225637596.png)\n\n#### 16-4-2 研究方法\n\n研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：\n\n![image-20240228225700596](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225700596.png)\n\n#### 16-4-3 替换方法\n\n替换方法是替换输入字符串里文本的方法：\n\n![image-20240228225727777](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228225727777.png)\n\n#### 16-4-4 start 和 end 方法\n\n下面是一个对单词 \"cat\" 出现在输入字符串中出现次数进行计数的例子：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"\\\\bcat\\\\b\";\n    private static final String INPUT =\n                                    \"cat cat cat cattie cat\";\n \n    public static void main( String args[] ){\n       Pattern p = Pattern.compile(REGEX);\n       Matcher m = p.matcher(INPUT); // 获取 matcher 对象\n       int count = 0;\n \n       while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```java\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n```\n\n可以看到这个例子是使用单词边界，以确保字母 \"c\" \"a\" \"t\" 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。\n\nStart 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。\n\n#### 16-4-5 matches 和 lookingAt 方法\n\nmatches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。\n\nlookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。\n\n这两个方法经常在输入字符串的开始使用。\n\n我们通过下面这个例子，来解释这个功能：\n\n```java\n// RegexMatches.java 文件代码：\n\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static final String REGEX = \"foo\";\n    private static final String INPUT = \"fooooooooooooooooo\";\n    private static final String INPUT2 = \"ooooofoooooooooooo\";\n    private static Pattern pattern;\n    private static Matcher matcher;\n    private static Matcher matcher2;\n \n    public static void main( String args[] ){\n       pattern = Pattern.compile(REGEX);\n       matcher = pattern.matcher(INPUT);\n       matcher2 = pattern.matcher(INPUT2);\n \n       System.out.println(\"Current REGEX is: \"+REGEX);\n       System.out.println(\"Current INPUT is: \"+INPUT);\n       System.out.println(\"Current INPUT2 is: \"+INPUT2);\n \n \n       System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n       System.out.println(\"matches(): \"+matcher.matches());\n       System.out.println(\"lookingAt(): \"+matcher2.lookingAt());\n   }\n```\n\n以上实例编译运行结果如下：\n\n```\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nCurrent INPUT2 is: ooooofoooooooooooo\nlookingAt(): true\nmatches(): false\nlookingAt(): false\n```\n\n#### 16-4-6 replaceFirst 和 replaceAll 方法\n\nreplaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。\n\n下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n    private static String REGEX = \"dog\";\n    private static String INPUT = \"The dog says meow. \" +\n                                    \"All dogs say meow.\";\n    private static String REPLACE = \"cat\";\n \n    public static void main(String[] args) {\n       Pattern p = Pattern.compile(REGEX);\n       // get a matcher object\n       Matcher m = p.matcher(INPUT); \n       INPUT = m.replaceAll(REPLACE);\n       System.out.println(INPUT);\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe cat says meow. All cats say meow.\n```\n\n#### 16-4-7 appendReplacement 和 appendTail 方法\n\nMatcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：\n\n看下面的例子来解释这个功能：\n\n```java\nRegexMatches.java 文件代码：\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n \npublic class RegexMatches\n{\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoobkkk\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      // 获取 matcher 对象\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()){\n         m.appendReplacement(sb,REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n-foo-foo-foo-kkk\n```\n\n#### 16-4-8 PatternSyntaxException 类的方法\n\nPatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。\n\nPatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。\n\n![image-20240228230136771](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228230136771.png)\n\n## 17，Java 方法\n\n在前面几个章节中我们经常使用到 **System.out.println()**，那么它是什么呢？\n\n- println() 是一个方法。\n- System 是系统类。\n- out 是标准输出对象。\n\n这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。\n\n\n\n### 17-1 那么什么是方法呢？\n\nJava方法是语句的集合，它们在一起执行一个功能。\n\n- 方法是解决一类问题的步骤的有序组合\n- 方法包含于类或对象中\n- 方法在程序中被创建，在其他地方被引用\n\n### 17-2 方法的优点\n\n- \\1. 使程序变得更简短而清晰。\n- \\2. 有利于程序维护。\n- \\3. 可以提高程序开发的效率。\n- \\4. 提高了代码的重用性。\n\n### 17-3 方法的命名规则\n\n- 1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：**addPerson**。\n- 2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：**test<MethodUnderTest>_<state>**，例如 **testPop_emptyStack**。\n\n------\n\n### 17-4 方法的定义\n\n一般情况下，定义一个方法包含以下语法：\n\n```Java\n修饰符 返回值类型 方法名(参数类型 参数名){\n    ...\n    方法体\n    ...\n    return 返回值;\n}\n```\n\n方法包含一个方法头和一个方法体。下面是一个方法的所有部分：\n\n- **修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。\n- **返回值类型 ：**方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字**void**。\n- **方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。\n- **参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。\n- **方法体：**方法体包含具体的语句，定义该方法的功能。\n\n```Java\npublic static int age(int birthday){...}\n```\n\n参数可以有多个：\n\n```Java\nstatic float interest(float principal, int year){...}\n```\n\n**注意：** 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。\n\n下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。\n\n```Java\n/** 返回两个整型变量数据的较大值 */\npublic static int max(int num1, int num2) {\n   int result;\n   if (num1 > num2)\n      result = num1;\n   else\n      result = num2;\n \n   return result; \n}\n```\n\n### 17-5 方法调用\n\nJava 支持两种调用方法的方式，根据方法是否返回值来选择。\n\n当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。\n\n当方法返回一个值的时候，方法调用通常被当做一个值。例如：\n\n```Java\nint larger = max(30, 40);\n```\n\n如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：\n\n```Java\nSystem.out.println(\"欢迎访问菜鸟教程！\");\n```\n\n下面的例子演示了如何定义一个方法，以及如何调用它：\n\n```Java\n// TestMax.java 文件代码：\n\npublic class TestMax {\n   /** 主方法 */\n   public static void main(String[] args) {\n      int i = 5;\n      int j = 2;\n      int k = max(i, j);\n      System.out.println( i + \" 和 \" + j + \" 比较，最大值是：\" + k);\n   }\n \n   /** 返回两个整数变量较大的值 */\n   public static int max(int num1, int num2) {\n      int result;\n      if (num1 > num2)\n         result = num1;\n      else\n         result = num2;\n \n      return result; \n   }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n5 和 2 比较，最大值是：5\n```\n\n这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。\n\nmain 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。\n\n### 17-6 void 关键字\n\n本节说明如何声明和调用一个 void 方法。\n\n下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。\n\n```java\nTestVoidMethod.java 文件代码：\npublic class TestVoidMethod {\n  public static void main(String[] args) {\n    printGrade(78.5);\n  }\n \n  public static void printGrade(double score) {\n    if (score >= 90.0) {\n       System.out.println('A');\n    }\n    else if (score >= 80.0) {\n       System.out.println('B');\n    }\n    else if (score >= 70.0) {\n       System.out.println('C');\n    }\n    else if (score >= 60.0) {\n       System.out.println('D');\n    }\n    else {\n       System.out.println('F');\n    }\n  }\n}\n```\n\n\n\n以上实例编译运行结果如下：\n\n```\nC\n```\n\n这里printGrade方法是一个void类型方法，它不返回值。\n\n一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。\n\n------\n\n### 17-7 通过值传递参数\n\n调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。\n\n例如，下面的方法连续n次打印一个消息：\n\n```java\n// TestVoidMethod.java 文件代码：\npublic static void nPrintln(String message, int n) {\n  for (int i = 0; i < n; i++) {\n    System.out.println(message);\n  }\n}\n```\n\n**示例**\n\n下面的例子演示按值传递的效果。\n\n该程序创建一个方法，该方法用于交换两个变量。\n\n```java\n// TestPassByValue.java 文件代码：\npublic class TestPassByValue {\n  public static void main(String[] args) {\n    int num1 = 1;\n    int num2 = 2;\n \n    System.out.println(\"交换前 num1 的值为：\" +\n                        num1 + \" ，num2 的值为：\" + num2);\n \n    // 调用swap方法\n    swap(num1, num2);\n    System.out.println(\"交换后 num1 的值为：\" +\n                       num1 + \" ，num2 的值为：\" + num2);\n  }\n  /** 交换两个变量的方法 */\n  public static void swap(int n1, int n2) {\n    System.out.println(\"\\t进入 swap 方法\");\n    System.out.println(\"\\t\\t交换前 n1 的值为：\" + n1\n                         + \"，n2 的值：\" + n2);\n    // 交换 n1 与 n2的值\n    int temp = n1;\n    n1 = n2;\n    n2 = temp;\n \n    System.out.println(\"\\t\\t交换后 n1 的值为 \" + n1\n                         + \"，n2 的值：\" + n2);\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n交换前 num1 的值为：1 ，num2 的值为：2\n    进入 swap 方法\n        交换前 n1 的值为：1，n2 的值：2\n        交换后 n1 的值为 2，n2 的值：1\n交换后 num1 的值为：1 ，num2 的值为：2\n```\n\n传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。\n\n------\n\n### 17-8 方法的重载\n\n上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？\n\n解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：\n\n```java\npublic static double max(double num1, double num2) {\n  if (num1 > num2)\n    return num1;\n  else\n    return num2;\n}\n```\n\n如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；\n\n如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；\n\n就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。\n\nJava编译器根据方法签名判断哪个方法应该被调用。\n\n方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。\n\n重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。\n\n### 17-9 变量作用域\n\n- 变量的范围是程序中该变量可以被引用的部分。\n- 方法内定义的变量被称为局部变量。\n- 局部变量的作用范围从声明开始，直到包含它的块结束。\n- 局部变量必须声明才可以使用。\n- 方法的参数范围涵盖整个方法。参数实际上是一个局部变量。\n- for循环的初始化部分声明的变量，其作用范围在整个循环。\n- 但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：\n- 你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。\n\n### 17-10 命令行参数的使用\n\n有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。\n\n命令行参数是在执行程序时候紧跟在程序名字后面的信息。\n\n\n\n下面的程序打印所有的命令行参数：\n\n```java\nCommandLine.java 文件代码：\npublic class CommandLine {\n   public static void main(String args[]){ \n      for(int i=0; i<args.length; i++){\n         System.out.println(\"args[\" + i + \"]: \" + args[i]);\n      }\n   }\n}\n```\n\n如下所示，运行这个程序：\n\n```\n$ javac CommandLine.java \n$ java CommandLine this is a command line 200 -100\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n```\n\n------\n\n### 17-11 构造方法\n\n- 当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。\n- 通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。\n- 不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。\n- 一旦你定义了自己的构造方法，默认构造方法就会失效。\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass() {\n    x = 10;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n```\n\n大多时候需要一个有参数的构造方法。\n\n**实例**\n\n下面是一个使用构造方法的例子：\n\n```java\n// 一个简单的构造函数\nclass MyClass {\n  int x;\n \n  // 以下是构造函数\n  MyClass(int i ) {\n    x = i;\n  }\n}\n```\n\n你可以像下面这样调用构造方法来初始化一个对象：\n\n```java\n// ConsDemo.java 文件代码：\npublic class ConsDemo {\n  public static void main(String args[]) {\n    MyClass t1 = new MyClass( 10 );\n    MyClass t2 = new MyClass( 20 );\n    System.out.println(t1.x + \" \" + t2.x);\n  }\n}\n```\n\n运行结果如下：\n\n```\n10 20\n```\n\n### 17-12 可变参数\n\nJDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。\n\n方法的可变参数的声明如下所示：\n\n```\ntypeName... parameterName\n```\n\n在方法声明中，在指定参数类型后加一个省略号(...) 。\n\n一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。\n\n```java\npublic class VarargsDemo {\n    public static void main(String args[]) {\n        // 调用可变参数的方法\n        printMax(34, 3, 3, 2, 56.5);\n        printMax(new double[]{1, 2, 3});\n    }\n \n    public static void printMax( double... numbers) {\n        if (numbers.length == 0) {\n            System.out.println(\"No argument passed\");\n            return;\n        }\n \n        double result = numbers[0];\n \n        for (int i = 1; i <  numbers.length; i++){\n            if (numbers[i] >  result) {\n                result = numbers[i];\n            }\n        }\n        System.out.println(\"The max value is \" + result);\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nThe max value is 56.5\nThe max value is 3.0\n```\n\n### 17-13 finalize() 方法\n\nJava 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。\n\n例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。\n\n在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。\n\nfinalize() 一般格式是：\n\n```java\nprotected void finalize()\n{\n   // 在这里终结代码\n}\n```\n\n关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。\n\n当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。\n\n```java\n// FinalizationDemo.java 文件代码：\npublic class FinalizationDemo {  \n  public static void main(String[] args) {  \n    Cake c1 = new Cake(1);  \n    Cake c2 = new Cake(2);  \n    Cake c3 = new Cake(3);  \n      \n    c2 = c3 = null;  \n    System.gc(); //调用Java垃圾收集器\n  }  \n}  \n \nclass Cake extends Object {  \n  private int id;  \n  public Cake(int id) {  \n    this.id = id;  \n    System.out.println(\"Cake Object \" + id + \"is created\");  \n  }  \n    \n  protected void finalize() throws java.lang.Throwable {  \n    super.finalize();  \n    System.out.println(\"Cake Object \" + id + \"is disposed\");  \n  }  \n}\n```\n\n运行以上代码，输出结果如下：\n\n```\n$ javac FinalizationDemo.java \n$ java FinalizationDemo\nCake Object 1is created\nCake Object 2is created\nCake Object 3is created\nCake Object 3is disposed\nCake Object 2is disposed\n```\n\n## 18，Java 流(Stream)、文件(File)和IO\n\n- Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。\n- Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。\n- 一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。\n- Java 为 I/O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。\n- 但本节讲述最基本的和流与 I/O 相关的功能。我们将通过一个个例子来学习这些功能。\n\n### 18-1 读取控制台输入\n\nJava 的控制台输入由 System.in 完成。\n\n为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。\n\n下面是创建 BufferedReader 的基本语法：\n\n```Java\nBufferedReader br = new BufferedReader(new \n                      InputStreamReader(System.in));\n```\n\nBufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。\n\n### 18-2 从控制台读取多字符输入\n\n从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：\n\n```Java\nint read( ) throws IOException\n```\n\n每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。\n\n下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 \"q\"。\n\n```java\n// BRRead.java 文件代码：\n//使用 BufferedReader 在控制台读取字符\n \nimport java.io.*;\n \npublic class BRRead {\n    public static void main(String args[]) throws IOException {\n        char c;\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"输入字符, 按下 'q' 键退出。\");\n        // 读取字符\n        do {\n            c = (char) br.read();\n            System.out.println(c);\n        } while (c != 'q');\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\n输入字符, 按下 'q' 键退出。\nrunoob\nr\nu\nn\no\no\nb\n\n\nq\nq\n```\n\n### 18-3 从控制台读取字符串\n\n从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。\n\n它的一般格式是：\n\n```java\nString readLine( ) throws IOException\n```\n\n下面的程序读取和显示字符行直到你输入了单词\"end\"。\n\n```java\n//使用 BufferedReader 在控制台读取字符\nimport java.io.*;\n \npublic class BRReadLines {\n    public static void main(String args[]) throws IOException {\n        // 使用 System.in 创建 BufferedReader\n        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));\n        String str;\n        System.out.println(\"Enter lines of text.\");\n        System.out.println(\"Enter 'end' to quit.\");\n        do {\n            str = br.readLine();\n            System.out.println(str);\n        } while (!str.equals(\"end\"));\n    }\n}\n```\n\n以上实例编译运行结果如下:\n\n```\nEnter lines of text.\nEnter 'end' to quit.\nThis is line one\nThis is line one\nThis is line two\nThis is line two\nend\nend\n```\n\n> JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm('https://www.runoob.com//images/sqlite-c-cpp.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-c-cpp.html') 类来获取控制台的输入。\n\n### 18-4 控制台输出\n\n在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。\n\nPrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。\n\nPrintStream 定义 write() 的最简单格式如下所示：\n\n```java\nvoid write(int byteval)\n```\n\n该方法将 byteval 的低八位字节写到流中。\n\n下面的例子用 write() 把字符 \"A\" 和紧跟着的换行符输出到屏幕：\n\n```java\nWriteDemo.java 文件代码：\nimport java.io.*;\n \n//演示 System.out.write().\npublic class WriteDemo {\n    public static void main(String args[]) {\n        int b;\n        b = 'A';\n        System.out.write(b);\n        System.out.write('\\n');\n    }\n}\n```\n\n运行以上实例在输出窗口输出 \"A\" 字符\n\n```\nA\n```\n\n**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。\n\n### 18-5 读写文件\n\n如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。\n\n#### 18-5-1 FileInputStream\n\n- 该流用于从文件读取数据，它的对象可以用关键字 new 来创建。\n- 有多种构造方法可用来创建对象。\n- 可以使用字符串类型的文件名来创建一个输入流对象来读取文件：\n\n```java\nInputStream f = new FileInputStream(\"C://images/hello\");\n```\n\n- 也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); InputStream out = new FileInputStream(f);\n```\n\n- 创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。\n\n![image-20240228231544486](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231544486.png)\n\n除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：\n\n- [ByteArrayInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-php.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-php.html')\n- [DataInputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-perl.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-perl.html')\n\n------\n\n#### 18-5-2 FileOutputStream\n\n该类用来创建一个文件并向文件中写数据。\n\n如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。\n\n有两个构造方法可以用来创建 FileOutputStream 对象。\n\n使用字符串类型的文件名来创建一个输出流对象：\n\n```java\nOutputStream f = new FileOutputStream(\"C://images/hello\")\n```\n\n也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：\n\n```java\nFile f = new File(\"C://images/hello\"); \nOutputStream f = new FileOutputStream(f);\n```\n\n创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。\n\n![image-20240228231647489](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228231647489.png)\n\n除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：\n\n- [ByteArrayOutputStream](javascript:if(confirm('https://www.runoob.com//images/sqlite-python.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-python.html')\n- [DataOutputStream](javascript:if(confirm('https://www.runoob.com//images/execute_sql_online.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/execute_sql_online.php')\n\n下面是一个演示 InputStream 和 OutputStream 用法的例子\n\n```java\n// fileStreamTest.java 文件代码：\n\nimport java.io.*;\n \npublic class fileStreamTest {\n    public static void main(String args[]) {\n        try {\n            byte bWrite[] = { 11, 21, 3, 40, 5 };\n            OutputStream os = new FileOutputStream(\"test.txt\");\n            for (int x = 0; x < bWrite.length; x++) {\n                os.write(bWrite[x]); // writes the bytes\n            }\n            os.close();\n \n            InputStream is = new FileInputStream(\"test.txt\");\n            int size = is.available();\n \n            for (int i = 0; i < size; i++) {\n                System.out.print((char) is.read() + \"  \");\n            }\n            is.close();\n        } catch (IOException e) {\n            System.out.print(\"Exception\");\n        }\n    }\n}\n```\n\n上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。\n\n以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：\n\n```java\nfileStreamTest2.java 文件代码：\n//文件名 :fileStreamTest2.java\nimport java.io.*;\n \npublic class fileStreamTest2 {\n    public static void main(String[] args) throws IOException {\n \n        File f = new File(\"a.txt\");\n        FileOutputStream fop = new FileOutputStream(f);\n        // 构建FileOutputStream对象,文件不存在会自动新建\n \n        OutputStreamWriter writer = new OutputStreamWriter(fop, \"UTF-8\");\n        // 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk\n \n        writer.append(\"中文输入\");\n        // 写入到缓冲区\n \n        writer.append(\"\\r\\n\");\n        // 换行\n \n        writer.append(\"English\");\n        // 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入\n \n        writer.close();\n        // 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉\n \n        fop.close();\n        // 关闭输出流,释放系统资源\n \n        FileInputStream fip = new FileInputStream(f);\n        // 构建FileInputStream对象\n \n        InputStreamReader reader = new InputStreamReader(fip, \"UTF-8\");\n        // 构建InputStreamReader对象,编码与写入相同\n \n        StringBuffer sb = new StringBuffer();\n        while (reader.ready()) {\n            sb.append((char) reader.read());\n            // 转成char加到StringBuffer对象中\n        }\n        System.out.println(sb.toString());\n        reader.close();\n        // 关闭读取流\n \n        fip.close();\n        // 关闭输入流,释放系统资源\n \n    }\n}\n```\n\n### 18-6 文件和I/O\n\n还有一些关于文件和I/O的类，我们也需要知道：\n\n- [File Class(类)](javascript:if(confirm('https://www.runoob.com//images/book.sqlite3.php  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/book.sqlite3.php')\n- [FileReader Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite-jdbc  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite-jdbc')\n- [FileWriter Class(类)](javascript:if(confirm('https://www.runoob.com//images/sqlite3.html  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?'))window.location='https://www.runoob.com//images/sqlite3.html')\n\n------\n\n### 18-7 Java中的目录\n\n#### 18-7-1 创建目录：\n\nFile类中有两个方法可以用来创建文件夹：\n\n- **mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。\n- **mkdirs()**方法创建一个文件夹和它的所有父文件夹。\n\n下面的例子创建 \"/tmp/user//images/bin\"文件夹：\n\n```java\nCreateDir.java 文件代码：\nimport java.io.File;\n \npublic class CreateDir {\n    public static void main(String args[]) {\n        String dirname = \"/tmp/user//images/bin\";\n        File d = new File(dirname);\n        // 现在创建目录\n        d.mkdirs();\n    }\n}\n```\n\n编译并执行上面代码来创建目录 \"/tmp/user//images/bin\"。\n\n**注意：** Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (/) ，路径依然能够被正确解析。\n\n#### 18-7-2 读取目录\n\n一个目录其实就是一个 File 对象，它包含其他文件和文件夹。\n\n如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。\n\n可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。\n\n下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：\n\n```java\n// DirList.java 文件代码：\nimport java.io.File;\n \npublic class DirList {\n    public static void main(String args[]) {\n        String dirname = \"/tmp\";\n        File f1 = new File(dirname);\n        if (f1.isDirectory()) {\n            System.out.println(\"目录 \" + dirname);\n            String s[] = f1.list();\n            for (int i = 0; i < s.length; i++) {\n                File f = new File(dirname + \"/\" + s[i]);\n                if (f.isDirectory()) {\n                    System.out.println(s[i] + \" 是一个目录\");\n                } else {\n                    System.out.println(s[i] + \" 是一个文件\");\n                }\n            }\n        } else {\n            System.out.println(dirname + \" 不是一个目录\");\n        }\n    }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\n目录 /tmp\nbin 是一个目录\nlib 是一个目录\ndemo 是一个目录\ntest.txt 是一个文件\nREADME 是一个文件\nindex.html 是一个文件\ninclude 是一个目录\n```\n\n#### 18-7-3 删除目录或文件\n\n删除文件可以使用 **java.io.File.delete()** 方法。\n\n以下代码会删除目录 **/tmp//images/**，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。\n\n测试目录结构：\n\n```\n/tmp//images/\n|-- 1.log\n|-- test\n```\n\n```java\nimport java.io.File;\n \npublic class DeleteFileDemo {\n    public static void main(String args[]) {\n        // 这里修改为自己的测试目录\n        File folder = new File(\"/tmp//images/\");\n        deleteFolder(folder);\n    }\n \n    // 删除文件及目录\n    public static void deleteFolder(File folder) {\n        File[] files = folder.listFiles();\n        if (files != null) {\n            for (File f : files) {\n                if (f.isDirectory()) {\n                    deleteFolder(f);\n                } else {\n                    f.delete();\n                }\n            }\n        }\n        folder.delete();\n    }\n}\n```\n\n## 19，Java Scanner 类\n\njava.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。\n\n下面是创建 Scanner 对象的基本语法：\n\n```Java\nScanner s = new Scanner(System.in);\n```\n\n接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：\n\n### 19-1 使用 next 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner; \n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // next方式接收字符串\n        System.out.println(\"next方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNext()) {\n            String str1 = scan.next();\n            System.out.println(\"输入的数据为：\" + str1);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnext方式接收：\nrunoob com\n输入的数据为：runoob\n```\n\n可以看到 com 字符串并未输出，接下来我们看 nextLine。\n\n### 19-2 使用 nextLine 方法：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n \n        // nextLine方式接收字符串\n        System.out.println(\"nextLine方式接收：\");\n        // 判断是否还有输入\n        if (scan.hasNextLine()) {\n            String str2 = scan.nextLine();\n            System.out.println(\"输入的数据为：\" + str2);\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\nnextLine方式接收：\nrunoob com\n输入的数据为：runoob com\n```\n\n可以看到 com 字符串输出。\n\n### 19-3 next() 与 nextLine() 区别\n\nnext():\n\n- 1、一定要读取到有效字符后才可以结束输入。\n- 2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。\n- 3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。\n- next() 不能得到带有空格的字符串。\n\nnextLine()：\n\n- 1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。\n- 2、可以获得空白。\n\n如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：\n\n```java\n// ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \npublic class ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        // 从键盘接收数据\n        int i = 0;\n        float f = 0.0f;\n        System.out.print(\"输入整数：\");\n        if (scan.hasNextInt()) {\n            // 判断输入的是否是整数\n            i = scan.nextInt();\n            // 接收整数\n            System.out.println(\"整数数据：\" + i);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是整数！\");\n        }\n        System.out.print(\"输入小数：\");\n        if (scan.hasNextFloat()) {\n            // 判断输入的是否是小数\n            f = scan.nextFloat();\n            // 接收小数\n            System.out.println(\"小数数据：\" + f);\n        } else {\n            // 输入错误的信息\n            System.out.println(\"输入的不是小数！\");\n        }\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```\n$ javac ScannerDemo.java\n$ java ScannerDemo\n输入整数：12\n整数数据：12\n输入小数：1.2\n小数数据：1.2\n```\n\n以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：\n\n```java\n // ScannerDemo.java 文件代码：\nimport java.util.Scanner;\n \nclass ScannerDemo {\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n \n        double sum = 0;\n        int m = 0;\n \n        while (scan.hasNextDouble()) {\n            double x = scan.nextDouble();\n            m = m + 1;\n            sum = sum + x;\n        }\n \n        System.out.println(m + \"个数的和为\" + sum);\n        System.out.println(m + \"个数的平均值是\" + (sum / m));\n        scan.close();\n    }\n}\n```\n\n执行以上程序输出结果为：\n\n```java\n$ javac ScannerDemo.java\n$ java ScannerDemo\n12\n23\n15\n21.4\nend\n4个数的和为71.4\n4个数的平均值是17.85\n```\n\n## 20，Java异常处理\n\n异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。\n\n比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11/0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。\n\n异常发生的原因有很多，通常包含以下几大类：\n\n- 用户输入了非法数据。\n- 要打开的文件不存在。\n- 网络通信时连接中断，或者JVM内存溢出。\n\n这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-\n\n要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：\n\n- **检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。\n- **运行时异常：** 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。\n- **错误：** 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查\n\n### 20-1 异常方法\n\n![image-20240228232401552](2024-2-28%20Java%E5%88%9D%E5%AD%A6%E8%80%85%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20223036.assets/image-20240228232401552.png)\n\n### 20-2 捕获异常\n\n使用 try 和 catch 关键字可以捕获异常。try/catch 代码块放在异常可能发生的地方。\n\ntry/catch代码块中的代码称为保护代码，使用 try/catch 的语法如下：\n\n```Java\ntry\n{\n   // 程序代码\n}catch(ExceptionName e1)\n{\n   //Catch 块\n}\n```\n\nCatch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。\n\n如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。\n\n下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。\n\n```Java\n// ExcepTest.java 文件代码：\n// 文件名 : ExcepTest.java\nimport java.io.*;\npublic class ExcepTest{\n \n   public static void main(String args[]){\n      try{\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      }catch(ArrayIndexOutOfBoundsException e){\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n```\n\n以上代码编译运行输出结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n```\n\n### 20-3 多重捕获块\n\n一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。\n\n多重捕获块的语法如下所示：\n\n```java\ntry{\n   // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}\n```\n\n- 上面的代码段包含了 3 个 catch块。\n- 可以在 try 语句后面添加任意数量的 catch 块。\n- 如果保护代码中发生异常，异常被抛给第一个 catch 块。\n- 如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。\n- 如果不匹配，它会被传递给第二个 catch 块。\n- 如此，直到异常被捕获或者通过所有的 catch 块。\n\n\n\n该实例展示了怎么使用多重 try/catch。\n\n```java\ntry {\n    file = new FileInputStream(fileName);\n    x = (byte) file.read();\n} catch(FileNotFoundException f) { // Not valid!\n    f.printStackTrace();\n    return -1;\n} catch(IOException i) {\n    i.printStackTrace();\n    return -1;\n}\n```\n\n### 20-4 throws/throw 关键字：\n\n如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。\n\n也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。\n\n下面方法的声明抛出一个 RemoteException 异常：\n\n```java\nimport java.io.*;\npublic class className\n{\n  public void deposit(double amount) throws RemoteException\n  {\n    // Method implementation\n    throw new RemoteException();\n  }\n  //Remainder of class definition\n}\n```\n\n一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。\n\n例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：\n\n```java\nimport java.io.*;\npublic class className\n{\n   public void withdraw(double amount) throws RemoteException,\n                              InsufficientFundsException\n   {\n       // Method implementation\n   }\n   //Remainder of class definition\n}\n```\n\n### 20-5 finally关键字\n\n- finally 关键字用来创建在 try 代码块后面执行的代码块。\n- 无论是否发生异常，finally 代码块中的代码总会被执行。\n- 在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。\n- finally 代码块出现在 catch 代码块最后，语法如下：\n\n```java\ntry{\n  // 程序代码\n}catch(异常类型1 异常的变量名1){\n  // 程序代码\n}catch(异常类型2 异常的变量名2){\n  // 程序代码\n}finally{\n  // 程序代码\n}\n```\n\n\n\n```java\nExcepTest.java 文件代码：\npublic class ExcepTest{\n  public static void main(String args[]){\n    int a[] = new int[2];\n    try{\n       System.out.println(\"Access element three :\" + a[3]);\n    }catch(ArrayIndexOutOfBoundsException e){\n       System.out.println(\"Exception thrown  :\" + e);\n    }\n    finally{\n       a[0] = 6;\n       System.out.println(\"First element value: \" +a[0]);\n       System.out.println(\"The finally statement is executed\");\n    }\n  }\n}\n```\n\n以上实例编译运行结果如下：\n\n```\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n```\n\n注意下面事项：\n\n- catch 不能独立于 try 存在。\n- 在 try/catch 后面添加 finally 块并非强制性要求的。\n- try 代码后不能既没 catch 块也没 finally 块。\n- try, catch, finally 块之间不能添加任何代码。\n\n### 20-6 声明自定义异常\n\n在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。\n\n- 所有异常都必须是 Throwable 的子类。\n- 如果希望写一个检查性异常类，则需要继承 Exception 类。\n- 如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。\n\n可以像下面这样定义自己的异常类：\n\n```java\nclass MyException extends Exception{ }\n```\n\n- 只继承Exception 类来创建的异常类是检查性异常类。\n- 下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。\n- 一个异常类和其它任何类一样，包含有变量和方法。\n\n以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。\n\n```java\n// InsufficientFundsException.java 文件代码：\n// 文件名InsufficientFundsException.java\nimport java.io.*;\n \n//自定义异常类，继承Exception类\npublic class InsufficientFundsException extends Exception\n{\n  //此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱\n  private double amount;\n  public InsufficientFundsException(double amount)\n  {\n    this.amount = amount;\n  } \n  public double getAmount()\n  {\n    return amount;\n  }\n}\n```\n\n为了展示如何使用我们自定义的异常类，\n\n在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。\n\n```java\n// 文件名称 CheckingAccount.java\nimport java.io.*;\n \n//此类模拟银行账户\npublic class CheckingAccount\n{\n  //balance为余额，number为卡号\n   private double balance;\n   private int number;\n   public CheckingAccount(int number)\n   {\n      this.number = number;\n   }\n  //方法：存钱\n   public void deposit(double amount)\n   {\n      balance += amount;\n   }\n  //方法：取钱\n   public void withdraw(double amount) throws\n                              InsufficientFundsException\n   {\n      if(amount <= balance)\n      {\n         balance -= amount;\n      }\n      else\n      {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n  //方法：返回余额\n   public double getBalance()\n   {\n      return balance;\n   }\n  //方法：返回卡号\n   public int getNumber()\n   {\n      return number;\n   }\n}\n```\n\n下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。\n\n```java\n//文件名称 BankDemo.java\npublic class BankDemo\n{\n   public static void main(String [] args)\n   {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      try\n      {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      }catch(InsufficientFundsException e)\n      {\n         System.out.println(\"Sorry, but you are short $\"\n                                  + e.getAmount());\n         e.printStackTrace();\n      }\n    }\n}\n```\n\n编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：\n\n```\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n        at CheckingAccount.withdraw(CheckingAccount.java:25)\n        at BankDemo.main(BankDemo.java:13)\n```\n\n### 20-7 通用异常\n\n在Java中定义了两种类型的异常和错误。\n\n- **JVM(Java****虚拟机****)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。\n- **程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。\n","slug":"java1","published":1,"date":"2025-04-04T14:16:27.239Z","updated":"2025-04-04T14:16:27.251Z","comments":1,"layout":"post","photos":[],"_id":"cm92vmg190002k7q1hptf0v1y","content":"<h2 id=\"1，Java基础语法\"><a href=\"#1，Java基础语法\" class=\"headerlink\" title=\"1，Java基础语法\"></a>1，Java基础语法</h2><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>\n</ul>\n<h3 id=\"1-1-第一个Java程序\"><a href=\"#1-1-第一个Java程序\" class=\"headerlink\" title=\"1-1 第一个Java程序\"></a>1-1 第一个Java程序</h3><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">     * 它将打印字符串 Hello World</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); <span class=\"comment\">// 打印 Hello World</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面将逐步介绍如何保存、编译以及运行这个程序：</p>\n<ul>\n<li>打开代码编辑器，把上面的代码添加进去；</li>\n<li>把文件名保存为：HelloWorld.java；</li>\n<li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li>\n<li>在命令行窗口输入 <strong>javac HelloWorld.java</strong> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li>\n<li>再键输入 <strong>java HelloWorld</strong> 按下回车键就可以运行程序了</li>\n</ul>\n<p>你将会在窗口看到 Hello World</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C : &gt; javac HelloWorld.java</span><br><span class=\"line\">C : &gt; java HelloWorld </span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<p>Gif 图演示：</p>\n<p><img src=\"/images/images/java-HelloWorld.gif\" alt=\"img\"></p>\n<h3 id=\"1-2-基本语法\"><a href=\"#1-2-基本语法\" class=\"headerlink\" title=\"1-2 基本语法\"></a>1-2 基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>\n<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>\n<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String []args)</strong> 方法开始执行。</li>\n</ul>\n<h3 id=\"1-3-Java-标识符\"><a href=\"#1-3-Java-标识符\" class=\"headerlink\" title=\"1-3 Java 标识符\"></a>1-3 Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"1-4-Java修饰符\"><a href=\"#1-4-Java修饰符\" class=\"headerlink\" title=\"1-4 Java修饰符\"></a>1-4 Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>\n<h3 id=\"1-5-Java-变量\"><a href=\"#1-5-Java-变量\" class=\"headerlink\" title=\"1-5 Java 变量\"></a>1-5 Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"1-6-Java-数组\"><a href=\"#1-6-Java-数组\" class=\"headerlink\" title=\"1-6 Java 数组\"></a>1-6 Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"1-7-Java-枚举\"><a href=\"#1-7-Java-枚举\" class=\"headerlink\" title=\"1-7 Java 枚举\"></a>1-7 Java 枚举</h3><p>ava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuice</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">FreshJuiceSize</span>&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class=\"line\">   FreshJuiceSize size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuiceTest</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">FreshJuice</span> <span class=\"variable\">juice</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FreshJuice</span>();</span><br><span class=\"line\">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-8-Java-关键字\"><a href=\"#1-8-Java-关键字\" class=\"headerlink\" title=\"1-8 Java 关键字\"></a>1-8 Java 关键字</h3><p><img src=\"/images/image-20240228195010033.png\" alt=\"image-20240228195010033\"></p>\n<h3 id=\"1-9-Java注释\"><a href=\"#1-9-Java注释\" class=\"headerlink\" title=\"1-9 Java注释\"></a>1-9 Java注释</h3><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 这是第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">    *它将打印Hello World</span></span><br><span class=\"line\"><span class=\"comment\">    * 这是一个多行注释的示例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 这是单行注释的示例</span></span><br><span class=\"line\">       <span class=\"comment\">/* 这个也是单行注释的示例 */</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-10-Java-空行\"><a href=\"#1-10-Java-空行\" class=\"headerlink\" title=\"1-10 Java 空行\"></a>1-10 Java 空行</h3><p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"1-11-继承\"><a href=\"#1-11-继承\" class=\"headerlink\" title=\"1-11 继承\"></a>1-11 继承</h3><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<hr>\n<h3 id=\"1-12-接口\"><a href=\"#1-12-接口\" class=\"headerlink\" title=\"1-12 接口\"></a>1-12 接口</h3><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h2 id=\"2，Java对象和类\"><a href=\"#2，Java对象和类\" class=\"headerlink\" title=\"2，Java对象和类\"></a>2，Java对象和类</h2><h3 id=\"2-1-Java中的对象\"><a href=\"#2-1-Java中的对象\" class=\"headerlink\" title=\"2-1 Java中的对象\"></a>2-1 Java中的对象</h3><p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p>\n<p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p>\n<p>对比现实对象和软件对象，它们之间十分相似。</p>\n<p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p>\n<p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p>\n<h3 id=\"2-2-Java中的类\"><a href=\"#2-2-Java中的类\" class=\"headerlink\" title=\"2-2 Java中的类\"></a>2-2 Java中的类</h3><p>类可以看成是创建Java对象的模板。</p>\n<p>通过下面一个简单的类来理解下Java中类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\">  String breed;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">barking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">sleeping</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个类可以包含以下类型变量：</p>\n<ul>\n<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>\n<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>\n<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li>\n</ul>\n<p>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</p>\n<hr>\n<h3 id=\"2-3-构造方法\"><a href=\"#2-3-构造方法\" class=\"headerlink\" title=\"2-3 构造方法\"></a>2-3 构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p>\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n<p>下面是一个构造方法示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-创建对象\"><a href=\"#2-4-创建对象\" class=\"headerlink\" title=\"2-4 创建对象\"></a>2-4 创建对象</h3><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：</p>\n<ul>\n<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>\n<li><strong>实例化</strong>：使用关键字new来创建一个对象。</li>\n<li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li>\n</ul>\n<p>下面是一个创建对象的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 下面的语句将创建一个Puppy对象</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，会打印出下面的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-访问实例变量和方法\"><a href=\"#2-5-访问实例变量和方法\" class=\"headerlink\" title=\"2-5 访问实例变量和方法\"></a>2-5 访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">referenceVariable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Constructor</span>();</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的变量 */</span></span><br><span class=\"line\">referenceVariable.variableName;</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的方法 */</span></span><br><span class=\"line\">referenceVariable.methodName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-实例\"><a href=\"#2-6-实例\" class=\"headerlink\" title=\"2-6 实例\"></a>2-6 实例</h3><p>下面的例子展示如何访问实例变量和调用成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> puppyAge;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">( <span class=\"type\">int</span> age )</span>&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">( )</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;小狗的年龄为 : &quot;</span> + puppyAge ); </span><br><span class=\"line\">       <span class=\"keyword\">return</span> puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 创建对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 通过方法来设定age */</span></span><br><span class=\"line\">      myPuppy.setAge( <span class=\"number\">2</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 调用另一个方法获取age */</span></span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      <span class=\"comment\">/*你也可以像下面这样访问成员变量 */</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;变量值 : &quot;</span> + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br><span class=\"line\">小狗的年龄为 : 2</span><br><span class=\"line\">变量值 : 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-源文件声明规则\"><a href=\"#2-7-源文件声明规则\" class=\"headerlink\" title=\"2-7 源文件声明规则\"></a>2-7 源文件声明规则</h3><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>\n<ul>\n<li>一个源文件中只能有一个public类</li>\n<li>一个源文件可以有多个非public类</li>\n<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>\n<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>\n<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>\n<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>\n</ul>\n<p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。</p>\n<p>除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p>\n<h3 id=\"2-8-Java包\"><a href=\"#2-8-Java包\" class=\"headerlink\" title=\"2-8 Java包\"></a>2-8 Java包</h3><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>\n<h3 id=\"2-9-Import语句\"><a href=\"#2-9-Import语句\" class=\"headerlink\" title=\"2-9 Import语句\"></a>2-9 Import语句</h3><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>\n<p>例如，下面的命令行将会命令编译器载入java_installation&#x2F;&#x2F;images&#x2F;io路径下的所有类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-一个简单的例子\"><a href=\"#2-10-一个简单的例子\" class=\"headerlink\" title=\"2-10 一个简单的例子\"></a>2-10 一个简单的例子</h3><p>在该例子中，我们创建两个类：<strong>Employee</strong> 和 <strong>EmployeeTest</strong>。</p>\n<p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p>\n<p>Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   String name;</span><br><span class=\"line\">   <span class=\"type\">int</span> age;</span><br><span class=\"line\">   String designation;</span><br><span class=\"line\">   <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">// Employee 类的构造器</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 设置age的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empAge</span><span class=\"params\">(<span class=\"type\">int</span> empAge)</span>&#123;</span><br><span class=\"line\">      age =  empAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置designation的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empDesignation</span><span class=\"params\">(String empDesig)</span>&#123;</span><br><span class=\"line\">      designation = empDesig;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置salary的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSalary)</span>&#123;</span><br><span class=\"line\">      salary = empSalary;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 打印信息 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字:&quot;</span>+ name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;年龄:&quot;</span> + age );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;职位:&quot;</span> + designation );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水:&quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p>\n<p>下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p>\n<p>将下面的代码保存在 EmployeeTest.java文件中。</p>\n<p><strong>EmployeeTest.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用构造器创建两个对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB1&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB2&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 调用这两个对象的成员方法</span></span><br><span class=\"line\">      empOne.empAge(<span class=\"number\">26</span>);</span><br><span class=\"line\">      empOne.empDesignation(<span class=\"string\">&quot;高级程序员&quot;</span>);</span><br><span class=\"line\">      empOne.empSalary(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"> </span><br><span class=\"line\">      empTwo.empAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">      empTwo.empDesignation(<span class=\"string\">&quot;菜鸟程序员&quot;</span>);</span><br><span class=\"line\">      empTwo.empSalary(<span class=\"number\">500</span>);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac EmployeeTest.java</span><br><span class=\"line\">$ java EmployeeTest </span><br><span class=\"line\">名字:RUNOOB1</span><br><span class=\"line\">年龄:<span class=\"number\">26</span></span><br><span class=\"line\">职位:高级程序员</span><br><span class=\"line\">薪水:<span class=\"number\">1000.0</span></span><br><span class=\"line\">名字:RUNOOB2</span><br><span class=\"line\">年龄:<span class=\"number\">21</span></span><br><span class=\"line\">职位:菜鸟程序员</span><br><span class=\"line\">薪水:<span class=\"number\">500.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，Java基本数据类型\"><a href=\"#3，Java基本数据类型\" class=\"headerlink\" title=\"3，Java基本数据类型\"></a>3，Java基本数据类型</h2><h3 id=\"3-1-内置数据类型\"><a href=\"#3-1-内置数据类型\" class=\"headerlink\" title=\"3-1 内置数据类型\"></a>3-1 内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\n<h4 id=\"3-1-1-byte：\"><a href=\"#3-1-1-byte：\" class=\"headerlink\" title=\"3-1-1 byte：\"></a>3-1-1 <strong>byte：</strong></h4><ul>\n<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-128（-2^7）</strong>；</li>\n<li>最大值是 <strong>127（2^7-1）</strong>；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\n<li>例子：byte a &#x3D; 100，byte b &#x3D; -50。</li>\n</ul>\n<h4 id=\"3-1-2-short：\"><a href=\"#3-1-2-short：\" class=\"headerlink\" title=\"3-1-2 short：\"></a>3-1-2 <strong>short：</strong></h4><ul>\n<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\n<li>最小值是 <strong>-32768（-2^15）</strong>；</li>\n<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>\n<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>例子：short s &#x3D; 1000，short r &#x3D; -20000。</li>\n</ul>\n<h4 id=\"3-1-3-int：\"><a href=\"#3-1-3-int：\" class=\"headerlink\" title=\"3-1-3 int：\"></a>3-1-3 <strong>int：</strong></h4><ul>\n<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>\n<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>\n<li>一般地整型变量默认为 int 类型；</li>\n<li>默认值是 <strong>0</strong> ；</li>\n<li>例子：int a &#x3D; 100000, int b &#x3D; -200000。</li>\n</ul>\n<h4 id=\"3-1-4-long：\"><a href=\"#3-1-4-long：\" class=\"headerlink\" title=\"3-1-4 long：\"></a>3-1-4 <strong>long：</strong></h4><ul>\n<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>\n<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>\n<li>这种类型主要使用在需要比较大整数的系统上；</li>\n<li>默认值是 <strong>0L</strong>；</li>\n<li>例子： long a &#x3D; 100000L，Long b &#x3D; -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>\n</ul>\n<h4 id=\"3-1-5-float：\"><a href=\"#3-1-5-float：\" class=\"headerlink\" title=\"3-1-5 float：\"></a>3-1-5 <strong>float：</strong></h4><ul>\n<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\n<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\n<li>默认值是 <strong>0.0f</strong>；</li>\n<li>浮点数不能用来表示精确的值，如货币；</li>\n<li>例子：float f1 &#x3D; 234.5f。</li>\n</ul>\n<h4 id=\"3-1-6-double：\"><a href=\"#3-1-6-double：\" class=\"headerlink\" title=\"3-1-6 double：\"></a>3-1-6 <strong>double：</strong></h4><ul>\n<li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li>\n<li>浮点数的默认类型为double类型；</li>\n<li>double类型同样不能表示精确的值，如货币；</li>\n<li>默认值是 <strong>0.0d</strong>；</li>\n<li>例子：double d1 &#x3D; 123.4。</li>\n</ul>\n<h4 id=\"3-1-7-boolean：\"><a href=\"#3-1-7-boolean：\" class=\"headerlink\" title=\"3-1-7 boolean：\"></a>3-1-7 <strong>boolean：</strong></h4><ul>\n<li>boolean数据类型表示一位的信息；</li>\n<li>只有两个取值：true 和 false；</li>\n<li>这种类型只作为一种标志来记录 true&#x2F;false 情况；</li>\n<li>默认值是 <strong>false</strong>；</li>\n<li>例子：boolean one &#x3D; true。</li>\n</ul>\n<h4 id=\"3-1-8-char：\"><a href=\"#3-1-8-char：\" class=\"headerlink\" title=\"3-1-8 char：\"></a>3-1-8 <strong>char：</strong></h4><ul>\n<li>char类型是一个单一的 16 位 Unicode 字符；</li>\n<li>最小值是 <strong>\\u0000</strong>（即为0）；</li>\n<li>最大值是 <strong>\\uffff</strong>（即为65,535）；</li>\n<li>char 数据类型可以储存任何字符；</li>\n<li>例子：char letter &#x3D; ‘A’;。</li>\n</ul>\n<h3 id=\"3-2-实例\"><a href=\"#3-2-实例\" class=\"headerlink\" title=\"3-2 实例\"></a>3-2 实例</h3><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveTypeTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译以上代码输出结果如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"type\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n\n<p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 &#x3D;3140，3.14E-3 就是 3.14 x 10-3 &#x3D;0.00314。</p>\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\n<h3 id=\"3-3-类型默认值\"><a href=\"#3-3-类型默认值\" class=\"headerlink\" title=\"3-3 类型默认值\"></a>3-3 类型默认值</h3><p>下表列出了 Java 各个类型的默认值：</p>\n<p><img src=\"/images/image-20240228200611781.png\" alt=\"image-20240228200611781\"></p>\n<h3 id=\"3-4-实例\"><a href=\"#3-4-实例\" class=\"headerlink\" title=\"3-4 实例\"></a>3-4 实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> bool;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">byte</span> by;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">short</span> sh;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String str;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bool :&quot;</span> + bool);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Byte :&quot;</span> + by);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Character:&quot;</span> + ch);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Double :&quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Float :&quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Integer :&quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Long :&quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Short :&quot;</span> + sh);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String :&quot;</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool     :<span class=\"literal\">false</span></span><br><span class=\"line\">Byte     :<span class=\"number\">0</span></span><br><span class=\"line\">Character:</span><br><span class=\"line\">Double   :<span class=\"number\">0.0</span></span><br><span class=\"line\">Float    :<span class=\"number\">0.0</span></span><br><span class=\"line\">Integer  :<span class=\"number\">0</span></span><br><span class=\"line\">Long     :<span class=\"number\">0</span></span><br><span class=\"line\">Short    :<span class=\"number\">0</span></span><br><span class=\"line\">String   :<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-引用类型\"><a href=\"#3-5-引用类型\" class=\"headerlink\" title=\"3-5 引用类型\"></a>3-5 引用类型</h3><ul>\n<li>在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用任何与之兼容的类型。</li>\n<li>例子：Site site &#x3D; new Site(“Runoob”)。</li>\n</ul>\n<h3 id=\"3-6-Java-常量\"><a href=\"#3-6-Java-常量\" class=\"headerlink\" title=\"3-6 Java 常量\"></a>3-6 Java 常量</h3><p>常量在程序运行时是不能被修改的。</p>\n<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.1415927</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p>\n<p>字面量可以赋给任何内置类型的变量。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">68</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p>\n<p>当使用常量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">decimal</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">octal</span> <span class=\"operator\">=</span> <span class=\"number\">0144</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hexa</span> <span class=\"operator\">=</span>  <span class=\"number\">0x64</span>;</span><br></pre></td></tr></table></figure>\n\n<p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;two\\nlines&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0001&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\u0001&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持一些特殊的转义字符序列。</p>\n<p><img src=\"/images/image-20240228200803273.png\" alt=\"image-20240228200803273\"></p>\n<h3 id=\"3-7-自动类型转换\"><a href=\"#3-7-自动类型转换\" class=\"headerlink\" title=\"3-7 自动类型转换\"></a>3-7 自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p>\n<p>转换从低级到高级。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">低  ------------------------------------&gt;  高</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span>—&gt; <span class=\"type\">int</span> —&gt; <span class=\"type\">long</span>—&gt; <span class=\"type\">float</span> —&gt; <span class=\"type\">double</span> </span><br></pre></td></tr></table></figure>\n\n<p>数据类型转换必须满足如下规则：</p>\n<ul>\n<li><p>\\1. 不能对boolean类型进行类型转换。</p>\n</li>\n<li><p>\\2. 不能把对象类型转换成不相关类的对象。</p>\n</li>\n<li><p>\\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\n</li>\n<li><p>\\4. 转换过程中可能导致溢出或损失精度，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">128</span>;   </span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i;</span><br></pre></td></tr></table></figure>\n\n<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>\n</li>\n<li><p>\\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"type\">int</span>)<span class=\"number\">23.7</span> == <span class=\"number\">23</span>;        </span><br><span class=\"line\">(<span class=\"type\">int</span>)-<span class=\"number\">45.89f</span> == -<span class=\"number\">45</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>自动类型转换</strong></p>\n<p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZiDongLeiZhuan</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=<span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> c1;<span class=\"comment\">//char自动类型转换为int</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> c2+<span class=\"number\">1</span>;<span class=\"comment\">//char 类型和 int 类型计算</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char自动类型转换为int后的值等于97</span><br><span class=\"line\">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure>\n\n<p>**解析：**c1 的值为字符 <strong>a</strong> ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 <strong>i2&#x3D;65+1&#x3D;66</strong>。</p>\n<h3 id=\"3-8-强制类型转换\"><a href=\"#3-8-强制类型转换\" class=\"headerlink\" title=\"3-8 强制类型转换\"></a>3-8 强制类型转换</h3><ul>\n<li>\\1. 条件是转换的数据类型必须是兼容的。</li>\n<li>\\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QiangZhiZhuanHuan</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i1;<span class=\"comment\">//强制类型转换为byte</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-9-隐含强制类型转换\"><a href=\"#3-9-隐含强制类型转换\" class=\"headerlink\" title=\"3-9  隐含强制类型转换\"></a>3-9  隐含强制类型转换</h3><ul>\n<li>\\1. 整数的默认类型是 int。</li>\n<li>\\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li>\n</ul>\n<p>这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。</p>\n<h2 id=\"4，Java变量类型\"><a href=\"#4，Java变量类型\" class=\"headerlink\" title=\"4，Java变量类型\"></a>4，Java变量类型</h2><ul>\n<li><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n</li>\n<li><p>type identifier [ &#x3D; value][, identifier [&#x3D; value] …] ;</p>\n</li>\n<li><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>\n</li>\n</ul>\n<p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, b, c;         <span class=\"comment\">// 声明三个int型整数：a、 b、c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>, e = <span class=\"number\">4</span>, f = <span class=\"number\">5</span>; <span class=\"comment\">// 声明三个整数并赋予初值</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"number\">22</span>;         <span class=\"comment\">// 声明并初始化 z</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;runoob&quot;</span>;  <span class=\"comment\">// 声明并初始化字符串 s</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>; <span class=\"comment\">// 声明了双精度浮点型变量 pi</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;        <span class=\"comment\">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Variable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Java局部变量\"><a href=\"#4-1-Java局部变量\" class=\"headerlink\" title=\"4-1 Java局部变量\"></a>4-1 Java局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<h4 id=\"4-1-1-实例-1\"><a href=\"#4-1-1-实例-1\" class=\"headerlink\" title=\"4-1-1 实例 1\"></a>4-1-1 <strong>实例 1</strong></h4><p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的年龄是: 7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-实例-2\"><a href=\"#4-1-2-实例-2\" class=\"headerlink\" title=\"4-1-2 实例 2\"></a>4-1-2 实例 2</h4><p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> age;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是 : &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java:<span class=\"number\">4</span>:variable number might not have been <span class=\"type\">initialized</span></span><br><span class=\"line\"><span class=\"variable\">age</span> <span class=\"operator\">=</span> age + <span class=\"number\">7</span>;</span><br><span class=\"line\">         ^</span><br><span class=\"line\"><span class=\"number\">1</span> error</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-实例变量\"><a href=\"#4-2-实例变量\" class=\"headerlink\" title=\"4-2 实例变量\"></a>4-2 实例变量</h3><ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个实例变量对子类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 私有变量，仅在该类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">//在构造器中对name赋值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span> <span class=\"params\">(String empName)</span>&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设定salary的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSal)</span>&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"comment\">// 打印信息</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmp</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字 : &quot;</span> + name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水 : &quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB&quot;</span>);</span><br><span class=\"line\">      empOne.setSalary(<span class=\"number\">1000.0</span>);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Employee.java </span><br><span class=\"line\">$ java Employee</span><br><span class=\"line\">名字 : RUNOOB</span><br><span class=\"line\">薪水 : 1000.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-类变量（静态变量）\"><a href=\"#4-3-类变量（静态变量）\" class=\"headerlink\" title=\"4-3 类变量（静态变量）\"></a>4-3 类变量（静态变量）</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用。常量是指声明为public&#x2F;private，final和static类型的变量。常量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>\n<li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>实例：</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//salary是静态的私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">// DEPARTMENT是一个常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEPARTMENT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;开发人员&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    salary = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        System.out.println(DEPARTMENT+<span class=\"string\">&quot;平均工资:&quot;</span>+salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>\n<p>本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。</p>\n<h2 id=\"5，Java修饰符\"><a href=\"#5，Java修饰符\" class=\"headerlink\" title=\"5，Java修饰符\"></a>5，Java修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p>\n<ul>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ul>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> myFlag;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">weeks</span> <span class=\"operator\">=</span> <span class=\"number\">9.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-访问控制修饰符\"><a href=\"#5-1-访问控制修饰符\" class=\"headerlink\" title=\"5-1 访问控制修饰符\"></a>5-1 访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p>我们可以通过以下表来说明访问权限：</p>\n<p><img src=\"/images/image-20240228202210130.png\" alt=\"image-20240228202210130\"></p>\n<p><strong>默认访问修饰符-不使用任何关键字</strong></p>\n<p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p>\n<p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">version</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1.5.1&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">processOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-私有访问修饰符-private\"><a href=\"#5-2-私有访问修饰符-private\" class=\"headerlink\" title=\"5-2 私有访问修饰符-private\"></a>5-2 私有访问修饰符-private</h3><p>私有访问修饰符是最严格的访问级别，所以被声明为 <strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 <strong>private</strong>。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>\n<p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p>\n<p>下面的类使用了私有访问修饰符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String format;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFormat</span><span class=\"params\">(String format)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p>\n<h3 id=\"5-3-公有访问修饰符-public\"><a href=\"#5-3-公有访问修饰符-public\" class=\"headerlink\" title=\"5-3 公有访问修饰符-public\"></a>5-3 公有访问修饰符-public</h3><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p>\n<p>以下函数使用了公有访问控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>\n<h3 id=\"5-4-受保护的访问修饰符-protected\"><a href=\"#5-4-受保护的访问修饰符-protected\" class=\"headerlink\" title=\"5-4 受保护的访问修饰符-protected\"></a>5-4 受保护的访问修饰符-protected</h3><p>protected 需要从以下两个点来分析说明：</p>\n<ul>\n<li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li>\n<li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li>\n</ul>\n<p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p>\n<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StreamingAudioPlayer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。</p>\n<p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p>\n<p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p>\n<h3 id=\"5-5-访问控制和继承\"><a href=\"#5-5-访问控制和继承\" class=\"headerlink\" title=\"5-5 访问控制和继承\"></a>5-5 访问控制和继承</h3><p>请注意以下方法继承的规则：</p>\n<ul>\n<li>父类中声明为 public 的方法在子类中也必须为 public。</li>\n<li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li>\n<li>父类中声明为 private 的方法，不能够被继承。</li>\n</ul>\n<h3 id=\"5-6-非访问修饰符\"><a href=\"#5-6-非访问修饰符\" class=\"headerlink\" title=\"5-6 非访问修饰符\"></a>5-6 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p>\n<p>static 修饰符，用来修饰类方法和类变量。</p>\n<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\n<h4 id=\"5-6-1-static-修饰符\"><a href=\"#5-6-1-static-修饰符\" class=\"headerlink\" title=\"5-6-1 static 修饰符\"></a>5-6-1 static 修饰符</h4><ul>\n<li><p><strong>静态变量：</strong></p>\n<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n</li>\n<li><p><strong>静态方法：</strong></p>\n<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n</li>\n</ul>\n<p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p>\n<p>如下例所示，static修饰符用来创建类方法和类变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstanceCounter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">numInstances</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Starting with &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; ++i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceCounter</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Created &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例运行编辑结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting with <span class=\"number\">0</span> instances</span><br><span class=\"line\">Created <span class=\"number\">500</span> instances</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-final-修饰符\"><a href=\"#5-6-2-final-修饰符\" class=\"headerlink\" title=\"5-6-2 final 修饰符\"></a>5-6-2 final 修饰符</h4><p><strong>final 变量：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下面是声明常量的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TITLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Manager&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     value = <span class=\"number\">12</span>; <span class=\"comment\">//将输出一个错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>inal 方法</strong></p>\n<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>\n<p>如下所示，使用 final 修饰符声明方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>final 类</strong></p>\n<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 类体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-abstract-修饰符\"><a href=\"#5-7-abstract-修饰符\" class=\"headerlink\" title=\"5-7 abstract 修饰符\"></a>5-7 abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Caravan</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> price;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String model;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String year;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">goFast</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeColor</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>抽象方法</strong></p>\n<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>\n<p>抽象方法不能被声明成 final 和 static。</p>\n<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>\n<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>\n<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//实现抽象方法</span></span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          .........</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"synchronized-修饰符\"><a href=\"#synchronized-修饰符\" class=\"headerlink\" title=\"synchronized 修饰符\"></a>synchronized 修饰符</h3><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDetails</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"transient-修饰符\"><a href=\"#transient-修饰符\" class=\"headerlink\" title=\"transient 修饰符\"></a>transient 修饰符</h3><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>\n<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">limit</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;   <span class=\"comment\">// 不会持久化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> b; <span class=\"comment\">// 持久化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"volatile-修饰符\"><a href=\"#volatile-修饰符\" class=\"headerlink\" title=\"volatile 修饰符\"></a>volatile 修饰符</h3><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> implements <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private volatile boolean active;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (active) <span class=\"comment\">// 第一行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">false</span>; <span class=\"comment\">// 第二行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 *<strong>第一行*</strong> 中缓冲区的 active 值被使用，那么在 *<strong>第二行*</strong> 的 active 值为 false 时循环不会停止。</p>\n<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>\n<h2 id=\"6，Java运算符\"><a href=\"#6，Java运算符\" class=\"headerlink\" title=\"6，Java运算符\"></a>6，Java运算符</h2><h3 id=\"6-1-算术运算符\"><a href=\"#6-1-算术运算符\" class=\"headerlink\" title=\"6-1 算术运算符\"></a>6-1 算术运算符</h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p>\n<p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228212912288.png\" alt=\"image-20240228212912288\"></p>\n<p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class=\"line\">     <span class=\"comment\">// 查看  d++ 与 ++d 的不同</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a + b = <span class=\"number\">30</span></span><br><span class=\"line\">a - b = -<span class=\"number\">10</span></span><br><span class=\"line\">a * b = <span class=\"number\">200</span></span><br><span class=\"line\">b / a = <span class=\"number\">2</span></span><br><span class=\"line\">b % a = <span class=\"number\">0</span></span><br><span class=\"line\">c % a = <span class=\"number\">5</span></span><br><span class=\"line\">a++   = <span class=\"number\">10</span></span><br><span class=\"line\">a--   = <span class=\"number\">11</span></span><br><span class=\"line\">d++   = <span class=\"number\">25</span></span><br><span class=\"line\">++d   = <span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-自增自减运算符\"><a href=\"#6-2-自增自减运算符\" class=\"headerlink\" title=\"6-2 自增自减运算符\"></a>6-2 自增自减运算符</h3><p><strong>1、自增（++）自减（–）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> ++a;<span class=\"comment\">//自增运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> --c;<span class=\"comment\">//自减运算</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进行自增运算后的值等于4</span><br><span class=\"line\">进行自减运算后的值等于2</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<ul>\n<li>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</li>\n<li>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</li>\n</ul>\n<p><strong>2、前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p>\n<p><strong>3、后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*++a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*b++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class=\"string\">&quot;,x=&quot;</span>+x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class=\"string\">&quot;,y=&quot;</span>+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自增运算符前缀运算后a=6，x=12</span><br><span class=\"line\">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-关系运算符\"><a href=\"#6-3-关系运算符\" class=\"headerlink\" title=\"6-3 关系运算符\"></a>6-3 关系运算符</h3><p>下表为Java支持的关系运算符</p>\n<p>表格中的实例整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228213115946.png\" alt=\"image-20240228213115946\"></p>\n<p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a == b = <span class=\"literal\">false</span></span><br><span class=\"line\">a != b = <span class=\"literal\">true</span></span><br><span class=\"line\">a &gt; b = <span class=\"literal\">false</span></span><br><span class=\"line\">a &lt; b = <span class=\"literal\">true</span></span><br><span class=\"line\">b &gt;= a = <span class=\"literal\">true</span></span><br><span class=\"line\">b &lt;= a = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-位运算符\"><a href=\"#6-4-位运算符\" class=\"headerlink\" title=\"6-4 位运算符\"></a>6-4 位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>\n<p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0011</span> <span class=\"number\">1100</span></span><br><span class=\"line\">B = <span class=\"number\">0000</span> <span class=\"number\">1101</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\">A&amp;B = <span class=\"number\">0000</span> <span class=\"number\">1100</span></span><br><span class=\"line\">A | B = <span class=\"number\">0011</span> <span class=\"number\">1101</span></span><br><span class=\"line\">A ^ B = <span class=\"number\">0011</span> <span class=\"number\">0001</span></span><br><span class=\"line\">~A= <span class=\"number\">1100</span> <span class=\"number\">0011</span></span><br></pre></td></tr></table></figure>\n\n<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>\n<p><img src=\"/images/image-20240228213253912.png\" alt=\"image-20240228213253912\"></p>\n<p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">60</span>; <span class=\"comment\">/* 60 = 0011 1100 */</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>; <span class=\"comment\">/* 13 = 0000 1101 */</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">     c = a &amp; b;       <span class=\"comment\">/* 12 = 0000 1100 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp; b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a | b;       <span class=\"comment\">/* 61 = 0011 1101 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a | b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a ^ b;       <span class=\"comment\">/* 49 = 0011 0001 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a ^ b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = ~a;          <span class=\"comment\">/*-61 = 1100 0011 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;~a = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &lt;&lt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 240 = 1111 0000 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class=\"line\">  </span><br><span class=\"line\">     c = a &gt;&gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 0000 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp; b = 12</span><br><span class=\"line\">a | b = 61</span><br><span class=\"line\">a ^ b = 49</span><br><span class=\"line\">~a = -61</span><br><span class=\"line\">a &lt;&lt; 2 = 240</span><br><span class=\"line\">a &gt;&gt; 2  = 15</span><br><span class=\"line\">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-逻辑运算符\"><a href=\"#6-5-逻辑运算符\" class=\"headerlink\" title=\"6-5 逻辑运算符\"></a>6-5 逻辑运算符</h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>\n<p><img src=\"/images/image-20240228213402353.png\" alt=\"image-20240228213402353\"></p>\n<p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp;&amp; b = false</span><br><span class=\"line\">a || b = true</span><br><span class=\"line\">!(a &amp;&amp; b) = true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-6-短路逻辑运算符\"><a href=\"#6-6-短路逻辑运算符\" class=\"headerlink\" title=\"6-6 短路逻辑运算符\"></a>6-6 短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LuoJi</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (a&lt;<span class=\"number\">4</span>)&amp;&amp;(a++&lt;<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a的结果为&quot;</span>+a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用短路逻辑运算符的结果为false</span><br><span class=\"line\">a的结果为5</span><br></pre></td></tr></table></figure>\n\n<p><strong>解析：</strong> <em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p>\n<h3 id=\"6-7-赋值运算符\"><a href=\"#6-7-赋值运算符\" class=\"headerlink\" title=\"6-7 赋值运算符\"></a>6-7 赋值运算符</h3><p>下面是Java语言支持的赋值运算符：</p>\n<p><img src=\"/images/image-20240228213543244.png\" alt=\"image-20240228213543244\"></p>\n<p>面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c = a + b = &quot;</span> + c );</span><br><span class=\"line\">        c += a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c += a  = &quot;</span> + c );</span><br><span class=\"line\">        c -= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c -= a = &quot;</span> + c );</span><br><span class=\"line\">        c *= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c *= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c /= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c /= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c %= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c %= a  = &quot;</span> + c );</span><br><span class=\"line\">        c &lt;&lt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &amp;= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class=\"line\">        c ^= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c ^= a   = &quot;</span> + c );</span><br><span class=\"line\">        c |= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c |= a   = &quot;</span> + c );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = a + b = 30</span><br><span class=\"line\">c += a  = 40</span><br><span class=\"line\">c -= a = 30</span><br><span class=\"line\">c *= a = 300</span><br><span class=\"line\">c /= a = 1</span><br><span class=\"line\">c %= a  = 5</span><br><span class=\"line\">c &lt;&lt;= 2 = 20</span><br><span class=\"line\">c &gt;&gt;= 2 = 5</span><br><span class=\"line\">c &gt;&gt;= 2 = 1</span><br><span class=\"line\">c &amp;= a  = 0</span><br><span class=\"line\">c ^= a   = 10</span><br><span class=\"line\">c |= a   = 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-8-条件运算符（-）\"><a href=\"#6-8-条件运算符（-）\" class=\"headerlink\" title=\"6-8 条件运算符（?:）\"></a>6-8 条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">variable</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> (expression) ? value <span class=\"keyword\">if</span> <span class=\"literal\">true</span> : value <span class=\"keyword\">if</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a , b;</span><br><span class=\"line\">      a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">1</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> +  b );</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">10</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> + b );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of b is : 30</span><br><span class=\"line\">Value of b is : 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-9-instanceof-运算符\"><a href=\"#6-9-instanceof-运算符\" class=\"headerlink\" title=\"6-9 instanceof 运算符\"></a>6-9 instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure>\n\n<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = &quot;James&quot;;</span><br><span class=\"line\">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>\n\n<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Vehicle</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>  a <span class=\"keyword\">instanceof</span> Car;</span><br><span class=\"line\">      System.out.println( result);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-10-Java运算符优先级\"><a href=\"#6-10-Java运算符优先级\" class=\"headerlink\" title=\"6-10 Java运算符优先级\"></a>6-10 Java运算符优先级</h3><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>\n<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>\n<p>再如，x &#x3D; 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>\n<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>\n<p><img src=\"/images/image-20240228213815636.png\" alt=\"image-20240228213815636\"></p>\n<h2 id=\"7，Java循环结构\"><a href=\"#7，Java循环结构\" class=\"headerlink\" title=\"7，Java循环结构\"></a>7，Java循环结构</h2><h3 id=\"7-1-while-循环\"><a href=\"#7-1-while-循环\" class=\"headerlink\" title=\"7-1 while 循环\"></a>7-1 while 循环</h3><p>while是最基本的循环，它的结构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( 布尔表达式 ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要布尔表达式为 true，循环就会一直执行下去。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> ) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-do…while-循环\"><a href=\"#7-2-do…while-循环\" class=\"headerlink\" title=\"7-2 do…while 循环\"></a>7-2 do…while 循环</h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\n<p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-for循环\"><a href=\"#7-3-for循环\" class=\"headerlink\" title=\"7-3 for循环\"></a>7-3 for循环</h3><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>\n<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 for 循环有以下几点说明：</p>\n<ul>\n<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\n<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\n<li>执行一次循环后，更新循环控制变量。</li>\n<li>再次检测布尔表达式。循环执行上面的过程。</li>\n</ul>\n<p>实例</p>\n<p><strong>Test.java 文件代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; x &lt; <span class=\"number\">20</span>; x = x+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : 10</span><br><span class=\"line\">value of x : 11</span><br><span class=\"line\">value of x : 12</span><br><span class=\"line\">value of x : 13</span><br><span class=\"line\">value of x : 14</span><br><span class=\"line\">value of x : 15</span><br><span class=\"line\">value of x : 16</span><br><span class=\"line\">value of x : 17</span><br><span class=\"line\">value of x : 18</span><br><span class=\"line\">value of x : 19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-Java-增强-for-循环\"><a href=\"#7-4-Java-增强-for-循环\" class=\"headerlink\" title=\"7-4 Java 增强 for 循环\"></a>7-4 Java 增强 for 循环</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句 : 表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码句子</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers )&#123;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      String [] names =&#123;<span class=\"string\">&quot;James&quot;</span>, <span class=\"string\">&quot;Larry&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lacy&quot;</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( String name : names ) &#123;</span><br><span class=\"line\">         System.out.print( name );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,</span><br><span class=\"line\">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5-break-关键字\"><a href=\"#7-5-break-关键字\" class=\"headerlink\" title=\"7-5 break 关键字\"></a>7-5 break 关键字</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\n<p>语法</p>\n<p>break 的用法很简单，就是循环结构中的一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// x 等于 30 时跳出循环</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-continue-关键字\"><a href=\"#7-6-continue-关键字\" class=\"headerlink\" title=\"7-6 continue 关键字\"></a>7-6 continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\n<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\n<p>语法</p>\n<p>continue 就是循环体中一条简单的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8，Java条件语句\"><a href=\"#8，Java条件语句\" class=\"headerlink\" title=\"8，Java条件语句\"></a>8，Java条件语句</h2><h3 id=\"8-1-if…else语句\"><a href=\"#8-1-if…else语句\" class=\"headerlink\" title=\"8-1 if…else语句\"></a>8-1 if…else语句</h3><p>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</p>\n<p>语法</p>\n<p>if…else 的用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为true</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x &lt; <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 if 语句&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是 else 语句</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-if…else-if…else-语句\"><a href=\"#8-2-if…else-if…else-语句\" class=\"headerlink\" title=\"8-2 if…else if…else 语句\"></a>8-2 if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p>\n<p>使用 if，else if，else 语句的时候，需要注意下面几点：</p>\n<ul>\n<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>\n<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>\n<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>if…else 语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 3的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果以上布尔表达式都不为true执行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 10&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 20&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 30&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of X is 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-嵌套的-if…else-语句\"><a href=\"#8-3-嵌套的-if…else-语句\" class=\"headerlink\" title=\"8-3 嵌套的 if…else 语句\"></a>8-3 嵌套的 if…else 语句</h3><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p>\n<p><strong>语法</strong></p>\n<p>嵌套的 if…else 语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">////如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">////如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像 if 语句一样嵌套 else if…else。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( y == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">             System.out.print(<span class=\"string\">&quot;X = 30 and Y = 10&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X = <span class=\"number\">30</span> <span class=\"type\">and</span> <span class=\"variable\">Y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9，Java-switch-case-语句\"><a href=\"#9，Java-switch-case-语句\" class=\"headerlink\" title=\"9，Java switch case 语句\"></a>9，Java switch case 语句</h2><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p>\n<p><strong>语法</strong></p>\n<p>switch case 语句语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch case 语句有如下规则：</p>\n<ul>\n<li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li>\n<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li>\n<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>\n<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li>\n<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li>\n<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>\n</ul>\n<p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//char grade = args[0].charAt(0);</span></span><br><span class=\"line\">      <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀&quot;</span>); </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你需要再努力努力&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;未知等级&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;你的等级是 &quot;</span> + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">良好</span><br><span class=\"line\">你的等级是 C</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;3&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10，Java-Number-Math-类\"><a href=\"#10，Java-Number-Math-类\" class=\"headerlink\" title=\"10，Java Number &amp; Math 类\"></a>10，Java Number &amp; Math 类</h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13.65f</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0x4a</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>\n<p>所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。</p>\n<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>\n<p>下面是一个使用 Integer 对象的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Integer</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      x =  x + <span class=\"number\">10</span>;</span><br><span class=\"line\">      System.out.println(x); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n\n<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>\n<h3 id=\"10-1-Java-Math-类\"><a href=\"#10-1-Java-Math-类\" class=\"headerlink\" title=\"10-1 Java Math 类\"></a>10-1 Java Math 类</h3><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>\n<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String []args)</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class=\"number\">0</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class=\"number\">3</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1的反正切值： &quot;</span> + Math.atan(<span class=\"number\">1</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(Math.PI);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">90</span> 度的正弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>度的余弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">60</span>度的正切值：<span class=\"number\">1.7320508075688767</span></span><br><span class=\"line\"><span class=\"number\">1</span>的反正切值： <span class=\"number\">0.7853981633974483</span></span><br><span class=\"line\">π/<span class=\"number\">2</span>的角度值：<span class=\"number\">90.0</span></span><br><span class=\"line\"><span class=\"number\">3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-Number-Math-类方法\"><a href=\"#10-2-Number-Math-类方法\" class=\"headerlink\" title=\"10-2 Number &amp; Math 类方法\"></a>10-2 Number &amp; Math 类方法</h3><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p>\n<p><img src=\"/images/image-20240228220453132.png\" alt=\"image-20240228220453132\"></p>\n<h3 id=\"10-3-Math-的-floor-round-和-ceil-方法实例比较\"><a href=\"#10-3-Math-的-floor-round-和-ceil-方法实例比较\" class=\"headerlink\" title=\"10-3 Math 的 floor,round 和 ceil 方法实例比较\"></a>10-3 Math 的 floor,round 和 ceil 方法实例比较</h3><p><img src=\"/images/image-20240228220635826.png\" alt=\"image-20240228220635826\"></p>\n<p><strong>floor,round 和 ceil 实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"type\">double</span>[] nums = &#123; <span class=\"number\">1.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">1.6</span>, -<span class=\"number\">1.4</span>, -<span class=\"number\">1.5</span>, -<span class=\"number\">1.6</span> &#125;;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">double</span> num : nums) &#123;   </span><br><span class=\"line\">      test(num);   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">double</span> num)</span> &#123;   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.floor(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.floor(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.round(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.round(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.ceil(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.ceil(num));   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.floor(<span class=\"number\">1.4</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.4</span>)=<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.4</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.5</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.5</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.5</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.6</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.6</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.6</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.4</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.5</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.6</span>)=-<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11，Java-Character-类\"><a href=\"#11，Java-Character-类\" class=\"headerlink\" title=\"11，Java Character 类\"></a>11，Java Character 类</h2><p>Character 类用于对单个字符进行操作。</p>\n<p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Unicode 字符表示形式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">uniChar</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u039A&#x27;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p>\n<p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在某些情况下，Java编译器会自动创建一个Character对象。</p>\n<p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span></span><br><span class=\"line\"><span class=\"comment\">// 返回拆箱的值到 &#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> test(<span class=\"string\">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-转义序列\"><a href=\"#11-1-转义序列\" class=\"headerlink\" title=\"11-1 转义序列\"></a>11-1 转义序列</h3><p>前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p>\n<p>下面列表展示了Java的转义序列：</p>\n<p><img src=\"/images/image-20240228220904427.png\" alt=\"image-20240228220904427\"></p>\n<p><strong>实例</strong></p>\n<p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。</p>\n<p>以下实例转义双引号并输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问\\&quot;菜鸟教程!\\&quot;&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问&quot;菜鸟教程!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-Character-方法\"><a href=\"#11-2-Character-方法\" class=\"headerlink\" title=\"11-2 Character 方法\"></a>11-2 Character 方法</h3><p>下面是Character类的方法：</p>\n<p><img src=\"/images/image-20240228220959034.png\" alt=\"image-20240228220959034\"></p>\n<h2 id=\"12，Java-String-类\"><a href=\"#12，Java-String-类\" class=\"headerlink\" title=\"12，Java String 类\"></a>12，Java String 类</h2><h3 id=\"12-1-创建字符串\"><a href=\"#12-1-创建字符串\" class=\"headerlink\" title=\"12-1 创建字符串\"></a>12-1 创建字符串</h3><p>创建字符串最简单的方式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">greeting</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中遇到字符串常量时，这里的值是 “<strong>菜鸟教程</strong>“”，编译器会使用该值创建一个 String 对象。</p>\n<p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p>\n<p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] helloArray = &#123; <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">helloString</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(helloArray);  </span><br><span class=\"line\">      System.out.println( helloString );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n\n<p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p>\n<p>如果需要对字符串做很多修改，那么应该选择使用 <a href=\"http://it028.com/java-stringbuffer.html\">StringBuffer &amp; StringBuilder 类</a>。</p>\n<h3 id=\"12-2-字符串长度\"><a href=\"#12-2-字符串长度\" class=\"headerlink\" title=\"12-2 字符串长度\"></a>12-2 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。</p>\n<p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>\n<p>下面的代码执行后，len 变量等于 14:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">site</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www.runoob.com&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> site.length();</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;菜鸟教程网址长度 : &quot;</span> + len );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程网址长度 : 14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-连接字符串\"><a href=\"#12-3-连接字符串\" class=\"headerlink\" title=\"12-3 连接字符串\"></a>12-3 连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>\n<p>string1.concat(string2);</p>\n<p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;我的名字是 &quot;.concat(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>更常用的是使用’+’操作符来连接字符串，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello,&quot; + &quot; runoob&quot; + &quot;!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, runoob!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;     </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程网址：&quot;</span>;     </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1、&quot;</span> + string1 + <span class=\"string\">&quot;www.runoob.com&quot;</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、菜鸟教程网址：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-4-创建格式化字符串\"><a href=\"#12-4-创建格式化字符串\" class=\"headerlink\" title=\"12-4 创建格式化字符串\"></a>12-4 创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>\n<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>\n<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>\n<p>如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printf(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>你也可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fs;</span><br><span class=\"line\">fs = String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-5-String-方法\"><a href=\"#12-5-String-方法\" class=\"headerlink\" title=\"12-5 String 方法\"></a>12-5 String 方法</h3><p>下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm(‘<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>‘) 文档:</p>\n<p><img src=\"/images/image-20240228221437713.png\" alt=\"image-20240228221437713\"></p>\n<h2 id=\"13，Java-StringBuffer-和-StringBuilder-类\"><a href=\"#13，Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"13，Java StringBuffer 和 StringBuilder 类\"></a>13，Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(<span class=\"string\">&quot;菜鸟教程官网：&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;www&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.runoob&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.com&quot;</span>);</span><br><span class=\"line\">    System.out.println(sBuffer);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程官网：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-1-StringBuffer-方法\"><a href=\"#13-1-StringBuffer-方法\" class=\"headerlink\" title=\"13-1 StringBuffer 方法\"></a>13-1 StringBuffer 方法</h3><p>以下是 StringBuffer 类支持的主要方法</p>\n<p><img src=\"/images/image-20240228221542960.png\" alt=\"image-20240228221542960\"></p>\n<p>下面的列表里的方法和 String 类的方法类似：</p>\n<p><img src=\"/images/image-20240228221620605.png\" alt=\"image-20240228221620605\"></p>\n<h2 id=\"14，Java数组\"><a href=\"#14，Java数组\" class=\"headerlink\" title=\"14，Java数组\"></a>14，Java数组</h2><h3 id=\"14-1-声明数组变量\"><a href=\"#14-1-声明数组变量\" class=\"headerlink\" title=\"14-1 声明数组变量\"></a>14-1 声明数组变量</h3><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;   <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\">dataType arrayRefVar[];  <span class=\"comment\">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C&#x2F;C++ 语言 ，在Java中采用是为了让 C&#x2F;C++ 程序员能够快速理解java语言。</p>\n<p>下面是这两种语法的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span>[] myList;         <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">double</span> myList[];         <span class=\"comment\">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-创建数组\"><a href=\"#14-2-创建数组\" class=\"headerlink\" title=\"14-2 创建数组\"></a>14-2 创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>另外，你还可以使用如下的方式创建数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p><strong>实例</strong></p>\n<p>下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestArray.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 定义数组</span></span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[size];</span><br><span class=\"line\">      myList[<span class=\"number\">0</span>] = <span class=\"number\">5.6</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">1</span>] = <span class=\"number\">4.5</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">2</span>] = <span class=\"number\">3.3</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">3</span>] = <span class=\"number\">13.2</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">4</span>] = <span class=\"number\">4.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">5</span>] = <span class=\"number\">34.33</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">6</span>] = <span class=\"number\">34.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">7</span>] = <span class=\"number\">45.45</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">8</span>] = <span class=\"number\">99.993</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">9</span>] = <span class=\"number\">11123</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;总和为： &quot;</span> + total);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总和为： 11367.373</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-3-处理数组\"><a href=\"#14-3-处理数组\" class=\"headerlink\" title=\"14-3 处理数组\"></a>14-3 处理数组</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p>\n<p><strong>示例</strong></p>\n<p>该实例完整地展示了如何创建、初始化和操纵数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         System.out.println(myList[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Total is &quot;</span> + total);</span><br><span class=\"line\">      <span class=\"comment\">// 查找最大元素</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> myList[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Max is &quot;</span> + max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.9</span></span><br><span class=\"line\"><span class=\"number\">2.9</span></span><br><span class=\"line\"><span class=\"number\">3.4</span></span><br><span class=\"line\"><span class=\"number\">3.5</span></span><br><span class=\"line\">Total is <span class=\"number\">11.7</span></span><br><span class=\"line\">Max is <span class=\"number\">3.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-4-For-Each-循环\"><a href=\"#14-4-For-Each-循环\" class=\"headerlink\" title=\"14-4 For-Each 循环\"></a>14-4 For-Each 循环</h3><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(type element: array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>该实例用来显示数组 myList 中的所有元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">double</span> element: myList) &#123;</span><br><span class=\"line\">         System.out.println(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.9</span><br><span class=\"line\">2.9</span><br><span class=\"line\">3.4</span><br><span class=\"line\">3.5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-5-数组作为函数的参数\"><a href=\"#14-5-数组作为函数的参数\" class=\"headerlink\" title=\"14-5 数组作为函数的参数\"></a>14-5 数组作为函数的参数</h3><p>数组可以作为参数传递给方法。</p>\n<p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-6-数组作为函数的返回值\"><a href=\"#14-6-数组作为函数的返回值\" class=\"headerlink\" title=\"14-6 数组作为函数的返回值\"></a>14-6 数组作为函数的返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverse(<span class=\"type\">int</span>[] list) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[list.length];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = result.length - <span class=\"number\">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class=\"line\">    result[j] = list[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-7-多维数组\"><a href=\"#14-7-多维数组\" class=\"headerlink\" title=\"14-7 多维数组\"></a>14-7 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-7-1-多维数组的动态初始化（以二维数组为例）\"><a href=\"#14-7-1-多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"14-7-1 多维数组的动态初始化（以二维数组为例）\"></a>14-7-1 多维数组的动态初始化（以二维数组为例）</h4><ol>\n<li>直接为每一维分配空间，格式如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[][] typeName = <span class=\"keyword\">new</span> <span class=\"title class_\">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure>\n\n<p>type 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p>二维数组 a 可以看成一个两行三列的数组。</p>\n<p>2，从最高维开始，分别为每一维分配空间，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">s[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Luck&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;you&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p><strong>s[0]&#x3D;new String[2]</strong> 和 <strong>s[1]&#x3D;new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0&#x3D;new String(“Good”)</strong> 等操作。</p>\n<h4 id=\"14-7-2-多维数组的引用（以二维数组为例）\"><a href=\"#14-7-2-多维数组的引用（以二维数组为例）\" class=\"headerlink\" title=\"14-7-2 多维数组的引用（以二维数组为例）\"></a>14-7-2 多维数组的引用（以二维数组为例）</h4><p>对二维数组中的每个元素，引用方式为 <strong>arrayName[index1][index2]</strong>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-8-Arrays-类\"><a href=\"#14-8-Arrays-类\" class=\"headerlink\" title=\"14-8 Arrays 类\"></a>14-8 Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<p>具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<p>具体说明请查看下表：</p>\n<p><img src=\"/images/image-20240228222507296.png\" alt=\"image-20240228222507296\"></p>\n<h2 id=\"15，Java-日期时间\"><a href=\"#15，Java-日期时间\" class=\"headerlink\" title=\"15，Java 日期时间\"></a>15，Java 日期时间</h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p>\n<p>第一个构造函数使用当前日期和时间来初始化对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date( )</span><br></pre></td></tr></table></figure>\n\n<p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date(long millisec)</span><br></pre></td></tr></table></figure>\n\n<p>Date对象创建以后，可以调用下面的方法。</p>\n<p><img src=\"/images/image-20240228222725206.png\" alt=\"image-20240228222725206\"></p>\n<h3 id=\"15-1-获取当前日期时间\"><a href=\"#15-1-获取当前日期时间\" class=\"headerlink\" title=\"15-1 获取当前日期时间\"></a>15-1 获取当前日期时间</h3><p>Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用 toString() 函数显示日期时间</span></span><br><span class=\"line\">       System.out.println(date.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon May <span class=\"number\">04</span> 09:<span class=\"number\">51</span>:<span class=\"number\">52</span> CDT <span class=\"number\">2013</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-2-日期比较\"><a href=\"#15-2-日期比较\" class=\"headerlink\" title=\"15-2 日期比较\"></a>15-2 日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p>\n<ul>\n<li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li>\n<li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li>\n<li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li>\n</ul>\n<h3 id=\"15-3-使用-SimpleDateFormat-格式化日期\"><a href=\"#15-3-使用-SimpleDateFormat-格式化日期\" class=\"headerlink\" title=\"15-3 使用 SimpleDateFormat 格式化日期\"></a>15-3 使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">Date</span> <span class=\"variable\">dNow</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( );</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p>\n<p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p>\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间为: 2018-09-06 10:16:34</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-日期和时间的格式化编码\"><a href=\"#15-4-日期和时间的格式化编码\" class=\"headerlink\" title=\"15-4 日期和时间的格式化编码\"></a>15-4 日期和时间的格式化编码</h3><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p>\n<p><img src=\"/images/image-20240228222933035.png\" alt=\"image-20240228222933035\"></p>\n<h3 id=\"15-5-使用printf格式化日期\"><a href=\"#15-5-使用printf格式化日期\" class=\"headerlink\" title=\"15-5 使用printf格式化日期\"></a>15-5 使用printf格式化日期</h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p>\n<p><img src=\"/images/image-20240228223002094.png\" alt=\"image-20240228223002094\"></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">     <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//c的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class=\"line\">    <span class=\"comment\">//f的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//d的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//r的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//t的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//R的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span><br><span class=\"line\">年-月-日格式：2012-09-10  </span><br><span class=\"line\">月/日/年格式：09/10/12  </span><br><span class=\"line\">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span><br><span class=\"line\">HH:MM:SS格式（24时制）：10:43:36  </span><br><span class=\"line\">HH:MM格式（24时制）：10:43  </span><br></pre></td></tr></table></figure>\n\n<p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p>\n<p>索引必须紧跟在%后面，而且必须以$结束。例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用toString()显示日期和时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 显示格式化时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       Date date=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();                                      </span><br><span class=\"line\">        <span class=\"comment\">//b的使用，月份简称  </span></span><br><span class=\"line\">        String str=String.format(Locale.US,<span class=\"string\">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class=\"line\">        System.out.println(str);                                                                              </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//B的使用，月份全称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文月份全称：%tB&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份全称：%tB%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//a的使用，星期简称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文星期的简称：%ta&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        <span class=\"comment\">//A的使用，星期全称  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地星期的简称：%tA%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//C的使用，年前两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//y的使用，年后两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//j的使用，一年的天数  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//m的使用，月份  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//d的使用，日（二位，不够补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//e的使用，日（一位不补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;月份的日（前面不补0）：%te&quot;</span>,date);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">英文月份简称：May</span><br><span class=\"line\">本地月份简称：五月</span><br><span class=\"line\">英文月份全称：May</span><br><span class=\"line\">本地月份全称：五月</span><br><span class=\"line\">英文星期的简称：Thu</span><br><span class=\"line\">本地星期的简称：星期四</span><br><span class=\"line\">年的前两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">20</span></span><br><span class=\"line\">年的后两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">17</span></span><br><span class=\"line\">一年中的天数（即年的第几天）：<span class=\"number\">124</span></span><br><span class=\"line\">两位数字的月份（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">05</span></span><br><span class=\"line\">两位数字的日（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">04</span></span><br><span class=\"line\">月份的日（前面不补<span class=\"number\">0</span>）：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"15-6-解析字符串为时间\"><a href=\"#15-6-解析字符串为时间\" class=\"headerlink\" title=\"15-6 解析字符串为时间\"></a>15-6 解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> args.length == <span class=\"number\">0</span> ? <span class=\"string\">&quot;1818-11-11&quot;</span> : args[<span class=\"number\">0</span>]; </span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.print(input + <span class=\"string\">&quot; Parses as &quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      Date t; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">          t = ft.parse(input); </span><br><span class=\"line\">          System.out.println(t); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Unparseable using &quot;</span> + ft); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java DateDemo</span><br><span class=\"line\">1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818</span><br><span class=\"line\">$ java DateDemo 2007-12-01</span><br><span class=\"line\">2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-7-Java-休眠-sleep\"><a href=\"#15-7-Java-休眠-sleep\" class=\"headerlink\" title=\"15-7 Java 休眠(sleep)\"></a>15-7 Java 休眠(sleep)</h3><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</p>\n<p>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);   <span class=\"comment\">// 休眠3秒</span></span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Sep 17 10:20:30 CST 2015</span><br><span class=\"line\"></span><br><span class=\"line\">Thu Sep 17 10:20:33 CST 2015</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-8-测量时间\"><a href=\"#15-8-测量时间\" class=\"headerlink\" title=\"15-8 测量时间\"></a>15-8 测量时间</h3><p>下面的一个例子表明如何测量时间间隔（以毫秒为单位）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiffDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">5</span>*<span class=\"number\">60</span>*<span class=\"number\">10</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> end - start;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Difference is : &quot;</span> + diff);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">47</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">50</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Difference is : <span class=\"number\">3019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-9-Calendar类\"><a href=\"#15-9-Calendar类\" class=\"headerlink\" title=\"15-9 Calendar类\"></a>15-9 Calendar类</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p>\n<p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p>\n<p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p>\n<h4 id=\"15-9-1-创建一个代表系统当前日期的Calendar对象\"><a href=\"#15-9-1-创建一个代表系统当前日期的Calendar对象\" class=\"headerlink\" title=\"15-9-1 创建一个代表系统当前日期的Calendar对象\"></a>15-9-1 创建一个代表系统当前日期的Calendar对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Calendar.getInstance();<span class=\"comment\">//默认是当前日期</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-2-创建一个指定日期的Calendar对象\"><a href=\"#15-9-2-创建一个指定日期的Calendar对象\" class=\"headerlink\" title=\"15-9-2 创建一个指定日期的Calendar对象\"></a>15-9-2 创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个代表2009年6月12日的Calendar对象</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">c1.set(<span class=\"number\">2009</span>, <span class=\"number\">6</span> - <span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-3-Calendar类对象字段类型\"><a href=\"#15-9-3-Calendar类对象字段类型\" class=\"headerlink\" title=\"15-9-3 Calendar类对象字段类型\"></a>15-9-3 Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想</p>\n<p><img src=\"/http://localhost:4000//image-20240228225026914.png\" alt=\"image-20240228225026914\"></p>\n<h4 id=\"15-9-4-Calendar类对象信息的设置\"><a href=\"#15-9-4-Calendar类对象信息的设置\" class=\"headerlink\" title=\"15-9-4 Calendar类对象信息的设置\"></a>15-9-4 Calendar类对象信息的设置</h4><p><strong>Set设置</strong></p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void set(int year,int month,int date)</span><br><span class=\"line\">c1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</span><br></pre></td></tr></table></figure>\n\n<p>利用字段类型设置</p>\n<p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(int field,int value)</span><br></pre></td></tr></table></figure>\n\n<p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.DATE,10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.YEAR,2008);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性set的意义以此类推</p>\n<p><strong>Add设置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, 10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, -10);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性的add的意义以此类推</p>\n<h4 id=\"15-9-5-Calendar类对象信息的获得\"><a href=\"#15-9-5-Calendar类对象信息的获得\" class=\"headerlink\" title=\"15-9-5 Calendar类对象信息的获得\"></a>15-9-5 Calendar类对象信息的获得</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\"><span class=\"comment\">// 获得年份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">year</span> <span class=\"operator\">=</span> c1.get(Calendar.YEAR);</span><br><span class=\"line\"><span class=\"comment\">// 获得月份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> c1.get(Calendar.MONTH) + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获得日期</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> c1.get(Calendar.DATE);</span><br><span class=\"line\"><span class=\"comment\">// 获得小时</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hour</span> <span class=\"operator\">=</span> c1.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\"><span class=\"comment\">// 获得分钟</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">minute</span> <span class=\"operator\">=</span> c1.get(Calendar.MINUTE);</span><br><span class=\"line\"><span class=\"comment\">// 获得秒</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> c1.get(Calendar.SECOND);</span><br><span class=\"line\"><span class=\"comment\">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-10-GregorianCalendar类\"><a href=\"#15-10-GregorianCalendar类\" class=\"headerlink\" title=\"15-10 GregorianCalendar类\"></a>15-10 GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p>\n<p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p>\n<p>下面列出GregorianCalendar对象的几个构造方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225136150.png\" alt=\"image-20240228225136150\"></p>\n<p>这里是GregorianCalendar 类提供的一些有用的方法列表：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225205976.png\" alt=\"image-20240228225205976\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GregorianCalendarDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      String months[] = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Jan&quot;</span>, <span class=\"string\">&quot;Feb&quot;</span>, <span class=\"string\">&quot;Mar&quot;</span>, <span class=\"string\">&quot;Apr&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;May&quot;</span>, <span class=\"string\">&quot;Jun&quot;</span>, <span class=\"string\">&quot;Jul&quot;</span>, <span class=\"string\">&quot;Aug&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;Sep&quot;</span>, <span class=\"string\">&quot;Oct&quot;</span>, <span class=\"string\">&quot;Nov&quot;</span>, <span class=\"string\">&quot;Dec&quot;</span>&#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> year;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化 Gregorian 日历</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用当前时间和日期</span></span><br><span class=\"line\">      <span class=\"comment\">// 默认为本地时间和时区</span></span><br><span class=\"line\">      <span class=\"type\">GregorianCalendar</span> <span class=\"variable\">gcalendar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GregorianCalendar</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 显示当前时间和日期的信息</span></span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Date: &quot;</span>);</span><br><span class=\"line\">      System.out.print(months[gcalendar.get(Calendar.MONTH)]);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot; &quot;</span> + gcalendar.get(Calendar.DATE) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      System.out.println(year = gcalendar.get(Calendar.YEAR));</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Time: &quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.HOUR) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.println(gcalendar.get(Calendar.SECOND));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 测试当前年份是否为闰年</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(gcalendar.isLeapYear(year)) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份不是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date: Apr 22 2009</span><br><span class=\"line\">Time: 11:25:27</span><br><span class=\"line\">当前年份不是闰年</span><br></pre></td></tr></table></figure>\n\n<p>关于 Calender 类的完整列表，你可以参考标准的 <a href=\"http://it028.com/index-10.htm\">Java文档</a>。</p>\n<h2 id=\"16，Java-正则表达式\"><a href=\"#16，Java-正则表达式\" class=\"headerlink\" title=\"16，Java 正则表达式\"></a>16，Java 正则表达式</h2><p>正则表达式定义了字符串的模式。</p>\n<p>正则表达式可以用来搜索、编辑或处理文本。</p>\n<p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>\n<h3 id=\"16-1-正则表达式实例\"><a href=\"#16-1-正则表达式实例\" class=\"headerlink\" title=\"16-1 正则表达式实例\"></a>16-1 正则表达式实例</h3><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p>\n<p><strong>.</strong>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p>\n<p>下表列出了一些正则表达式的实例及描述：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225320769.png\" alt=\"image-20240228225320769\"></p>\n<p>Java 正则表达式和 Perl 的是最为相似的。</p>\n<p>java.util.regex 包主要包括以下三个类：</p>\n<ul>\n<li><p>Pattern 类：</p>\n<p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>\n</li>\n<li><p>Matcher 类：</p>\n<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>\n</li>\n<li><p>PatternSyntaxException：</p>\n<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>\n</li>\n</ul>\n<p>以下实例中使用了正则表达式 <strong>.*runoob.*</strong> 用于查找字符串中是否包了 <strong>runoob</strong> 子串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegexExample1</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;I am noob &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;from runoob.com.&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.*runoob.*&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isMatch</span> <span class=\"operator\">=</span> Pattern.matches(pattern, content);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot;</span> + isMatch);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串中是否包含了 &#x27;runoob&#x27; 子字符串? true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-捕获组\"><a href=\"#16-2-捕获组\" class=\"headerlink\" title=\"16-2 捕获组\"></a>16-2 捕获组</h3><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p>\n<p>例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p>\n<p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p>\n<ul>\n<li>((A)(B(C)))</li>\n<li>(A)</li>\n<li>(B(C))</li>\n<li>(C)</li>\n</ul>\n<p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p>\n<p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 按指定模式在字符串查找</span></span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\D*)(\\\\d+)(.*)&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 创建 Pattern 对象</span></span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 现在创建 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> r.matcher(line);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m.find( )) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">0</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">1</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">2</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">3</span>) ); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;NO MATCH&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found value: This order was placed for QT3000! OK?</span><br><span class=\"line\">Found value: This order was placed for QT</span><br><span class=\"line\">Found value: 3000</span><br><span class=\"line\">Found value: ! OK?</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"16-3-正则表达式语法\"><a href=\"#16-3-正则表达式语法\" class=\"headerlink\" title=\"16-3 正则表达式语法\"></a>16-3 正则表达式语法</h3><p>在其他语言中，<strong>\\</strong> 表示：<strong>我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</strong></p>\n<p>在 Java 中，<strong>\\</strong> 表示：<strong>我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</strong></p>\n<p>所以，在其他的语言中（如Perl），一个反斜杠 **** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <strong>\\</strong> 代表其他语言中的一个 ****，这也就是为什么表示一位数字的正则表达式是 <strong>\\d</strong>，而表示一个普通的反斜杠是 <strong>\\\\</strong>。</p>\n<p><img src=\"/http://localhost:4000//image-20240228225546405.png\" alt=\"image-20240228225546405\"></p>\n<h3 id=\"16-4-Matcher-类的方法\"><a href=\"#16-4-Matcher-类的方法\" class=\"headerlink\" title=\"16-4 Matcher 类的方法\"></a>16-4 Matcher 类的方法</h3><h4 id=\"16-4-1-索引方法\"><a href=\"#16-4-1-索引方法\" class=\"headerlink\" title=\"16-4-1 索引方法\"></a>16-4-1 索引方法</h4><p>索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225637596.png\" alt=\"image-20240228225637596\"></p>\n<h4 id=\"16-4-2-研究方法\"><a href=\"#16-4-2-研究方法\" class=\"headerlink\" title=\"16-4-2 研究方法\"></a>16-4-2 研究方法</h4><p>研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225700596.png\" alt=\"image-20240228225700596\"></p>\n<h4 id=\"16-4-3-替换方法\"><a href=\"#16-4-3-替换方法\" class=\"headerlink\" title=\"16-4-3 替换方法\"></a>16-4-3 替换方法</h4><p>替换方法是替换输入字符串里文本的方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225727777.png\" alt=\"image-20240228225727777\"></p>\n<h4 id=\"16-4-4-start-和-end-方法\"><a href=\"#16-4-4-start-和-end-方法\" class=\"headerlink\" title=\"16-4-4 start 和 end 方法\"></a>16-4-4 start 和 end 方法</h4><p>下面是一个对单词 “cat” 出现在输入字符串中出现次数进行计数的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\\\bcat\\\\b&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">         count++;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Match number &quot;</span>+count);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;start(): &quot;</span>+m.start());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;end(): &quot;</span>+m.end());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match number <span class=\"number\">1</span></span><br><span class=\"line\">start(): <span class=\"number\">0</span></span><br><span class=\"line\">end(): <span class=\"number\">3</span></span><br><span class=\"line\">Match number <span class=\"number\">2</span></span><br><span class=\"line\">start(): <span class=\"number\">4</span></span><br><span class=\"line\">end(): <span class=\"number\">7</span></span><br><span class=\"line\">Match number <span class=\"number\">3</span></span><br><span class=\"line\">start(): <span class=\"number\">8</span></span><br><span class=\"line\">end(): <span class=\"number\">11</span></span><br><span class=\"line\">Match number <span class=\"number\">4</span></span><br><span class=\"line\">start(): <span class=\"number\">19</span></span><br><span class=\"line\">end(): <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p>\n<p>Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。</p>\n<h4 id=\"16-4-5-matches-和-lookingAt-方法\"><a href=\"#16-4-5-matches-和-lookingAt-方法\" class=\"headerlink\" title=\"16-4-5 matches 和 lookingAt 方法\"></a>16-4-5 matches 和 lookingAt 方法</h4><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。</p>\n<p>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p>\n<p>这两个方法经常在输入字符串的开始使用。</p>\n<p>我们通过下面这个例子，来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern pattern;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher2;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       pattern = Pattern.compile(REGEX);</span><br><span class=\"line\">       matcher = pattern.matcher(INPUT);</span><br><span class=\"line\">       matcher2 = pattern.matcher(INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current REGEX is: foo</span><br><span class=\"line\">Current INPUT is: fooooooooooooooooo</span><br><span class=\"line\">Current INPUT2 is: ooooofoooooooooooo</span><br><span class=\"line\">lookingAt(): true</span><br><span class=\"line\">matches(): false</span><br><span class=\"line\">lookingAt(): false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-6-replaceFirst-和-replaceAll-方法\"><a href=\"#16-4-6-replaceFirst-和-replaceAll-方法\" class=\"headerlink\" title=\"16-4-6 replaceFirst 和 replaceAll 方法\"></a>16-4-6 replaceFirst 和 replaceAll 方法</h4><p>replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p>\n<p>下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dog&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;The dog says meow. &quot;</span> +</span><br><span class=\"line\">                                    <span class=\"string\">&quot;All dogs say meow.&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"comment\">// get a matcher object</span></span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); </span><br><span class=\"line\">       INPUT = m.replaceAll(REPLACE);</span><br><span class=\"line\">       System.out.println(INPUT);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat says meow. All cats say meow.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-7-appendReplacement-和-appendTail-方法\"><a href=\"#16-4-7-appendReplacement-和-appendTail-方法\" class=\"headerlink\" title=\"16-4-7 appendReplacement 和 appendTail 方法\"></a>16-4-7 appendReplacement 和 appendTail 方法</h4><p>Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：</p>\n<p>看下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a*b&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">      <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT);</span><br><span class=\"line\">      <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(m.find())&#123;</span><br><span class=\"line\">         m.appendReplacement(sb,REPLACE);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      m.appendTail(sb);</span><br><span class=\"line\">      System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-foo-foo-foo-kkk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-8-PatternSyntaxException-类的方法\"><a href=\"#16-4-8-PatternSyntaxException-类的方法\" class=\"headerlink\" title=\"16-4-8 PatternSyntaxException 类的方法\"></a>16-4-8 PatternSyntaxException 类的方法</h4><p>PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。</p>\n<p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p>\n<p><img src=\"/http://localhost:4000//image-20240228230136771.png\" alt=\"image-20240228230136771\"></p>\n<h2 id=\"17，Java-方法\"><a href=\"#17，Java-方法\" class=\"headerlink\" title=\"17，Java 方法\"></a>17，Java 方法</h2><p>在前面几个章节中我们经常使用到 <strong>System.out.println()</strong>，那么它是什么呢？</p>\n<ul>\n<li>println() 是一个方法。</li>\n<li>System 是系统类。</li>\n<li>out 是标准输出对象。</li>\n</ul>\n<p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p>\n<h3 id=\"17-1-那么什么是方法呢？\"><a href=\"#17-1-那么什么是方法呢？\" class=\"headerlink\" title=\"17-1 那么什么是方法呢？\"></a>17-1 那么什么是方法呢？</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<h3 id=\"17-2-方法的优点\"><a href=\"#17-2-方法的优点\" class=\"headerlink\" title=\"17-2 方法的优点\"></a>17-2 方法的优点</h3><ul>\n<li>\\1. 使程序变得更简短而清晰。</li>\n<li>\\2. 有利于程序维护。</li>\n<li>\\3. 可以提高程序开发的效率。</li>\n<li>\\4. 提高了代码的重用性。</li>\n</ul>\n<h3 id=\"17-3-方法的命名规则\"><a href=\"#17-3-方法的命名规则\" class=\"headerlink\" title=\"17-3 方法的命名规则\"></a>17-3 方法的命名规则</h3><ul>\n<li>1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<strong>addPerson</strong>。</li>\n<li>2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<strong>test<MethodUnderTest>_<state></state></MethodUnderTest></strong>，例如 <strong>testPop_emptyStack</strong>。</li>\n</ul>\n<hr>\n<h3 id=\"17-4-方法的定义\"><a href=\"#17-4-方法的定义\" class=\"headerlink\" title=\"17-4 方法的定义\"></a>17-4 方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p>\n<ul>\n<li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>\n<li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li>\n<li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>\n<li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">(<span class=\"type\">int</span> birthday)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数可以有多个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">float</span> <span class=\"title function_\">interest</span><span class=\"params\">(<span class=\"type\">float</span> principal, <span class=\"type\">int</span> year)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p>\n<p>下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回两个整型变量数据的较大值 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> result;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">      result = num1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-5-方法调用\"><a href=\"#17-5-方法调用\" class=\"headerlink\" title=\"17-5 方法调用\"></a>17-5 方法调用</h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p>\n<p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p>\n<p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">larger</span> <span class=\"operator\">=</span> max(<span class=\"number\">30</span>, <span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;欢迎访问菜鸟教程！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子演示了如何定义一个方法，以及如何调用它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestMax.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMax</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 主方法 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> max(i, j);</span><br><span class=\"line\">      System.out.println( i + <span class=\"string\">&quot; 和 &quot;</span> + j + <span class=\"string\">&quot; 比较，最大值是：&quot;</span> + k);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** 返回两个整数变量较大的值 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">         result = num1;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 和 2 比较，最大值是：5</span><br></pre></td></tr></table></figure>\n\n<p>这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。</p>\n<p>main 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。</p>\n<h3 id=\"17-6-void-关键字\"><a href=\"#17-6-void-关键字\" class=\"headerlink\" title=\"17-6 void 关键字\"></a>17-6 void 关键字</h3><p>本节说明如何声明和调用一个 void 方法。</p>\n<p>下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestVoidMethod.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVoidMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    printGrade(<span class=\"number\">78.5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printGrade</span><span class=\"params\">(<span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n\n<p>这里printGrade方法是一个void类型方法，它不返回值。</p>\n<p>一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。</p>\n<hr>\n<h3 id=\"17-7-通过值传递参数\"><a href=\"#17-7-通过值传递参数\" class=\"headerlink\" title=\"17-7 通过值传递参数\"></a>17-7 通过值传递参数</h3><p>调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。</p>\n<p>例如，下面的方法连续n次打印一个消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestVoidMethod.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nPrintln</span><span class=\"params\">(String message, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    System.out.println(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<p>下面的例子演示按值传递的效果。</p>\n<p>该程序创建一个方法，该方法用于交换两个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestPassByValue.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPassByValue</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换前 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                        num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用swap方法</span></span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换后 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                       num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/** 交换两个变量的方法 */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> n1, <span class=\"type\">int</span> n2)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t进入 swap 方法&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换前 n1 的值为：&quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">    <span class=\"comment\">// 交换 n1 与 n2的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> n1;</span><br><span class=\"line\">    n1 = n2;</span><br><span class=\"line\">    n2 = temp;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换后 n1 的值为 &quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交换前 num1 的值为：1 ，num2 的值为：2</span><br><span class=\"line\">    进入 swap 方法</span><br><span class=\"line\">        交换前 n1 的值为：1，n2 的值：2</span><br><span class=\"line\">        交换后 n1 的值为 2，n2 的值：1</span><br><span class=\"line\">交换后 num1 的值为：1 ，num2 的值为：2</span><br></pre></td></tr></table></figure>\n\n<p>传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。</p>\n<hr>\n<h3 id=\"17-8-方法的重载\"><a href=\"#17-8-方法的重载\" class=\"headerlink\" title=\"17-8 方法的重载\"></a>17-8 方法的重载</h3><p>上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？</p>\n<p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> num1, <span class=\"type\">double</span> num2)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；</p>\n<p>如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；</p>\n<p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p>\n<p>Java编译器根据方法签名判断哪个方法应该被调用。</p>\n<p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p>\n<p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p>\n<h3 id=\"17-9-变量作用域\"><a href=\"#17-9-变量作用域\" class=\"headerlink\" title=\"17-9 变量作用域\"></a>17-9 变量作用域</h3><ul>\n<li>变量的范围是程序中该变量可以被引用的部分。</li>\n<li>方法内定义的变量被称为局部变量。</li>\n<li>局部变量的作用范围从声明开始，直到包含它的块结束。</li>\n<li>局部变量必须声明才可以使用。</li>\n<li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li>\n<li>for循环的初始化部分声明的变量，其作用范围在整个循环。</li>\n<li>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li>\n<li>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</li>\n</ul>\n<h3 id=\"17-10-命令行参数的使用\"><a href=\"#17-10-命令行参数的使用\" class=\"headerlink\" title=\"17-10 命令行参数的使用\"></a>17-10 命令行参数的使用</h3><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p>\n<p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p>\n<p>下面的程序打印所有的命令行参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLine.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommandLine</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;args.length; i++)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;args[&quot;</span> + i + <span class=\"string\">&quot;]: &quot;</span> + args[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，运行这个程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac CommandLine.java </span><br><span class=\"line\">$ java CommandLine this is a command line 200 -100</span><br><span class=\"line\">args[0]: this</span><br><span class=\"line\">args[1]: is</span><br><span class=\"line\">args[2]: a</span><br><span class=\"line\">args[3]: command</span><br><span class=\"line\">args[4]: line</span><br><span class=\"line\">args[5]: 200</span><br><span class=\"line\">args[6]: -100</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"17-11-构造方法\"><a href=\"#17-11-构造方法\" class=\"headerlink\" title=\"17-11 构造方法\"></a>17-11 构造方法</h3><ul>\n<li>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</li>\n<li>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</li>\n<li>不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</li>\n<li>一旦你定义了自己的构造方法，默认构造方法就会失效。</li>\n</ul>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass() &#123;</span><br><span class=\"line\">    x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多时候需要一个有参数的构造方法。</p>\n<p><strong>实例</strong></p>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass(<span class=\"type\">int</span> i ) &#123;</span><br><span class=\"line\">    x = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">10</span> );</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">20</span> );</span><br><span class=\"line\">    System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-12-可变参数\"><a href=\"#17-12-可变参数\" class=\"headerlink\" title=\"17-12 可变参数\"></a>17-12 可变参数</h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>\n<p>方法的可变参数的声明如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName... parameterName</span><br></pre></td></tr></table></figure>\n\n<p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p>\n<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VarargsDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用可变参数的方法</span></span><br><span class=\"line\">        printMax(<span class=\"number\">34</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">56.5</span>);</span><br><span class=\"line\">        printMax(<span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">( <span class=\"type\">double</span>... numbers)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No argument passed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> numbers[<span class=\"number\">0</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;  numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class=\"line\">                result = numbers[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The max value is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The max value is 56.5</span><br><span class=\"line\">The max value is 3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-13-finalize-方法\"><a href=\"#17-13-finalize-方法\" class=\"headerlink\" title=\"17-13 finalize() 方法\"></a>17-13 finalize() 方法</h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p>\n<p>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p>\n<p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p>\n<p>finalize() 一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 在这里终结代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p>\n<p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FinalizationDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalizationDemo</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    c2 = c3 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    System.gc(); <span class=\"comment\">//调用Java垃圾收集器</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cake</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Cake</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is created&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.Throwable &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">super</span>.finalize();  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is disposed&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac FinalizationDemo.java </span><br><span class=\"line\">$ java FinalizationDemo</span><br><span class=\"line\">Cake Object 1is created</span><br><span class=\"line\">Cake Object 2is created</span><br><span class=\"line\">Cake Object 3is created</span><br><span class=\"line\">Cake Object 3is disposed</span><br><span class=\"line\">Cake Object 2is disposed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18，Java-流-Stream-、文件-File-和IO\"><a href=\"#18，Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"18，Java 流(Stream)、文件(File)和IO\"></a>18，Java 流(Stream)、文件(File)和IO</h2><ul>\n<li>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</li>\n<li>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</li>\n<li>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</li>\n<li>Java 为 I&#x2F;O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</li>\n<li>但本节讲述最基本的和流与 I&#x2F;O 相关的功能。我们将通过一个个例子来学习这些功能。</li>\n</ul>\n<h3 id=\"18-1-读取控制台输入\"><a href=\"#18-1-读取控制台输入\" class=\"headerlink\" title=\"18-1 读取控制台输入\"></a>18-1 读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<p>下面是创建 BufferedReader 的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> </span><br><span class=\"line\">                      <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure>\n\n<p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p>\n<h3 id=\"18-2-从控制台读取多字符输入\"><a href=\"#18-2-从控制台读取多字符输入\" class=\"headerlink\" title=\"18-2 从控制台读取多字符输入\"></a>18-2 从控制台读取多字符输入</h3><p>从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。</p>\n<p>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 “q”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BRRead.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRRead</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取字符</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            c = (<span class=\"type\">char</span>) br.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (c != <span class=\"string\">&#x27;q&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入字符, 按下 &#x27;q&#x27; 键退出。</span><br><span class=\"line\">runoob</span><br><span class=\"line\">r</span><br><span class=\"line\">u</span><br><span class=\"line\">n</span><br><span class=\"line\">o</span><br><span class=\"line\">o</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q</span><br><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-3-从控制台读取字符串\"><a href=\"#18-3-从控制台读取字符串\" class=\"headerlink\" title=\"18-3 从控制台读取字符串\"></a>18-3 从控制台读取字符串</h3><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。</p>\n<p>它的一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">readLine</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>下面的程序读取和显示字符行直到你输入了单词”end”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRReadLines</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter lines of text.&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter &#x27;end&#x27; to quit.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter lines of text.</span><br><span class=\"line\">Enter &#x27;end&#x27; to quit.</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>‘) 类来获取控制台的输入。</p>\n</blockquote>\n<h3 id=\"18-4-控制台输出\"><a href=\"#18-4-控制台输出\" class=\"headerlink\" title=\"18-4 控制台输出\"></a>18-4 控制台输出</h3><p>在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<p>PrintStream 定义 write() 的最简单格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> byteval)</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将 byteval 的低八位字节写到流中。</p>\n<p>下面的例子用 write() 把字符 “A” 和紧跟着的换行符输出到屏幕：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteDemo.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//演示 System.out.write().</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriteDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b;</span><br><span class=\"line\">        b = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        System.out.write(b);</span><br><span class=\"line\">        System.out.write(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上实例在输出窗口输出 “A” 字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"18-5-读写文件\"><a href=\"#18-5-读写文件\" class=\"headerlink\" title=\"18-5 读写文件\"></a>18-5 读写文件</h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p>\n<h4 id=\"18-5-1-FileInputStream\"><a href=\"#18-5-1-FileInputStream\" class=\"headerlink\" title=\"18-5-1 FileInputStream\"></a>18-5-1 FileInputStream</h4><ul>\n<li>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</li>\n<li>有多种构造方法可用来创建对象。</li>\n<li>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); <span class=\"type\">InputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。</li>\n</ul>\n<p><img src=\"/http://localhost:4000//image-20240228231544486.png\" alt=\"image-20240228231544486\"></p>\n<p>除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>‘)</li>\n<li>[DataInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>‘)</li>\n</ul>\n<hr>\n<h4 id=\"18-5-2-FileOutputStream\"><a href=\"#18-5-2-FileOutputStream\" class=\"headerlink\" title=\"18-5-2 FileOutputStream\"></a>18-5-2 FileOutputStream</h4><p>该类用来创建一个文件并向文件中写数据。</p>\n<p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p>\n<p>有两个构造方法可以用来创建 FileOutputStream 对象。</p>\n<p>使用字符串类型的文件名来创建一个输出流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); </span><br><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<p>创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。</p>\n<p><img src=\"/http://localhost:4000//image-20240228231647489.png\" alt=\"image-20240228231647489\"></p>\n<p>除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>‘)</li>\n<li>[DataOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>‘)</li>\n</ul>\n<p>下面是一个演示 InputStream 和 OutputStream 用法的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fileStreamTest.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span> bWrite[] = &#123; <span class=\"number\">11</span>, <span class=\"number\">21</span>, <span class=\"number\">3</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class=\"line\">                os.write(bWrite[x]); <span class=\"comment\">// writes the bytes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> is.available();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) is.read() + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。</p>\n<p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileStreamTest2.java 文件代码：</span><br><span class=\"line\"><span class=\"comment\">//文件名 :fileStreamTest2.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fop, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;中文输入&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写入到缓冲区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fop.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输出流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileInputStream对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fip, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader.ready()) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"type\">char</span>) reader.read());</span><br><span class=\"line\">            <span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fip.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-6-文件和I-O\"><a href=\"#18-6-文件和I-O\" class=\"headerlink\" title=\"18-6 文件和I&#x2F;O\"></a>18-6 文件和I&#x2F;O</h3><p>还有一些关于文件和I&#x2F;O的类，我们也需要知道：</p>\n<ul>\n<li>[File Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>‘)</li>\n<li>[FileReader Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>‘)</li>\n<li>[FileWriter Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>‘)</li>\n</ul>\n<hr>\n<h3 id=\"18-7-Java中的目录\"><a href=\"#18-7-Java中的目录\" class=\"headerlink\" title=\"18-7 Java中的目录\"></a>18-7 Java中的目录</h3><h4 id=\"18-7-1-创建目录：\"><a href=\"#18-7-1-创建目录：\" class=\"headerlink\" title=\"18-7-1 创建目录：\"></a>18-7-1 创建目录：</h4><p>File类中有两个方法可以用来创建文件夹：</p>\n<ul>\n<li>**mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li>\n<li>**mkdirs()**方法创建一个文件夹和它的所有父文件夹。</li>\n</ul>\n<p>下面的例子创建 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”文件夹：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CreateDir.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDir</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp/user//images/bin&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"comment\">// 现在创建目录</span></span><br><span class=\"line\">        d.mkdirs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并执行上面代码来创建目录 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”。</p>\n<p><strong>注意：</strong> Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (&#x2F;) ，路径依然能够被正确解析。</p>\n<h4 id=\"18-7-2-读取目录\"><a href=\"#18-7-2-读取目录\" class=\"headerlink\" title=\"18-7-2 读取目录\"></a>18-7-2 读取目录</h4><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。</p>\n<p>如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。</p>\n<p>可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p>\n<p>下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DirList.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f1.isDirectory()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;目录 &quot;</span> + dirname);</span><br><span class=\"line\">            String s[] = f1.list();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname + <span class=\"string\">&quot;/&quot;</span> + s[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个目录&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个文件&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(dirname + <span class=\"string\">&quot; 不是一个目录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录 /tmp</span><br><span class=\"line\">bin 是一个目录</span><br><span class=\"line\">lib 是一个目录</span><br><span class=\"line\">demo 是一个目录</span><br><span class=\"line\">test.txt 是一个文件</span><br><span class=\"line\">README 是一个文件</span><br><span class=\"line\">index.html 是一个文件</span><br><span class=\"line\">include 是一个目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-7-3-删除目录或文件\"><a href=\"#18-7-3-删除目录或文件\" class=\"headerlink\" title=\"18-7-3 删除目录或文件\"></a>18-7-3 删除目录或文件</h4><p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。</p>\n<p>以下代码会删除目录 <strong>&#x2F;tmp&#x2F;&#x2F;images&#x2F;</strong>，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p>\n<p>测试目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp//images/</span><br><span class=\"line\">|-- 1.log</span><br><span class=\"line\">|-- test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeleteFileDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里修改为自己的测试目录</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp//images/&quot;</span>);</span><br><span class=\"line\">        deleteFolder(folder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 删除文件及目录</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteFolder</span><span class=\"params\">(File folder)</span> &#123;</span><br><span class=\"line\">        File[] files = folder.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    deleteFolder(f);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        folder.delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19，Java-Scanner-类\"><a href=\"#19，Java-Scanner-类\" class=\"headerlink\" title=\"19，Java Scanner 类\"></a>19，Java Scanner 类</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p>\n<p>下面是创建 Scanner 对象的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>\n<h3 id=\"19-1-使用-next-方法：\"><a href=\"#19-1-使用-next-方法：\" class=\"headerlink\" title=\"19-1 使用 next 方法：\"></a>19-1 使用 next 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// next方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> scan.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">next方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串并未输出，接下来我们看 nextLine。</p>\n<h3 id=\"19-2-使用-nextLine-方法：\"><a href=\"#19-2-使用-nextLine-方法：\" class=\"headerlink\" title=\"19-2 使用 nextLine 方法：\"></a>19-2 使用 nextLine 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// nextLine方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;nextLine方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextLine()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">nextLine方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串输出。</p>\n<h3 id=\"19-3-next-与-nextLine-区别\"><a href=\"#19-3-next-与-nextLine-区别\" class=\"headerlink\" title=\"19-3 next() 与 nextLine() 区别\"></a>19-3 next() 与 nextLine() 区别</h3><p>next():</p>\n<ul>\n<li>1、一定要读取到有效字符后才可以结束输入。</li>\n<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>\n<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>\n<li>next() 不能得到带有空格的字符串。</li>\n</ul>\n<p>nextLine()：</p>\n<ul>\n<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>\n<li>2、可以获得空白。</li>\n</ul>\n<p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextInt()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是整数</span></span><br><span class=\"line\">            i = scan.nextInt();</span><br><span class=\"line\">            <span class=\"comment\">// 接收整数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;整数数据：&quot;</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是整数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入小数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextFloat()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是小数</span></span><br><span class=\"line\">            f = scan.nextFloat();</span><br><span class=\"line\">            <span class=\"comment\">// 接收小数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;小数数据：&quot;</span> + f);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是小数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">输入整数：12</span><br><span class=\"line\">整数数据：12</span><br><span class=\"line\">输入小数：1.2</span><br><span class=\"line\">小数数据：1.2</span><br></pre></td></tr></table></figure>\n\n<p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scan.hasNextDouble()) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scan.nextDouble();</span><br><span class=\"line\">            m = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            sum = sum + x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的和为&quot;</span> + sum);</span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">21.4</span></span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">4</span>个数的和为<span class=\"number\">71.4</span></span><br><span class=\"line\"><span class=\"number\">4</span>个数的平均值是<span class=\"number\">17.85</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20，Java异常处理\"><a href=\"#20，Java异常处理\" class=\"headerlink\" title=\"20，Java异常处理\"></a>20，Java异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11&#x2F;0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li>**检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查</li>\n</ul>\n<h3 id=\"20-1-异常方法\"><a href=\"#20-1-异常方法\" class=\"headerlink\" title=\"20-1 异常方法\"></a>20-1 异常方法</h3><p><img src=\"/http://localhost:4000//image-20240228232401552.png\" alt=\"image-20240228232401552\"></p>\n<h3 id=\"20-2-捕获异常\"><a href=\"#20-2-捕获异常\" class=\"headerlink\" title=\"20-2 捕获异常\"></a>20-2 捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try&#x2F;catch 代码块放在异常可能发生的地方。</p>\n<p>try&#x2F;catch代码块中的代码称为保护代码，使用 try&#x2F;catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ExceptionName e1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcepTest.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名 : ExcepTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Out of the block&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">Out of the block</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-多重捕获块\"><a href=\"#20-3-多重捕获块\" class=\"headerlink\" title=\"20-3 多重捕获块\"></a>20-3 多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<p>多重捕获块的语法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的代码段包含了 3 个 catch块。</li>\n<li>可以在 try 语句后面添加任意数量的 catch 块。</li>\n<li>如果保护代码中发生异常，异常被抛给第一个 catch 块。</li>\n<li>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</li>\n<li>如果不匹配，它会被传递给第二个 catch 块。</li>\n<li>如此，直到异常被捕获或者通过所有的 catch 块。</li>\n</ul>\n<p>该实例展示了怎么使用多重 try&#x2F;catch。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    file = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName);</span><br><span class=\"line\">    x = (<span class=\"type\">byte</span>) file.read();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotFoundException f) &#123; <span class=\"comment\">// Not valid!</span></span><br><span class=\"line\">    f.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(IOException i) &#123;</span><br><span class=\"line\">    i.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-throws-throw-关键字：\"><a href=\"#20-4-throws-throw-关键字：\" class=\"headerlink\" title=\"20-4 throws&#x2F;throw 关键字：\"></a>20-4 throws&#x2F;throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteException</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException,</span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-5-finally关键字\"><a href=\"#20-5-finally关键字\" class=\"headerlink\" title=\"20-5 finally关键字\"></a>20-5 finally关键字</h3><ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li>\n<li>无论是否发生异常，finally 代码块中的代码总会被执行。</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExcepTest.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       a[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;First element value: &quot;</span> +a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;The finally statement is executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">First element value: 6</span><br><span class=\"line\">The finally statement is executed</span><br></pre></td></tr></table></figure>\n\n<p>注意下面事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try&#x2F;catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h3 id=\"20-6-声明自定义异常\"><a href=\"#20-6-声明自定义异常\" class=\"headerlink\" title=\"20-6 声明自定义异常\"></a>20-6 声明自定义异常</h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<p>可以像下面这样定义自己的异常类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只继承Exception 类来创建的异常类是检查性异常类。</li>\n<li>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。</li>\n<li>一个异常类和其它任何类一样，包含有变量和方法。</li>\n</ul>\n<p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// InsufficientFundsException.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名InsufficientFundsException.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义异常类，继承Exception类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsufficientFundsException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">double</span> amount;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">InsufficientFundsException</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.amount = amount;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAmount</span><span class=\"params\">()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示如何使用我们自定义的异常类，</p>\n<p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名称 CheckingAccount.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//此类模拟银行账户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckingAccount</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//balance为余额，number为卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> number;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CheckingAccount</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：存钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      balance += amount;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：取钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(amount &lt;= balance)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         balance -= amount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"type\">double</span> <span class=\"variable\">needs</span> <span class=\"operator\">=</span> amount - balance;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InsufficientFundsException</span>(needs);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回余额</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名称 BankDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String [] args)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">CheckingAccount</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckingAccount</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Depositing $500...&quot;</span>);</span><br><span class=\"line\">      c.deposit(<span class=\"number\">500.00</span>);</span><br><span class=\"line\">      <span class=\"keyword\">try</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $100...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">100.00</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $600...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">600.00</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(InsufficientFundsException e)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Sorry, but you are short $&quot;</span></span><br><span class=\"line\">                                  + e.getAmount());</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Depositing $500...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $100...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $600...</span><br><span class=\"line\">Sorry, but you are short $200.0</span><br><span class=\"line\">InsufficientFundsException</span><br><span class=\"line\">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span><br><span class=\"line\">        at BankDemo.main(BankDemo.java:13)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-7-通用异常\"><a href=\"#20-7-通用异常\" class=\"headerlink\" title=\"20-7 通用异常\"></a>20-7 通用异常</h3><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java**<strong>虚拟机</strong></strong>)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li>**程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"1，Java基础语法\"><a href=\"#1，Java基础语法\" class=\"headerlink\" title=\"1，Java基础语法\"></a>1，Java基础语法</h2><p>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</p>\n<ul>\n<li><strong>对象</strong>：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li>\n<li><strong>类</strong>：类是一个模板，它描述一类对象的行为和状态。</li>\n<li><strong>方法</strong>：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。</li>\n<li><strong>实例变量</strong>：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li>\n</ul>\n<h3 id=\"1-1-第一个Java程序\"><a href=\"#1-1-第一个Java程序\" class=\"headerlink\" title=\"1-1 第一个Java程序\"></a>1-1 第一个Java程序</h3><p>下面看一个简单的 Java 程序，它将打印字符串 <em>Hello World</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">     * 它将打印字符串 Hello World</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); <span class=\"comment\">// 打印 Hello World</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面将逐步介绍如何保存、编译以及运行这个程序：</p>\n<ul>\n<li>打开代码编辑器，把上面的代码添加进去；</li>\n<li>把文件名保存为：HelloWorld.java；</li>\n<li>打开 cmd 命令窗口，进入目标文件所在的位置，假设是 C:\\</li>\n<li>在命令行窗口输入 <strong>javac HelloWorld.java</strong> 按下回车键编译代码。如果代码没有错误，cmd 命令提示符会进入下一行（假设环境变量都设置好了）。</li>\n<li>再键输入 <strong>java HelloWorld</strong> 按下回车键就可以运行程序了</li>\n</ul>\n<p>你将会在窗口看到 Hello World</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C : &gt; javac HelloWorld.java</span><br><span class=\"line\">C : &gt; java HelloWorld </span><br><span class=\"line\">Hello World</span><br></pre></td></tr></table></figure>\n\n<p>Gif 图演示：</p>\n<p><img src=\"/images/images/java-HelloWorld.gif\" alt=\"img\"></p>\n<h3 id=\"1-2-基本语法\"><a href=\"#1-2-基本语法\" class=\"headerlink\" title=\"1-2 基本语法\"></a>1-2 基本语法</h3><p>编写 Java 程序时，应注意以下几点：</p>\n<ul>\n<li><strong>大小写敏感</strong>：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li>\n<li><strong>类名</strong>：对于所有的类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母应该大写，例如 <strong>MyFirstJavaClass</strong> 。</li>\n<li><strong>方法名</strong>：所有的方法名都应该以小写字母开头。如果方法名含有若干单词，则后面的每个单词首字母大写。</li>\n<li><strong>源文件名</strong>：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存（切记 Java 是大小写敏感的），文件名的后缀为 <strong>.java</strong>。（如果文件名和类名不相同则会导致编译错误）。</li>\n<li><strong>主方法入口</strong>：所有的 Java 程序由 <strong>public static void main(String []args)</strong> 方法开始执行。</li>\n</ul>\n<h3 id=\"1-3-Java-标识符\"><a href=\"#1-3-Java-标识符\" class=\"headerlink\" title=\"1-3 Java 标识符\"></a>1-3 Java 标识符</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p>\n<p>关于 Java 标识符，有以下几点需要注意：</p>\n<ul>\n<li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</li>\n<li>首字符之后可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li>\n<li>关键字不能用作标识符</li>\n<li>标识符是大小写敏感的</li>\n<li>合法标识符举例：age、$salary、_value、__1_value</li>\n<li>非法标识符举例：123abc、-salary</li>\n</ul>\n<h3 id=\"1-4-Java修饰符\"><a href=\"#1-4-Java修饰符\" class=\"headerlink\" title=\"1-4 Java修饰符\"></a>1-4 Java修饰符</h3><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p>\n<ul>\n<li>访问控制修饰符 : default, public , protected, private</li>\n<li>非访问控制修饰符 : final, abstract, static, synchronized</li>\n</ul>\n<p>在后面的章节中我们会深入讨论 Java 修饰符。</p>\n<h3 id=\"1-5-Java-变量\"><a href=\"#1-5-Java-变量\" class=\"headerlink\" title=\"1-5 Java 变量\"></a>1-5 Java 变量</h3><p>Java 中主要有如下几种类型的变量</p>\n<ul>\n<li>局部变量</li>\n<li>类变量（静态变量）</li>\n<li>成员变量（非静态变量）</li>\n</ul>\n<h3 id=\"1-6-Java-数组\"><a href=\"#1-6-Java-数组\" class=\"headerlink\" title=\"1-6 Java 数组\"></a>1-6 Java 数组</h3><p>数组是储存在堆上的对象，可以保存多个同类型变量。在后面的章节中，我们将会学到如何声明、构造以及初始化一个数组。</p>\n<h3 id=\"1-7-Java-枚举\"><a href=\"#1-7-Java-枚举\" class=\"headerlink\" title=\"1-7 Java 枚举\"></a>1-7 Java 枚举</h3><p>ava 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</p>\n<p>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuice</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">enum</span> <span class=\"title class_\">FreshJuiceSize</span>&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class=\"line\">   FreshJuiceSize size;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FreshJuiceTest</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">FreshJuice</span> <span class=\"variable\">juice</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FreshJuice</span>();</span><br><span class=\"line\">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-8-Java-关键字\"><a href=\"#1-8-Java-关键字\" class=\"headerlink\" title=\"1-8 Java 关键字\"></a>1-8 Java 关键字</h3><p><img src=\"/images/image-20240228195010033.png\" alt=\"image-20240228195010033\"></p>\n<h3 id=\"1-9-Java注释\"><a href=\"#1-9-Java注释\" class=\"headerlink\" title=\"1-9 Java注释\"></a>1-9 Java注释</h3><p>类似于 C&#x2F;C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/* 这是第一个Java程序</span></span><br><span class=\"line\"><span class=\"comment\">    *它将打印Hello World</span></span><br><span class=\"line\"><span class=\"comment\">    * 这是一个多行注释的示例</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String []args)</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 这是单行注释的示例</span></span><br><span class=\"line\">       <span class=\"comment\">/* 这个也是单行注释的示例 */</span></span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Hello World&quot;</span>); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-10-Java-空行\"><a href=\"#1-10-Java-空行\" class=\"headerlink\" title=\"1-10 Java 空行\"></a>1-10 Java 空行</h3><p>空白行或者有注释的行，Java 编译器都会忽略掉。</p>\n<h3 id=\"1-11-继承\"><a href=\"#1-11-继承\" class=\"headerlink\" title=\"1-11 继承\"></a>1-11 继承</h3><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p>\n<p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。被继承的类称为超类（super class），派生类称为子类（subclass）。</p>\n<hr>\n<h3 id=\"1-12-接口\"><a href=\"#1-12-接口\" class=\"headerlink\" title=\"1-12 接口\"></a>1-12 接口</h3><p>在 Java 中，接口可理解为对象间相互通信的协议。接口在继承中扮演着很重要的角色。</p>\n<p>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类。</p>\n<h2 id=\"2，Java对象和类\"><a href=\"#2，Java对象和类\" class=\"headerlink\" title=\"2，Java对象和类\"></a>2，Java对象和类</h2><h3 id=\"2-1-Java中的对象\"><a href=\"#2-1-Java中的对象\" class=\"headerlink\" title=\"2-1 Java中的对象\"></a>2-1 Java中的对象</h3><p>现在让我们深入了解什么是对象。看看周围真实的世界，会发现身边有很多对象，车，狗，人等等。所有这些对象都有自己的状态和行为。</p>\n<p>拿一条狗来举例，它的状态有：名字、品种、颜色，行为有：叫、摇尾巴和跑。</p>\n<p>对比现实对象和软件对象，它们之间十分相似。</p>\n<p>软件对象也有状态和行为。软件对象的状态就是属性，行为通过方法体现。</p>\n<p>在软件开发中，方法操作对象内部状态的改变，对象的相互调用也是通过方法来完成。</p>\n<h3 id=\"2-2-Java中的类\"><a href=\"#2-2-Java中的类\" class=\"headerlink\" title=\"2-2 Java中的类\"></a>2-2 Java中的类</h3><p>类可以看成是创建Java对象的模板。</p>\n<p>通过下面一个简单的类来理解下Java中类的定义：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span>&#123;</span><br><span class=\"line\">  String breed;</span><br><span class=\"line\">  <span class=\"type\">int</span> age;</span><br><span class=\"line\">  String color;</span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">barking</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">void</span> <span class=\"title function_\">sleeping</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个类可以包含以下类型变量：</p>\n<ul>\n<li><strong>局部变量</strong>：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</li>\n<li><strong>成员变量</strong>：成员变量是定义在类中，方法体之外的变量。这种变量在创建对象的时候实例化。成员变量可以被类中方法、构造方法和特定类的语句块访问。</li>\n<li><strong>类变量</strong>：类变量也声明在类中，方法体之外，但必须声明为static类型。</li>\n</ul>\n<p>一个类可以拥有多个方法，在上面的例子中：barking()、hungry()和sleeping()都是Dog类的方法。</p>\n<hr>\n<h3 id=\"2-3-构造方法\"><a href=\"#2-3-构造方法\" class=\"headerlink\" title=\"2-3 构造方法\"></a>2-3 构造方法</h3><p>每个类都有构造方法。如果没有显式地为类定义构造方法，Java编译器将会为该类提供一个默认构造方法。</p>\n<p>在创建一个对象的时候，至少要调用一个构造方法。构造方法的名称必须与类同名，一个类可以有多个构造方法。</p>\n<p>下面是一个构造方法示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-4-创建对象\"><a href=\"#2-4-创建对象\" class=\"headerlink\" title=\"2-4 创建对象\"></a>2-4 创建对象</h3><p>对象是根据类创建的。在Java中，使用关键字new来创建一个新的对象。创建对象需要以下三步：</p>\n<ul>\n<li><strong>声明</strong>：声明一个对象，包括对象名称和对象类型。</li>\n<li><strong>实例化</strong>：使用关键字new来创建一个对象。</li>\n<li><strong>初始化</strong>：使用new创建对象时，会调用构造方法初始化对象。</li>\n</ul>\n<p>下面是一个创建对象的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 下面的语句将创建一个Puppy对象</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，会打印出下面的结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-5-访问实例变量和方法\"><a href=\"#2-5-访问实例变量和方法\" class=\"headerlink\" title=\"2-5 访问实例变量和方法\"></a>2-5 访问实例变量和方法</h3><p>通过已创建的对象来访问成员变量和成员方法，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 实例化对象 */</span></span><br><span class=\"line\"><span class=\"type\">Object</span> <span class=\"variable\">referenceVariable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Constructor</span>();</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的变量 */</span></span><br><span class=\"line\">referenceVariable.variableName;</span><br><span class=\"line\"><span class=\"comment\">/* 访问类中的方法 */</span></span><br><span class=\"line\">referenceVariable.methodName();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-6-实例\"><a href=\"#2-6-实例\" class=\"headerlink\" title=\"2-6 实例\"></a>2-6 实例</h3><p>下面的例子展示如何访问实例变量和调用成员方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Puppy</span>&#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> puppyAge;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Puppy</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这个构造器仅有一个参数：name</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的名字是 : &quot;</span> + name ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">( <span class=\"type\">int</span> age )</span>&#123;</span><br><span class=\"line\">       puppyAge = age;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">( )</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;小狗的年龄为 : &quot;</span> + puppyAge ); </span><br><span class=\"line\">       <span class=\"keyword\">return</span> puppyAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 创建对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Puppy</span> <span class=\"variable\">myPuppy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Puppy</span>( <span class=\"string\">&quot;tommy&quot;</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 通过方法来设定age */</span></span><br><span class=\"line\">      myPuppy.setAge( <span class=\"number\">2</span> );</span><br><span class=\"line\">      <span class=\"comment\">/* 调用另一个方法获取age */</span></span><br><span class=\"line\">      myPuppy.getAge( );</span><br><span class=\"line\">      <span class=\"comment\">/*你也可以像下面这样访问成员变量 */</span></span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;变量值 : &quot;</span> + myPuppy.puppyAge ); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并运行上面的程序，产生如下结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的名字是 : tommy</span><br><span class=\"line\">小狗的年龄为 : 2</span><br><span class=\"line\">变量值 : 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-7-源文件声明规则\"><a href=\"#2-7-源文件声明规则\" class=\"headerlink\" title=\"2-7 源文件声明规则\"></a>2-7 源文件声明规则</h3><p>在本节的最后部分，我们将学习源文件的声明规则。当在一个源文件中定义多个类，并且还有import语句和package语句时，要特别注意这些规则。</p>\n<ul>\n<li>一个源文件中只能有一个public类</li>\n<li>一个源文件可以有多个非public类</li>\n<li>源文件的名称应该和public类的类名保持一致。例如：源文件中public类的类名是Employee，那么源文件应该命名为Employee.java。</li>\n<li>如果一个类定义在某个包中，那么package语句应该在源文件的首行。</li>\n<li>如果源文件包含import语句，那么应该放在package语句和类定义之间。如果没有package语句，那么import语句应该在源文件中最前面。</li>\n<li>import语句和package语句对源文件中定义的所有类都有效。在同一源文件中，不能给不同的类不同的包声明。</li>\n</ul>\n<p>类有若干种访问级别，并且类也分不同的类型：抽象类和final类等。这些将在访问控制章节介绍。</p>\n<p>除了上面提到的几种类型，Java还有一些特殊的类，如：内部类、匿名类。</p>\n<h3 id=\"2-8-Java包\"><a href=\"#2-8-Java包\" class=\"headerlink\" title=\"2-8 Java包\"></a>2-8 Java包</h3><p>包主要用来对类和接口进行分类。当开发Java程序时，可能编写成百上千的类，因此很有必要对类和接口进行分类。</p>\n<h3 id=\"2-9-Import语句\"><a href=\"#2-9-Import语句\" class=\"headerlink\" title=\"2-9 Import语句\"></a>2-9 Import语句</h3><p>在Java中，如果给出一个完整的限定名，包括包名、类名，那么Java编译器就可以很容易地定位到源代码或者类。Import语句就是用来提供一个合理的路径，使得编译器可以找到某个类。</p>\n<p>例如，下面的命令行将会命令编译器载入java_installation&#x2F;&#x2F;images&#x2F;io路径下的所有类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-10-一个简单的例子\"><a href=\"#2-10-一个简单的例子\" class=\"headerlink\" title=\"2-10 一个简单的例子\"></a>2-10 一个简单的例子</h3><p>在该例子中，我们创建两个类：<strong>Employee</strong> 和 <strong>EmployeeTest</strong>。</p>\n<p>首先打开文本编辑器，把下面的代码粘贴进去。注意将文件保存为 Employee.java。</p>\n<p>Employee类有四个成员变量：name、age、designation和salary。该类显式声明了一个构造方法，该方法只有一个参数。</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   String name;</span><br><span class=\"line\">   <span class=\"type\">int</span> age;</span><br><span class=\"line\">   String designation;</span><br><span class=\"line\">   <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">// Employee 类的构造器</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 设置age的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empAge</span><span class=\"params\">(<span class=\"type\">int</span> empAge)</span>&#123;</span><br><span class=\"line\">      age =  empAge;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置designation的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empDesignation</span><span class=\"params\">(String empDesig)</span>&#123;</span><br><span class=\"line\">      designation = empDesig;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 设置salary的值*/</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">empSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSalary)</span>&#123;</span><br><span class=\"line\">      salary = empSalary;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">/* 打印信息 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmployee</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字:&quot;</span>+ name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;年龄:&quot;</span> + age );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;职位:&quot;</span> + designation );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水:&quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>程序都是从main方法开始执行。为了能运行这个程序，必须包含main方法并且创建一个实例对象。</p>\n<p>下面给出EmployeeTest类，该类实例化2个 Employee 类的实例，并调用方法设置变量的值。</p>\n<p>将下面的代码保存在 EmployeeTest.java文件中。</p>\n<p><strong>EmployeeTest.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmployeeTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">/* 使用构造器创建两个对象 */</span></span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB1&quot;</span>);</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empTwo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB2&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 调用这两个对象的成员方法</span></span><br><span class=\"line\">      empOne.empAge(<span class=\"number\">26</span>);</span><br><span class=\"line\">      empOne.empDesignation(<span class=\"string\">&quot;高级程序员&quot;</span>);</span><br><span class=\"line\">      empOne.empSalary(<span class=\"number\">1000</span>);</span><br><span class=\"line\">      empOne.printEmployee();</span><br><span class=\"line\"> </span><br><span class=\"line\">      empTwo.empAge(<span class=\"number\">21</span>);</span><br><span class=\"line\">      empTwo.empDesignation(<span class=\"string\">&quot;菜鸟程序员&quot;</span>);</span><br><span class=\"line\">      empTwo.empSalary(<span class=\"number\">500</span>);</span><br><span class=\"line\">      empTwo.printEmployee();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译这两个文件并且运行 EmployeeTest 类，可以看到如下结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac EmployeeTest.java</span><br><span class=\"line\">$ java EmployeeTest </span><br><span class=\"line\">名字:RUNOOB1</span><br><span class=\"line\">年龄:<span class=\"number\">26</span></span><br><span class=\"line\">职位:高级程序员</span><br><span class=\"line\">薪水:<span class=\"number\">1000.0</span></span><br><span class=\"line\">名字:RUNOOB2</span><br><span class=\"line\">年龄:<span class=\"number\">21</span></span><br><span class=\"line\">职位:菜鸟程序员</span><br><span class=\"line\">薪水:<span class=\"number\">500.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3，Java基本数据类型\"><a href=\"#3，Java基本数据类型\" class=\"headerlink\" title=\"3，Java基本数据类型\"></a>3，Java基本数据类型</h2><h3 id=\"3-1-内置数据类型\"><a href=\"#3-1-内置数据类型\" class=\"headerlink\" title=\"3-1 内置数据类型\"></a>3-1 内置数据类型</h3><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p>\n<h4 id=\"3-1-1-byte：\"><a href=\"#3-1-1-byte：\" class=\"headerlink\" title=\"3-1-1 byte：\"></a>3-1-1 <strong>byte：</strong></h4><ul>\n<li>byte 数据类型是8位、有符号的，以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-128（-2^7）</strong>；</li>\n<li>最大值是 <strong>127（2^7-1）</strong>；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>byte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；</li>\n<li>例子：byte a &#x3D; 100，byte b &#x3D; -50。</li>\n</ul>\n<h4 id=\"3-1-2-short：\"><a href=\"#3-1-2-short：\" class=\"headerlink\" title=\"3-1-2 short：\"></a>3-1-2 <strong>short：</strong></h4><ul>\n<li>short 数据类型是 16 位、有符号的以二进制补码表示的整数</li>\n<li>最小值是 <strong>-32768（-2^15）</strong>；</li>\n<li>最大值是 <strong>32767（2^15 - 1）</strong>；</li>\n<li>Short 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；</li>\n<li>默认值是 <strong>0</strong>；</li>\n<li>例子：short s &#x3D; 1000，short r &#x3D; -20000。</li>\n</ul>\n<h4 id=\"3-1-3-int：\"><a href=\"#3-1-3-int：\" class=\"headerlink\" title=\"3-1-3 int：\"></a>3-1-3 <strong>int：</strong></h4><ul>\n<li>int 数据类型是32位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-2,147,483,648（-2^31）</strong>；</li>\n<li>最大值是 <strong>2,147,483,647（2^31 - 1）</strong>；</li>\n<li>一般地整型变量默认为 int 类型；</li>\n<li>默认值是 <strong>0</strong> ；</li>\n<li>例子：int a &#x3D; 100000, int b &#x3D; -200000。</li>\n</ul>\n<h4 id=\"3-1-4-long：\"><a href=\"#3-1-4-long：\" class=\"headerlink\" title=\"3-1-4 long：\"></a>3-1-4 <strong>long：</strong></h4><ul>\n<li>long 数据类型是 64 位、有符号的以二进制补码表示的整数；</li>\n<li>最小值是 <strong>-9,223,372,036,854,775,808（-2^63）</strong>；</li>\n<li>最大值是 <strong>9,223,372,036,854,775,807（2^63 -1）</strong>；</li>\n<li>这种类型主要使用在需要比较大整数的系统上；</li>\n<li>默认值是 <strong>0L</strong>；</li>\n<li>例子： long a &#x3D; 100000L，Long b &#x3D; -200000L。<br>“L”理论上不分大小写，但是若写成”l”容易与数字”1”混淆，不容易分辩。所以最好大写。</li>\n</ul>\n<h4 id=\"3-1-5-float：\"><a href=\"#3-1-5-float：\" class=\"headerlink\" title=\"3-1-5 float：\"></a>3-1-5 <strong>float：</strong></h4><ul>\n<li>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；</li>\n<li>float 在储存大型浮点数组的时候可节省内存空间；</li>\n<li>默认值是 <strong>0.0f</strong>；</li>\n<li>浮点数不能用来表示精确的值，如货币；</li>\n<li>例子：float f1 &#x3D; 234.5f。</li>\n</ul>\n<h4 id=\"3-1-6-double：\"><a href=\"#3-1-6-double：\" class=\"headerlink\" title=\"3-1-6 double：\"></a>3-1-6 <strong>double：</strong></h4><ul>\n<li>double 数据类型是双精度、64 位、符合IEEE 754标准的浮点数；</li>\n<li>浮点数的默认类型为double类型；</li>\n<li>double类型同样不能表示精确的值，如货币；</li>\n<li>默认值是 <strong>0.0d</strong>；</li>\n<li>例子：double d1 &#x3D; 123.4。</li>\n</ul>\n<h4 id=\"3-1-7-boolean：\"><a href=\"#3-1-7-boolean：\" class=\"headerlink\" title=\"3-1-7 boolean：\"></a>3-1-7 <strong>boolean：</strong></h4><ul>\n<li>boolean数据类型表示一位的信息；</li>\n<li>只有两个取值：true 和 false；</li>\n<li>这种类型只作为一种标志来记录 true&#x2F;false 情况；</li>\n<li>默认值是 <strong>false</strong>；</li>\n<li>例子：boolean one &#x3D; true。</li>\n</ul>\n<h4 id=\"3-1-8-char：\"><a href=\"#3-1-8-char：\" class=\"headerlink\" title=\"3-1-8 char：\"></a>3-1-8 <strong>char：</strong></h4><ul>\n<li>char类型是一个单一的 16 位 Unicode 字符；</li>\n<li>最小值是 <strong>\\u0000</strong>（即为0）；</li>\n<li>最大值是 <strong>\\uffff</strong>（即为65,535）；</li>\n<li>char 数据类型可以储存任何字符；</li>\n<li>例子：char letter &#x3D; ‘A’;。</li>\n</ul>\n<h3 id=\"3-2-实例\"><a href=\"#3-2-实例\" class=\"headerlink\" title=\"3-2 实例\"></a>3-2 实例</h3><p>对于数值类型的基本类型的取值范围，我们无需强制去记忆，因为它们的值都已经以常量的形式定义在对应的包装类中了。请看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PrimitiveTypeTest</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\">// byte  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// short  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// int  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// long  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// float  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// double  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class=\"line\">        System.out.println();  </span><br><span class=\"line\">  </span><br><span class=\"line\">        <span class=\"comment\">// char  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MIN_VALUE);  </span><br><span class=\"line\">        <span class=\"comment\">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class=\"line\">                + (<span class=\"type\">int</span>) Character.MAX_VALUE);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译以上代码输出结果如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型：<span class=\"type\">byte</span> 二进制位数：<span class=\"number\">8</span></span><br><span class=\"line\">包装类：java.lang.Byte</span><br><span class=\"line\">最小值：Byte.MIN_VALUE=-<span class=\"number\">128</span></span><br><span class=\"line\">最大值：Byte.MAX_VALUE=<span class=\"number\">127</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">short</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Short</span><br><span class=\"line\">最小值：Short.MIN_VALUE=-<span class=\"number\">32768</span></span><br><span class=\"line\">最大值：Short.MAX_VALUE=<span class=\"number\">32767</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">int</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Integer</span><br><span class=\"line\">最小值：Integer.MIN_VALUE=-<span class=\"number\">2147483648</span></span><br><span class=\"line\">最大值：Integer.MAX_VALUE=<span class=\"number\">2147483647</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">long</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Long</span><br><span class=\"line\">最小值：Long.MIN_VALUE=-<span class=\"number\">9223372036854775808</span></span><br><span class=\"line\">最大值：Long.MAX_VALUE=<span class=\"number\">9223372036854775807</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">float</span> 二进制位数：<span class=\"number\">32</span></span><br><span class=\"line\">包装类：java.lang.Float</span><br><span class=\"line\">最小值：Float.MIN_VALUE=<span class=\"number\">1.4E-45</span></span><br><span class=\"line\">最大值：Float.MAX_VALUE=<span class=\"number\">3.4028235E38</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">double</span> 二进制位数：<span class=\"number\">64</span></span><br><span class=\"line\">包装类：java.lang.Double</span><br><span class=\"line\">最小值：Double.MIN_VALUE=<span class=\"number\">4.9E-324</span></span><br><span class=\"line\">最大值：Double.MAX_VALUE=<span class=\"number\">1.7976931348623157E308</span></span><br><span class=\"line\"></span><br><span class=\"line\">基本类型：<span class=\"type\">char</span> 二进制位数：<span class=\"number\">16</span></span><br><span class=\"line\">包装类：java.lang.Character</span><br><span class=\"line\">最小值：Character.MIN_VALUE=<span class=\"number\">0</span></span><br><span class=\"line\">最大值：Character.MAX_VALUE=<span class=\"number\">65535</span></span><br></pre></td></tr></table></figure>\n\n<p>Float和Double的最小值和最大值都是以科学记数法的形式输出的，结尾的”E+数字”表示E之前的数字要乘以10的多少次方。比如3.14E3就是3.14 × 103 &#x3D;3140，3.14E-3 就是 3.14 x 10-3 &#x3D;0.00314。</p>\n<p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p>\n<h3 id=\"3-3-类型默认值\"><a href=\"#3-3-类型默认值\" class=\"headerlink\" title=\"3-3 类型默认值\"></a>3-3 类型默认值</h3><p>下表列出了 Java 各个类型的默认值：</p>\n<p><img src=\"/images/image-20240228200611781.png\" alt=\"image-20240228200611781\"></p>\n<h3 id=\"3-4-实例\"><a href=\"#3-4-实例\" class=\"headerlink\" title=\"3-4 实例\"></a>3-4 实例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> bool;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">byte</span> by;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">char</span> ch;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">float</span> f;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">long</span> l;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">short</span> sh;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String str;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Bool :&quot;</span> + bool);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Byte :&quot;</span> + by);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Character:&quot;</span> + ch);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Double :&quot;</span> + d);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Float :&quot;</span> + f);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Integer :&quot;</span> + i);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Long :&quot;</span> + l);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Short :&quot;</span> + sh);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;String :&quot;</span> + str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Bool     :<span class=\"literal\">false</span></span><br><span class=\"line\">Byte     :<span class=\"number\">0</span></span><br><span class=\"line\">Character:</span><br><span class=\"line\">Double   :<span class=\"number\">0.0</span></span><br><span class=\"line\">Float    :<span class=\"number\">0.0</span></span><br><span class=\"line\">Integer  :<span class=\"number\">0</span></span><br><span class=\"line\">Long     :<span class=\"number\">0</span></span><br><span class=\"line\">Short    :<span class=\"number\">0</span></span><br><span class=\"line\">String   :<span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-5-引用类型\"><a href=\"#3-5-引用类型\" class=\"headerlink\" title=\"3-5 引用类型\"></a>3-5 引用类型</h3><ul>\n<li>在Java中，引用类型的变量非常类似于C&#x2F;C++的指针。引用类型指向一个对象，指向对象的变量是引用变量。这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li>\n<li>对象、数组都是引用数据类型。</li>\n<li>所有引用类型的默认值都是null。</li>\n<li>一个引用变量可以用来引用任何与之兼容的类型。</li>\n<li>例子：Site site &#x3D; new Site(“Runoob”)。</li>\n</ul>\n<h3 id=\"3-6-Java-常量\"><a href=\"#3-6-Java-常量\" class=\"headerlink\" title=\"3-6 Java 常量\"></a>3-6 Java 常量</h3><p>常量在程序运行时是不能被修改的。</p>\n<p>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">PI</span> <span class=\"operator\">=</span> <span class=\"number\">3.1415927</span>;</span><br></pre></td></tr></table></figure>\n\n<p>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</p>\n<p>字面量可以赋给任何内置类型的变量。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">68</span>;</span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>byte、int、long、和short都可以用十进制、16进制以及8进制的方式来表示。</p>\n<p>当使用常量的时候，前缀 <strong>0</strong> 表示 8 进制，而前缀 <strong>0x</strong> 代表 16 进制, 例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">decimal</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">octal</span> <span class=\"operator\">=</span> <span class=\"number\">0144</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hexa</span> <span class=\"operator\">=</span>  <span class=\"number\">0x64</span>;</span><br></pre></td></tr></table></figure>\n\n<p>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;Hello World&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;two\\nlines&quot;</span></span><br><span class=\"line\"><span class=\"string\">&quot;\\&quot;This is in quotes\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>字符串常量和字符常量都可以包含任何Unicode字符。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u0001&#x27;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\u0001&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持一些特殊的转义字符序列。</p>\n<p><img src=\"/images/image-20240228200803273.png\" alt=\"image-20240228200803273\"></p>\n<h3 id=\"3-7-自动类型转换\"><a href=\"#3-7-自动类型转换\" class=\"headerlink\" title=\"3-7 自动类型转换\"></a>3-7 自动类型转换</h3><p><strong>整型、实型（常量）、字符型数据可以混合运算。运算中，不同类型的数据先转化为同一类型，然后进行运算。</strong></p>\n<p>转换从低级到高级。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">低  ------------------------------------&gt;  高</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">byte</span>,<span class=\"type\">short</span>,<span class=\"type\">char</span>—&gt; <span class=\"type\">int</span> —&gt; <span class=\"type\">long</span>—&gt; <span class=\"type\">float</span> —&gt; <span class=\"type\">double</span> </span><br></pre></td></tr></table></figure>\n\n<p>数据类型转换必须满足如下规则：</p>\n<ul>\n<li><p>\\1. 不能对boolean类型进行类型转换。</p>\n</li>\n<li><p>\\2. 不能把对象类型转换成不相关类的对象。</p>\n</li>\n<li><p>\\3. 在把容量大的类型转换为容量小的类型时必须使用强制类型转换。</p>\n</li>\n<li><p>\\4. 转换过程中可能导致溢出或损失精度，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">128</span>;   </span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i;</span><br></pre></td></tr></table></figure>\n\n<p>因为 byte 类型是 8 位，最大值为127，所以当 int 强制转换为 byte 类型时，值 128 时候就会导致溢出。</p>\n</li>\n<li><p>\\5. 浮点数到整数的转换是通过舍弃小数得到，而不是四舍五入，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"type\">int</span>)<span class=\"number\">23.7</span> == <span class=\"number\">23</span>;        </span><br><span class=\"line\">(<span class=\"type\">int</span>)-<span class=\"number\">45.89f</span> == -<span class=\"number\">45</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>自动类型转换</strong></p>\n<p>必须满足转换前的数据类型的位数要低于转换后的数据类型，例如: short数据类型的位数为16位，就可以自动转换位数为32的int类型，同样float数据类型的位数为32，可以自动转换为64位的double类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ZiDongLeiZhuan</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> c1=<span class=\"string\">&#x27;a&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> c1;<span class=\"comment\">//char自动类型转换为int</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char自动类型转换为int后的值等于&quot;</span>+i1);</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//定义一个char类型</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> c2+<span class=\"number\">1</span>;<span class=\"comment\">//char 类型和 int 类型计算</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;char类型和int计算后的值等于&quot;</span>+i2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char自动类型转换为int后的值等于97</span><br><span class=\"line\">char类型和int计算后的值等于66</span><br></pre></td></tr></table></figure>\n\n<p>**解析：**c1 的值为字符 <strong>a</strong> ,查 ASCII 码表可知对应的 int 类型值为 97， A 对应值为 65，所以 <strong>i2&#x3D;65+1&#x3D;66</strong>。</p>\n<h3 id=\"3-8-强制类型转换\"><a href=\"#3-8-强制类型转换\" class=\"headerlink\" title=\"3-8 强制类型转换\"></a>3-8 强制类型转换</h3><ul>\n<li>\\1. 条件是转换的数据类型必须是兼容的。</li>\n<li>\\2. 格式：(type)value type是要强制类型转换后的数据类型 实例：</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">QiangZhiZhuanHuan</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i1</span> <span class=\"operator\">=</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">        <span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i1;<span class=\"comment\">//强制类型转换为byte</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;int强制类型转换为byte后的值等于&quot;</span>+b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int强制类型转换为byte后的值等于123</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"3-9-隐含强制类型转换\"><a href=\"#3-9-隐含强制类型转换\" class=\"headerlink\" title=\"3-9  隐含强制类型转换\"></a>3-9  隐含强制类型转换</h3><ul>\n<li>\\1. 整数的默认类型是 int。</li>\n<li>\\2. 浮点型不存在这种情况，因为在定义 float 类型时必须在数字后面跟上 F 或者 f。</li>\n</ul>\n<p>这一节讲解了 Java 的基本数据类型。下一节将探讨不同的变量类型以及它们的用法。</p>\n<h2 id=\"4，Java变量类型\"><a href=\"#4，Java变量类型\" class=\"headerlink\" title=\"4，Java变量类型\"></a>4，Java变量类型</h2><ul>\n<li><p>在Java语言中，所有的变量在使用前必须声明。声明变量的基本格式如下：</p>\n</li>\n<li><p>type identifier [ &#x3D; value][, identifier [&#x3D; value] …] ;</p>\n</li>\n<li><p>格式说明：type为Java数据类型。identifier是变量名。可以使用逗号隔开来声明多个同类型变量。</p>\n</li>\n</ul>\n<p>以下列出了一些变量的声明实例。注意有些包含了初始化过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a, b, c;         <span class=\"comment\">// 声明三个int型整数：a、 b、c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>, e = <span class=\"number\">4</span>, f = <span class=\"number\">5</span>; <span class=\"comment\">// 声明三个整数并赋予初值</span></span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">z</span> <span class=\"operator\">=</span> <span class=\"number\">22</span>;         <span class=\"comment\">// 声明并初始化 z</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;runoob&quot;</span>;  <span class=\"comment\">// 声明并初始化字符串 s</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">pi</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159</span>; <span class=\"comment\">// 声明了双精度浮点型变量 pi</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;x&#x27;</span>;        <span class=\"comment\">// 声明变量 x 的值是字符 &#x27;x&#x27;。</span></span><br></pre></td></tr></table></figure>\n\n<p>Java语言支持的变量类型有：</p>\n<ul>\n<li>类变量：独立于方法之外的变量，用 static 修饰。</li>\n<li>实例变量：独立于方法之外的变量，不过没有 static 修饰。</li>\n<li>局部变量：类的方法中的变量。</li>\n</ul>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Variable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> allClicks=<span class=\"number\">0</span>;    <span class=\"comment\">// 类变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    String str=<span class=\"string\">&quot;hello world&quot;</span>;  <span class=\"comment\">// 实例变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span><span class=\"number\">0</span>;  <span class=\"comment\">// 局部变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-1-Java局部变量\"><a href=\"#4-1-Java局部变量\" class=\"headerlink\" title=\"4-1 Java局部变量\"></a>4-1 Java局部变量</h3><ul>\n<li>局部变量声明在方法、构造方法或者语句块中；</li>\n<li>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁；</li>\n<li>访问修饰符不能用于局部变量；</li>\n<li>局部变量只在声明它的方法、构造方法或者语句块中可见；</li>\n<li>局部变量是在栈上分配的。</li>\n<li>局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才可以使用。</li>\n</ul>\n<h4 id=\"4-1-1-实例-1\"><a href=\"#4-1-1-实例-1\" class=\"headerlink\" title=\"4-1-1 实例 1\"></a>4-1-1 <strong>实例 1</strong></h4><p>在以下实例中age是一个局部变量。定义在pupAge()方法中，它的作用域就限制在这个方法中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">age</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是: &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">小狗的年龄是: 7</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-1-2-实例-2\"><a href=\"#4-1-2-实例-2\" class=\"headerlink\" title=\"4-1-2 实例 2\"></a>4-1-2 实例 2</h4><p>在下面的例子中 age 变量没有初始化，所以在编译时会出错：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.runoob.test;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123; </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pupAge</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> age;</span><br><span class=\"line\">      age = age + <span class=\"number\">7</span>;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;小狗的年龄是 : &quot;</span> + age);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Test</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>();</span><br><span class=\"line\">      test.pupAge();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java:<span class=\"number\">4</span>:variable number might not have been <span class=\"type\">initialized</span></span><br><span class=\"line\"><span class=\"variable\">age</span> <span class=\"operator\">=</span> age + <span class=\"number\">7</span>;</span><br><span class=\"line\">         ^</span><br><span class=\"line\"><span class=\"number\">1</span> error</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-实例变量\"><a href=\"#4-2-实例变量\" class=\"headerlink\" title=\"4-2 实例变量\"></a>4-2 实例变量</h3><ul>\n<li>实例变量声明在一个类中，但在方法、构造方法和语句块之外；</li>\n<li>当一个对象被实例化之后，每个实例变量的值就跟着确定；</li>\n<li>实例变量在对象创建的时候创建，在对象被销毁的时候销毁；</li>\n<li>实例变量的值应该至少被一个方法、构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息；</li>\n<li>实例变量可以声明在使用前或者使用后；</li>\n<li>访问修饰符可以修饰实例变量；</li>\n<li>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见；</li>\n<li>实例变量具有默认值。数值型变量的默认值是0，布尔型变量的默认值是false，引用类型变量的默认值是null。变量的值可以在声明时指定，也可以在构造方法中指定；</li>\n<li>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</li>\n</ul>\n<p><strong>实例</strong></p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 这个实例变量对子类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> String name;</span><br><span class=\"line\">   <span class=\"comment\">// 私有变量，仅在该类可见</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">   <span class=\"comment\">//在构造器中对name赋值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">Employee</span> <span class=\"params\">(String empName)</span>&#123;</span><br><span class=\"line\">      name = empName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//设定salary的值</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setSalary</span><span class=\"params\">(<span class=\"type\">double</span> empSal)</span>&#123;</span><br><span class=\"line\">      salary = empSal;</span><br><span class=\"line\">   &#125;  </span><br><span class=\"line\">   <span class=\"comment\">// 打印信息</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printEmp</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;名字 : &quot;</span> + name );</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;薪水 : &quot;</span> + salary);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Employee</span> <span class=\"variable\">empOne</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Employee</span>(<span class=\"string\">&quot;RUNOOB&quot;</span>);</span><br><span class=\"line\">      empOne.setSalary(<span class=\"number\">1000.0</span>);</span><br><span class=\"line\">      empOne.printEmp();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac Employee.java </span><br><span class=\"line\">$ java Employee</span><br><span class=\"line\">名字 : RUNOOB</span><br><span class=\"line\">薪水 : 1000.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-类变量（静态变量）\"><a href=\"#4-3-类变量（静态变量）\" class=\"headerlink\" title=\"4-3 类变量（静态变量）\"></a>4-3 类变量（静态变量）</h3><ul>\n<li>类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li>\n<li>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li>\n<li>静态变量除了被声明为常量外很少使用。常量是指声明为public&#x2F;private，final和static类型的变量。常量初始化后不可改变。</li>\n<li>静态变量储存在静态存储区。经常被声明为常量，很少单独使用static声明变量。</li>\n<li>静态变量在第一次被访问时创建，在程序结束时销毁。</li>\n<li>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为public类型。</li>\n<li>默认值和实例变量相似。数值型变量默认值是0，布尔型默认值是false，引用类型默认值是null。变量的值可以在声明的时候指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</li>\n<li>静态变量可以通过：<em>ClassName.VariableName</em>的方式访问。</li>\n<li>类变量被声明为public static final类型时，类变量名称一般建议使用大写字母。如果静态变量不是public和final类型，其命名方式与实例变量以及局部变量的命名方式一致。</li>\n</ul>\n<p>实例：</p>\n<p><strong>Employee.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Employee</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//salary是静态的私有变量</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> salary;</span><br><span class=\"line\">    <span class=\"comment\">// DEPARTMENT是一个常量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEPARTMENT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;开发人员&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">    salary = <span class=\"number\">10000</span>;</span><br><span class=\"line\">        System.out.println(DEPARTMENT+<span class=\"string\">&quot;平均工资:&quot;</span>+salary);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">开发人员平均工资:10000.0</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**如果其他类想要访问该变量，可以这样访问：<strong>Employee.DEPARTMENT</strong>。</p>\n<p>本章节中我们学习了Java的变量类型，下一章节中我们将介绍Java修饰符的使用。</p>\n<h2 id=\"5，Java修饰符\"><a href=\"#5，Java修饰符\" class=\"headerlink\" title=\"5，Java修饰符\"></a>5，Java修饰符</h2><p>Java语言提供了很多修饰符，主要分为以下两类：</p>\n<ul>\n<li>访问修饰符</li>\n<li>非访问修饰符</li>\n</ul>\n<p>修饰符用来定义类、方法或者变量，通常放在语句的最前端。我们通过下面的例子来说明：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassName</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> myFlag;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">double</span> <span class=\"variable\">weeks</span> <span class=\"operator\">=</span> <span class=\"number\">9.5</span>;</span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">42</span>;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-1-访问控制修饰符\"><a href=\"#5-1-访问控制修饰符\" class=\"headerlink\" title=\"5-1 访问控制修饰符\"></a>5-1 访问控制修饰符</h3><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p>\n<ul>\n<li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li>\n<li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li>\n<li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li>\n<li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li>\n</ul>\n<p>我们可以通过以下表来说明访问权限：</p>\n<p><img src=\"/images/image-20240228202210130.png\" alt=\"image-20240228202210130\"></p>\n<p><strong>默认访问修饰符-不使用任何关键字</strong></p>\n<p>使用默认访问修饰符声明的变量和方法，对同一个包内的类是可见的。接口里的变量都隐式声明为 <strong>public static final</strong>,而接口里的方法默认情况下访问权限为 <strong>public</strong>。</p>\n<p>如下例所示，变量和方法的声明可以不使用任何修饰符。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">version</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1.5.1&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"title function_\">processOrder</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-私有访问修饰符-private\"><a href=\"#5-2-私有访问修饰符-private\" class=\"headerlink\" title=\"5-2 私有访问修饰符-private\"></a>5-2 私有访问修饰符-private</h3><p>私有访问修饰符是最严格的访问级别，所以被声明为 <strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 <strong>private</strong>。</p>\n<p>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。</p>\n<p>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p>\n<p>下面的类使用了私有访问修饰符：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Logger</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String format;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> String <span class=\"title function_\">getFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setFormat</span><span class=\"params\">(String format)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.format = format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例中，Logger 类中的 format 变量为私有变量，所以其他类不能直接得到和设置该变量的值。为了使其他类能够操作该变量，定义了两个 public 方法：getFormat() （返回 format的值）和 setFormat(String)（设置 format 的值）</p>\n<h3 id=\"5-3-公有访问修饰符-public\"><a href=\"#5-3-公有访问修饰符-public\" class=\"headerlink\" title=\"5-3 公有访问修饰符-public\"></a>5-3 公有访问修饰符-public</h3><p>被声明为 public 的类、方法、构造方法和接口能够被任何其他类访问。</p>\n<p>如果几个相互访问的 public 类分布在不同的包中，则需要导入相应 public 类所在的包。由于类的继承性，类所有的公有方法和变量都能被其子类继承。</p>\n<p>以下函数使用了公有访问控制：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Java 程序的 main() 方法必须设置成公有的，否则，Java 解释器将不能运行该类。</p>\n<h3 id=\"5-4-受保护的访问修饰符-protected\"><a href=\"#5-4-受保护的访问修饰符-protected\" class=\"headerlink\" title=\"5-4 受保护的访问修饰符-protected\"></a>5-4 受保护的访问修饰符-protected</h3><p>protected 需要从以下两个点来分析说明：</p>\n<ul>\n<li><strong>子类与基类在同一包中</strong>：被声明为 protected 的变量、方法和构造器能被同一个包中的任何其他类访问；</li>\n<li><strong>子类与基类不在同一包中</strong>：那么在子类中，子类实例可以访问其从基类继承而来的 protected 方法，而不能访问基类实例的protected方法。</li>\n</ul>\n<p>protected 可以修饰数据成员，构造方法，方法成员，<strong>不能修饰类（内部类除外）</strong>。</p>\n<p>子类能访问 protected 修饰符声明的方法和变量，这样就能保护不相关的类使用这些方法和变量。</p>\n<p>下面的父类使用了 protected 访问修饰符，子类重写了父类的 openSpeaker() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">StreamingAudioPlayer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AudioPlayer</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">openSpeaker</span><span class=\"params\">(Speaker sp)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 实现细节</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果把 openSpeaker() 方法声明为 private，那么除了 AudioPlayer 之外的类将不能访问该方法。</p>\n<p>如果把 openSpeaker() 声明为 public，那么所有的类都能够访问该方法。</p>\n<p>如果我们只想让该方法对其所在类的子类可见，则将该方法声明为 protected。</p>\n<h3 id=\"5-5-访问控制和继承\"><a href=\"#5-5-访问控制和继承\" class=\"headerlink\" title=\"5-5 访问控制和继承\"></a>5-5 访问控制和继承</h3><p>请注意以下方法继承的规则：</p>\n<ul>\n<li>父类中声明为 public 的方法在子类中也必须为 public。</li>\n<li>父类中声明为 protected 的方法在子类中要么声明为 protected，要么声明为 public，不能声明为 private。</li>\n<li>父类中声明为 private 的方法，不能够被继承。</li>\n</ul>\n<h3 id=\"5-6-非访问修饰符\"><a href=\"#5-6-非访问修饰符\" class=\"headerlink\" title=\"5-6 非访问修饰符\"></a>5-6 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p>\n<p>static 修饰符，用来修饰类方法和类变量。</p>\n<p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p>\n<p>abstract 修饰符，用来创建抽象类和抽象方法。</p>\n<p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p>\n<h4 id=\"5-6-1-static-修饰符\"><a href=\"#5-6-1-static-修饰符\" class=\"headerlink\" title=\"5-6-1 static 修饰符\"></a>5-6-1 static 修饰符</h4><ul>\n<li><p><strong>静态变量：</strong></p>\n<p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p>\n</li>\n<li><p><strong>静态方法：</strong></p>\n<p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p>\n</li>\n</ul>\n<p>对类变量和方法的访问可以直接使用 <strong>classname.variablename</strong> 和 <strong>classname.methodname</strong> 的方式访问。</p>\n<p>如下例所示，static修饰符用来创建类方法和类变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InstanceCounter</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">numInstances</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">protected</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> numInstances;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      numInstances++;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   InstanceCounter() &#123;</span><br><span class=\"line\">      InstanceCounter.addInstance();</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] arguments)</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Starting with &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">500</span>; ++i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">new</span> <span class=\"title class_\">InstanceCounter</span>();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Created &quot;</span> +</span><br><span class=\"line\">      InstanceCounter.getCount() + <span class=\"string\">&quot; instances&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例运行编辑结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Starting with <span class=\"number\">0</span> instances</span><br><span class=\"line\">Created <span class=\"number\">500</span> instances</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-6-2-final-修饰符\"><a href=\"#5-6-2-final-修饰符\" class=\"headerlink\" title=\"5-6-2 final 修饰符\"></a>5-6-2 final 修饰符</h4><p><strong>final 变量：</strong></p>\n<p>final 表示”最后的、最终的”含义，变量一旦赋值后，不能被重新赋值。被 final 修饰的实例变量必须显式指定初始值。</p>\n<p>final 修饰符通常和 static 修饰符一起使用来创建类常量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 下面是声明常量的实例</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">BOXWIDTH</span> <span class=\"operator\">=</span> <span class=\"number\">6</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TITLE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Manager&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">     value = <span class=\"number\">12</span>; <span class=\"comment\">//将输出一个错误</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>inal 方法</strong></p>\n<p>父类中的 final 方法可以被子类继承，但是不能被子类重写。</p>\n<p>声明 final 方法的主要目的是防止该方法的内容被修改。</p>\n<p>如下所示，使用 final 修饰符声明方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 方法体</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>final 类</strong></p>\n<p>final 类不能被继承，没有类能够继承 final 类的任何特性。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 类体</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-7-abstract-修饰符\"><a href=\"#5-7-abstract-修饰符\" class=\"headerlink\" title=\"5-7 abstract 修饰符\"></a>5-7 abstract 修饰符</h3><p><strong>抽象类：</strong></p>\n<p>抽象类不能用来实例化对象，声明抽象类的唯一目的是为了将来对该类进行扩充。</p>\n<p>一个类不能同时被 abstract 和 final 修饰。如果一个类包含抽象方法，那么该类一定要声明为抽象类，否则将出现编译错误。</p>\n<p>抽象类可以包含抽象方法和非抽象方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Caravan</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> price;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String model;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> String year;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">goFast</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">changeColor</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>抽象方法</strong></p>\n<p>抽象方法是一种没有任何实现的方法，该方法的的具体实现由子类提供。</p>\n<p>抽象方法不能被声明成 final 和 static。</p>\n<p>任何继承抽象类的子类必须实现父类的所有抽象方法，除非该子类也是抽象类。</p>\n<p>如果一个类包含若干个抽象方法，那么该类必须声明为抽象类。抽象类可以不包含抽象方法。</p>\n<p>抽象方法的声明以分号结尾，例如：<strong>public abstract sample();</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>; <span class=\"comment\">//抽象方法</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">SuperClass</span>&#123;</span><br><span class=\"line\">     <span class=\"comment\">//实现抽象方法</span></span><br><span class=\"line\">      <span class=\"keyword\">void</span> <span class=\"title function_\">m</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">          .........</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"synchronized-修饰符\"><a href=\"#synchronized-修饰符\" class=\"headerlink\" title=\"synchronized 修饰符\"></a>synchronized 修饰符</h3><p>synchronized 关键字声明的方法同一时间只能被一个线程访问。synchronized 修饰符可以应用于四个访问修饰符。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">showDetails</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">.......</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"transient-修饰符\"><a href=\"#transient-修饰符\" class=\"headerlink\" title=\"transient 修饰符\"></a>transient 修饰符</h3><p>序列化的对象包含被 transient 修饰的实例变量时，java 虚拟机(JVM)跳过该特定的变量。</p>\n<p>该修饰符包含在定义变量的语句中，用来预处理类和变量的数据类型。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">transient</span> <span class=\"type\">int</span> <span class=\"variable\">limit</span> <span class=\"operator\">=</span> <span class=\"number\">55</span>;   <span class=\"comment\">// 不会持久化</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> b; <span class=\"comment\">// 持久化</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"volatile-修饰符\"><a href=\"#volatile-修饰符\" class=\"headerlink\" title=\"volatile 修饰符\"></a>volatile 修饰符</h3><p>volatile 修饰的成员变量在每次被线程访问时，都强制从共享内存中重新读取该成员变量的值。而且，当成员变量发生变化时，会强制线程将变化值回写到共享内存。这样在任何时刻，两个不同的线程总是看到某个成员变量的同一个值。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> implements <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private volatile boolean active;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">run</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (active) <span class=\"comment\">// 第一行</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 代码</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span>(<span class=\"params\"></span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        active = <span class=\"literal\">false</span>; <span class=\"comment\">// 第二行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通常情况下，在一个线程调用 run() 方法（在 Runnable 开启的线程），在另一个线程调用 stop() 方法。 如果 *<strong>第一行*</strong> 中缓冲区的 active 值被使用，那么在 *<strong>第二行*</strong> 的 active 值为 false 时循环不会停止。</p>\n<p>但是以上代码中我们使用了 volatile 修饰 active，所以该循环会停止。</p>\n<h2 id=\"6，Java运算符\"><a href=\"#6，Java运算符\" class=\"headerlink\" title=\"6，Java运算符\"></a>6，Java运算符</h2><h3 id=\"6-1-算术运算符\"><a href=\"#6-1-算术运算符\" class=\"headerlink\" title=\"6-1 算术运算符\"></a>6-1 算术运算符</h3><p>算术运算符用在数学表达式中，它们的作用和在数学中的作用一样。下表列出了所有的算术运算符。</p>\n<p>表格中的实例假设整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228212912288.png\" alt=\"image-20240228212912288\"></p>\n<p>下面的简单示例程序演示了算术运算符。复制并粘贴下面的 Java 程序并保存为 Test.java 文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"number\">25</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class=\"line\">     <span class=\"comment\">// 查看  d++ 与 ++d 的不同</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a + b = <span class=\"number\">30</span></span><br><span class=\"line\">a - b = -<span class=\"number\">10</span></span><br><span class=\"line\">a * b = <span class=\"number\">200</span></span><br><span class=\"line\">b / a = <span class=\"number\">2</span></span><br><span class=\"line\">b % a = <span class=\"number\">0</span></span><br><span class=\"line\">c % a = <span class=\"number\">5</span></span><br><span class=\"line\">a++   = <span class=\"number\">10</span></span><br><span class=\"line\">a--   = <span class=\"number\">11</span></span><br><span class=\"line\">d++   = <span class=\"number\">25</span></span><br><span class=\"line\">++d   = <span class=\"number\">27</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-自增自减运算符\"><a href=\"#6-2-自增自减运算符\" class=\"headerlink\" title=\"6-2 自增自减运算符\"></a>6-2 自增自减运算符</h3><p><strong>1、自增（++）自减（–）运算符</strong>是一种特殊的算术运算符，在算术运算符中需要两个操作数来进行运算，而自增自减运算符是一个操作数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> ++a;<span class=\"comment\">//自增运算</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> --c;<span class=\"comment\">//自减运算</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自增运算后的值等于&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;进行自减运算后的值等于&quot;</span>+d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进行自增运算后的值等于4</span><br><span class=\"line\">进行自减运算后的值等于2</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<ul>\n<li>int b &#x3D; ++a; 拆分运算过程为: a&#x3D;a+1&#x3D;4; b&#x3D;a&#x3D;4, 最后结果为b&#x3D;4,a&#x3D;4</li>\n<li>int d &#x3D; –c; 拆分运算过程为: c&#x3D;c-1&#x3D;2; d&#x3D;c&#x3D;2, 最后结果为d&#x3D;2,c&#x3D;2</li>\n</ul>\n<p><strong>2、前缀自增自减法(++a,–a):</strong> 先进行自增或者自减运算，再进行表达式运算。</p>\n<p><strong>3、后缀自增自减法(a++,a–):</strong> 先进行表达式运算，再进行自增或者自减运算 实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">selfAddMinus</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*++a;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>*b++;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符前缀运算后a=&quot;</span>+a+<span class=\"string\">&quot;,x=&quot;</span>+x);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自增运算符后缀运算后b=&quot;</span>+b+<span class=\"string\">&quot;,y=&quot;</span>+y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自增运算符前缀运算后a=6，x=12</span><br><span class=\"line\">自增运算符后缀运算后b=6，y=10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-3-关系运算符\"><a href=\"#6-3-关系运算符\" class=\"headerlink\" title=\"6-3 关系运算符\"></a>6-3 关系运算符</h3><p>下表为Java支持的关系运算符</p>\n<p>表格中的实例整数变量A的值为10，变量B的值为20：</p>\n<p><img src=\"/images/image-20240228213115946.png\" alt=\"image-20240228213115946\"></p>\n<p>下面的简单示例程序演示了关系运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a == b = <span class=\"literal\">false</span></span><br><span class=\"line\">a != b = <span class=\"literal\">true</span></span><br><span class=\"line\">a &gt; b = <span class=\"literal\">false</span></span><br><span class=\"line\">a &lt; b = <span class=\"literal\">true</span></span><br><span class=\"line\">b &gt;= a = <span class=\"literal\">true</span></span><br><span class=\"line\">b &lt;= a = <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-4-位运算符\"><a href=\"#6-4-位运算符\" class=\"headerlink\" title=\"6-4 位运算符\"></a>6-4 位运算符</h3><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p>\n<p>位运算符作用在所有的位上，并且按位运算。假设a &#x3D; 60，b &#x3D; 13;它们的二进制格式表示将如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A = <span class=\"number\">0011</span> <span class=\"number\">1100</span></span><br><span class=\"line\">B = <span class=\"number\">0000</span> <span class=\"number\">1101</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\">A&amp;B = <span class=\"number\">0000</span> <span class=\"number\">1100</span></span><br><span class=\"line\">A | B = <span class=\"number\">0011</span> <span class=\"number\">1101</span></span><br><span class=\"line\">A ^ B = <span class=\"number\">0011</span> <span class=\"number\">0001</span></span><br><span class=\"line\">~A= <span class=\"number\">1100</span> <span class=\"number\">0011</span></span><br></pre></td></tr></table></figure>\n\n<p>下表列出了位运算符的基本运算，假设整数变量 A 的值为 60 和变量 B 的值为 13：</p>\n<p><img src=\"/images/image-20240228213253912.png\" alt=\"image-20240228213253912\"></p>\n<p>下面的简单示例程序演示了位运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">60</span>; <span class=\"comment\">/* 60 = 0011 1100 */</span> </span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13</span>; <span class=\"comment\">/* 13 = 0000 1101 */</span></span><br><span class=\"line\">     <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">     c = a &amp; b;       <span class=\"comment\">/* 12 = 0000 1100 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp; b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a | b;       <span class=\"comment\">/* 61 = 0011 1101 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a | b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a ^ b;       <span class=\"comment\">/* 49 = 0011 0001 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a ^ b = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = ~a;          <span class=\"comment\">/*-61 = 1100 0011 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;~a = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &lt;&lt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 240 = 1111 0000 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &lt;&lt; 2 = &quot;</span> + c );</span><br><span class=\"line\"> </span><br><span class=\"line\">     c = a &gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt; 2  = &quot;</span> + c );</span><br><span class=\"line\">  </span><br><span class=\"line\">     c = a &gt;&gt;&gt; <span class=\"number\">2</span>;     <span class=\"comment\">/* 15 = 0000 1111 */</span></span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &gt;&gt;&gt; 2 = &quot;</span> + c );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp; b = 12</span><br><span class=\"line\">a | b = 61</span><br><span class=\"line\">a ^ b = 49</span><br><span class=\"line\">~a = -61</span><br><span class=\"line\">a &lt;&lt; 2 = 240</span><br><span class=\"line\">a &gt;&gt; 2  = 15</span><br><span class=\"line\">a &gt;&gt;&gt; 2 = 15</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-5-逻辑运算符\"><a href=\"#6-5-逻辑运算符\" class=\"headerlink\" title=\"6-5 逻辑运算符\"></a>6-5 逻辑运算符</h3><p>下表列出了逻辑运算符的基本运算，假设布尔变量A为真，变量B为假</p>\n<p><img src=\"/images/image-20240228213402353.png\" alt=\"image-20240228213402353\"></p>\n<p>下面的简单示例程序演示了逻辑运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a &amp;&amp; b = &quot;</span> + (a&amp;&amp;b));</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;a || b = &quot;</span> + (a||b) );</span><br><span class=\"line\">     System.out.println(<span class=\"string\">&quot;!(a &amp;&amp; b) = &quot;</span> + !(a &amp;&amp; b));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a &amp;&amp; b = false</span><br><span class=\"line\">a || b = true</span><br><span class=\"line\">!(a &amp;&amp; b) = true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-6-短路逻辑运算符\"><a href=\"#6-6-短路逻辑运算符\" class=\"headerlink\" title=\"6-6 短路逻辑运算符\"></a>6-6 短路逻辑运算符</h3><p>当使用与逻辑运算符时，在两个操作数都为true时，结果才为true，但是当得到第一个操作为false时，其结果就必定是false，这时候就不会再判断第二个操作了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LuoJi</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;<span class=\"comment\">//定义一个变量；</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (a&lt;<span class=\"number\">4</span>)&amp;&amp;(a++&lt;<span class=\"number\">10</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;使用短路逻辑运算符的结果为&quot;</span>+b);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a的结果为&quot;</span>+a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用短路逻辑运算符的结果为false</span><br><span class=\"line\">a的结果为5</span><br></pre></td></tr></table></figure>\n\n<p><strong>解析：</strong> <em>该程序使用到了短路逻辑运算符(&amp;&amp;)，首先判断 a&lt;4 的结果为 false，则 b 的结果必定是 false，所以不再执行第二个操作 a++&lt;10 的判断，所以 a 的值为 5。</em></p>\n<h3 id=\"6-7-赋值运算符\"><a href=\"#6-7-赋值运算符\" class=\"headerlink\" title=\"6-7 赋值运算符\"></a>6-7 赋值运算符</h3><p>下面是Java语言支持的赋值运算符：</p>\n<p><img src=\"/images/image-20240228213543244.png\" alt=\"image-20240228213543244\"></p>\n<p>面的简单示例程序演示了赋值运算符。复制并粘贴下面的Java程序并保存为Test.java文件，然后编译并运行这个程序：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        c = a + b;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c = a + b = &quot;</span> + c );</span><br><span class=\"line\">        c += a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c += a  = &quot;</span> + c );</span><br><span class=\"line\">        c -= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c -= a = &quot;</span> + c );</span><br><span class=\"line\">        c *= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c *= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c /= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c /= a = &quot;</span> + c );</span><br><span class=\"line\">        a = <span class=\"number\">10</span>;</span><br><span class=\"line\">        c = <span class=\"number\">15</span>;</span><br><span class=\"line\">        c %= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c %= a  = &quot;</span> + c );</span><br><span class=\"line\">        c &lt;&lt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &lt;&lt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &gt;&gt;= <span class=\"number\">2</span> ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &gt;&gt;= 2 = &quot;</span> + c );</span><br><span class=\"line\">        c &amp;= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c &amp;= a  = &quot;</span> + c );</span><br><span class=\"line\">        c ^= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c ^= a   = &quot;</span> + c );</span><br><span class=\"line\">        c |= a ;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;c |= a   = &quot;</span> + c );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c = a + b = 30</span><br><span class=\"line\">c += a  = 40</span><br><span class=\"line\">c -= a = 30</span><br><span class=\"line\">c *= a = 300</span><br><span class=\"line\">c /= a = 1</span><br><span class=\"line\">c %= a  = 5</span><br><span class=\"line\">c &lt;&lt;= 2 = 20</span><br><span class=\"line\">c &gt;&gt;= 2 = 5</span><br><span class=\"line\">c &gt;&gt;= 2 = 1</span><br><span class=\"line\">c &amp;= a  = 0</span><br><span class=\"line\">c ^= a   = 10</span><br><span class=\"line\">c |= a   = 10</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-8-条件运算符（-）\"><a href=\"#6-8-条件运算符（-）\" class=\"headerlink\" title=\"6-8 条件运算符（?:）\"></a>6-8 条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。该运算符有3个操作数，并且需要判断布尔表达式的值。该运算符的主要是决定哪个值应该赋值给变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">variable</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> (expression) ? value <span class=\"keyword\">if</span> <span class=\"literal\">true</span> : value <span class=\"keyword\">if</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> a , b;</span><br><span class=\"line\">      a = <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 1 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">1</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> +  b );</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 如果 a 等于 10 成立，则设置 b 为 20，否则为 30</span></span><br><span class=\"line\">      b = (a == <span class=\"number\">10</span>) ? <span class=\"number\">20</span> : <span class=\"number\">30</span>;</span><br><span class=\"line\">      System.out.println( <span class=\"string\">&quot;Value of b is : &quot;</span> + b );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of b is : 30</span><br><span class=\"line\">Value of b is : 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-9-instanceof-运算符\"><a href=\"#6-9-instanceof-运算符\" class=\"headerlink\" title=\"6-9 instanceof 运算符\"></a>6-9 instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>\n<p>instanceof运算符使用格式如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">( Object reference variable ) instanceof  (class/interface type)</span><br></pre></td></tr></table></figure>\n\n<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p>\n<p>下面是一个例子：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String name = &quot;James&quot;;</span><br><span class=\"line\">boolean result = name instanceof String; // 由于 name 是 String 类型，所以返回真</span><br></pre></td></tr></table></figure>\n\n<p>如果被比较的对象兼容于右侧类型,该运算符仍然返回true。</p>\n<p>看下面的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Vehicle</span> &#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Car</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Vehicle</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Vehicle</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Car</span>();</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span>  a <span class=\"keyword\">instanceof</span> Car;</span><br><span class=\"line\">      System.out.println( result);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-10-Java运算符优先级\"><a href=\"#6-10-Java运算符优先级\" class=\"headerlink\" title=\"6-10 Java运算符优先级\"></a>6-10 Java运算符优先级</h3><p>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</p>\n<p>例如，（1+3）＋（3+2）*2，这个表达式如果按加号最优先计算，答案就是 18，如果按照乘号最优先，答案则是 14。</p>\n<p>再如，x &#x3D; 7 + 3 * 2;这里x得到13，而不是20，因为乘法运算符比加法运算符有较高的优先级，所以先计算3 * 2得到6，然后再加7。</p>\n<p>下表中具有最高优先级的运算符在的表的最上面，最低优先级的在表的底部。</p>\n<p><img src=\"/images/image-20240228213815636.png\" alt=\"image-20240228213815636\"></p>\n<h2 id=\"7，Java循环结构\"><a href=\"#7，Java循环结构\" class=\"headerlink\" title=\"7，Java循环结构\"></a>7，Java循环结构</h2><h3 id=\"7-1-while-循环\"><a href=\"#7-1-while-循环\" class=\"headerlink\" title=\"7-1 while 循环\"></a>7-1 while 循环</h3><p>while是最基本的循环，它的结构为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>( 布尔表达式 ) &#123;</span><br><span class=\"line\">  <span class=\"comment\">//循环内容</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>只要布尔表达式为 true，循环就会一直执行下去。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> ) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-do…while-循环\"><a href=\"#7-2-do…while-循环\" class=\"headerlink\" title=\"7-2 do…while 循环\"></a>7-2 do…while 循环</h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>\n<p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         x++;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">while</span>( x &lt; <span class=\"number\">20</span> );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : <span class=\"number\">10</span></span><br><span class=\"line\">value of x : <span class=\"number\">11</span></span><br><span class=\"line\">value of x : <span class=\"number\">12</span></span><br><span class=\"line\">value of x : <span class=\"number\">13</span></span><br><span class=\"line\">value of x : <span class=\"number\">14</span></span><br><span class=\"line\">value of x : <span class=\"number\">15</span></span><br><span class=\"line\">value of x : <span class=\"number\">16</span></span><br><span class=\"line\">value of x : <span class=\"number\">17</span></span><br><span class=\"line\">value of x : <span class=\"number\">18</span></span><br><span class=\"line\">value of x : <span class=\"number\">19</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-for循环\"><a href=\"#7-3-for循环\" class=\"headerlink\" title=\"7-3 for循环\"></a>7-3 for循环</h3><p>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</p>\n<p>for循环执行的次数是在执行前就确定的。语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//代码语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关于 for 循环有以下几点说明：</p>\n<ul>\n<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>\n<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>\n<li>执行一次循环后，更新循环控制变量。</li>\n<li>再次检测布尔表达式。循环执行上面的过程。</li>\n</ul>\n<p>实例</p>\n<p><strong>Test.java 文件代码</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>; x &lt; <span class=\"number\">20</span>; x = x+<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;value of x : &quot;</span> + x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">value of x : 10</span><br><span class=\"line\">value of x : 11</span><br><span class=\"line\">value of x : 12</span><br><span class=\"line\">value of x : 13</span><br><span class=\"line\">value of x : 14</span><br><span class=\"line\">value of x : 15</span><br><span class=\"line\">value of x : 16</span><br><span class=\"line\">value of x : 17</span><br><span class=\"line\">value of x : 18</span><br><span class=\"line\">value of x : 19</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-Java-增强-for-循环\"><a href=\"#7-4-Java-增强-for-循环\" class=\"headerlink\" title=\"7-4 Java 增强 for 循环\"></a>7-4 Java 增强 for 循环</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>\n<p>Java 增强 for 循环语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(声明语句 : 表达式)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//代码句子</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**声明语句：**声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>\n<p>**表达式：**表达式是要访问的数组名，或者是返回值为数组的方法。</p>\n<p><strong>实例</strong></p>\n<p><strong>Test.java 文件代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers )&#123;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      String [] names =&#123;<span class=\"string\">&quot;James&quot;</span>, <span class=\"string\">&quot;Larry&quot;</span>, <span class=\"string\">&quot;Tom&quot;</span>, <span class=\"string\">&quot;Lacy&quot;</span>&#125;;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>( String name : names ) &#123;</span><br><span class=\"line\">         System.out.print( name );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;,&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>,</span><br><span class=\"line\">James,Larry,Tom,Lacy,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-5-break-关键字\"><a href=\"#7-5-break-关键字\" class=\"headerlink\" title=\"7-5 break 关键字\"></a>7-5 break 关键字</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>\n<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>\n<p>语法</p>\n<p>break 的用法很简单，就是循环结构中的一条语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">break;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"comment\">// x 等于 30 时跳出循环</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10</span><br><span class=\"line\">20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-6-continue-关键字\"><a href=\"#7-6-continue-关键字\" class=\"headerlink\" title=\"7-6 continue 关键字\"></a>7-6 continue 关键字</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>\n<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>\n<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>\n<p>语法</p>\n<p>continue 就是循环体中一条简单的语句：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">continue;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> [] numbers = &#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>, <span class=\"number\">50</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : numbers ) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> ) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         System.out.print( x );</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">20</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">50</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"8，Java条件语句\"><a href=\"#8，Java条件语句\" class=\"headerlink\" title=\"8，Java条件语句\"></a>8，Java条件语句</h2><h3 id=\"8-1-if…else语句\"><a href=\"#8-1-if…else语句\" class=\"headerlink\" title=\"8-1 if…else语句\"></a>8-1 if…else语句</h3><p>if 语句后面可以跟 else 语句，当 if 语句的布尔表达式值为 false 时，else 语句块会被执行。</p>\n<p>语法</p>\n<p>if…else 的用法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为true</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式的值为false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x &lt; <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 if 语句&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">这是 else 语句</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-2-if…else-if…else-语句\"><a href=\"#8-2-if…else-if…else-语句\" class=\"headerlink\" title=\"8-2 if…else if…else 语句\"></a>8-2 if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p>\n<p>使用 if，else if，else 语句的时候，需要注意下面几点：</p>\n<ul>\n<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>\n<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>\n<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>\n</ul>\n<p><strong>语法</strong></p>\n<p>if…else 语法格式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果布尔表达式 3的值为true执行代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">//如果以上布尔表达式都不为true执行代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 10&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">20</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 20&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;Value of X is 30&quot;</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">         System.out.print(<span class=\"string\">&quot;这是 else 语句&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Value of X is 30</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-3-嵌套的-if…else-语句\"><a href=\"#8-3-嵌套的-if…else-语句\" class=\"headerlink\" title=\"8-3 嵌套的 if…else 语句\"></a>8-3 嵌套的 if…else 语句</h3><p>使用嵌套的 if…else 语句是合法的。也就是说你可以在另一个 if 或者 else if 语句中使用 if 或者 else if 语句。</p>\n<p><strong>语法</strong></p>\n<p>嵌套的 if…else 语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">   <span class=\"comment\">////如果布尔表达式 1的值为true执行代码</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span>(布尔表达式 <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">      <span class=\"comment\">////如果布尔表达式 2的值为true执行代码</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像 if 语句一样嵌套 else if…else。</p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">if</span>( x == <span class=\"number\">30</span> )&#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span>( y == <span class=\"number\">10</span> )&#123;</span><br><span class=\"line\">             System.out.print(<span class=\"string\">&quot;X = 30 and Y = 10&quot;</span>);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">X = <span class=\"number\">30</span> <span class=\"type\">and</span> <span class=\"variable\">Y</span> <span class=\"operator\">=</span> <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"9，Java-switch-case-语句\"><a href=\"#9，Java-switch-case-语句\" class=\"headerlink\" title=\"9，Java switch case 语句\"></a>9，Java switch case 语句</h2><p>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p>\n<p><strong>语法</strong></p>\n<p>switch case 语句语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span>(expression)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> value :</span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">       <span class=\"keyword\">break</span>; <span class=\"comment\">//可选</span></span><br><span class=\"line\">    <span class=\"comment\">//你可以有任意数量的case语句</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span> : <span class=\"comment\">//可选</span></span><br><span class=\"line\">       <span class=\"comment\">//语句</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>switch case 语句有如下规则：</p>\n<ul>\n<li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li>\n<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li>\n<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>\n<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li>\n<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li>\n<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>\n</ul>\n<p><strong>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</strong></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">//char grade = args[0].charAt(0);</span></span><br><span class=\"line\">      <span class=\"type\">char</span> <span class=\"variable\">grade</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;C&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(grade)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;优秀&quot;</span>); </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;B&#x27;</span> :</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;C&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;D&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"string\">&#x27;F&#x27;</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;你需要再努力努力&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span> :</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;未知等级&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;你的等级是 &quot;</span> + grade);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">良好</span><br><span class=\"line\">你的等级是 C</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">default</span><br></pre></td></tr></table></figure>\n\n<p>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span>(i)&#123;</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">0</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">         <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;3&quot;</span>); <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;default&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"10，Java-Number-Math-类\"><a href=\"#10，Java-Number-Math-类\" class=\"headerlink\" title=\"10，Java Number &amp; Math 类\"></a>10，Java Number &amp; Math 类</h2><p>一般地，当需要使用数字的时候，我们通常使用内置数据类型，如：<strong>byte、int、long、double</strong> 等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">5000</span>;</span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">13.65f</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0x4a</span>;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情形。为了解决这个问题，Java 语言为每一个内置数据类型提供了对应的包装类。</p>\n<p>所有的包装类**（Integer、Long、Byte、Double、Float、Short）**都是抽象类 Number 的子类。</p>\n<p>这种由编译器特别支持的包装称为装箱，所以当内置数据类型被当作对象使用的时候，编译器会把内置类型装箱为包装类。相似的，编译器也可以把一个对象拆箱为内置类型。Number 类属于 java.lang 包。</p>\n<p>下面是一个使用 Integer 对象的实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Test.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">Integer</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      x =  x + <span class=\"number\">10</span>;</span><br><span class=\"line\">      System.out.println(x); </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">15</span><br></pre></td></tr></table></figure>\n\n<p>当 x 被赋为整型值时，由于x是一个对象，所以编译器要对x进行装箱。然后，为了使x能进行加运算，所以要对x进行拆箱。</p>\n<h3 id=\"10-1-Java-Math-类\"><a href=\"#10-1-Java-Math-类\" class=\"headerlink\" title=\"10-1 Java Math 类\"></a>10-1 Java Math 类</h3><p>Java 的 Math 包含了用于执行基本数学运算的属性和方法，如初等指数、对数、平方根和三角函数。</p>\n<p>Math 的方法都被定义为 static 形式，通过 Math 类可以在主函数中直接调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span> <span class=\"params\">(String []args)</span>  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;90 度的正弦值：&quot;</span> + Math.sin(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;0度的余弦值：&quot;</span> + Math.cos(<span class=\"number\">0</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;60度的正切值：&quot;</span> + Math.tan(Math.PI/<span class=\"number\">3</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1的反正切值： &quot;</span> + Math.atan(<span class=\"number\">1</span>));  </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;π/2的角度值：&quot;</span> + Math.toDegrees(Math.PI/<span class=\"number\">2</span>));  </span><br><span class=\"line\">        System.out.println(Math.PI);  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">90</span> 度的正弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">0</span>度的余弦值：<span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">60</span>度的正切值：<span class=\"number\">1.7320508075688767</span></span><br><span class=\"line\"><span class=\"number\">1</span>的反正切值： <span class=\"number\">0.7853981633974483</span></span><br><span class=\"line\">π/<span class=\"number\">2</span>的角度值：<span class=\"number\">90.0</span></span><br><span class=\"line\"><span class=\"number\">3.141592653589793</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-2-Number-Math-类方法\"><a href=\"#10-2-Number-Math-类方法\" class=\"headerlink\" title=\"10-2 Number &amp; Math 类方法\"></a>10-2 Number &amp; Math 类方法</h3><p>下面的表中列出的是 Number &amp; Math 类常用的一些方法：</p>\n<p><img src=\"/images/image-20240228220453132.png\" alt=\"image-20240228220453132\"></p>\n<h3 id=\"10-3-Math-的-floor-round-和-ceil-方法实例比较\"><a href=\"#10-3-Math-的-floor-round-和-ceil-方法实例比较\" class=\"headerlink\" title=\"10-3 Math 的 floor,round 和 ceil 方法实例比较\"></a>10-3 Math 的 floor,round 和 ceil 方法实例比较</h3><p><img src=\"/images/image-20240228220635826.png\" alt=\"image-20240228220635826\"></p>\n<p><strong>floor,round 和 ceil 实例：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Main</span> &#123;   </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;   </span><br><span class=\"line\">    <span class=\"type\">double</span>[] nums = &#123; <span class=\"number\">1.4</span>, <span class=\"number\">1.5</span>, <span class=\"number\">1.6</span>, -<span class=\"number\">1.4</span>, -<span class=\"number\">1.5</span>, -<span class=\"number\">1.6</span> &#125;;   </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">double</span> num : nums) &#123;   </span><br><span class=\"line\">      test(num);   </span><br><span class=\"line\">    &#125;   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">(<span class=\"type\">double</span> num)</span> &#123;   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.floor(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.floor(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.round(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.round(num));   </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Math.ceil(&quot;</span> + num + <span class=\"string\">&quot;)=&quot;</span> + Math.ceil(num));   </span><br><span class=\"line\">  &#125;   </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例执行输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.floor(<span class=\"number\">1.4</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.4</span>)=<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.4</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.5</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.5</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.5</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(<span class=\"number\">1.6</span>)=<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.round(<span class=\"number\">1.6</span>)=<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(<span class=\"number\">1.6</span>)=<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.4</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.4</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.5</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.5</span>)=-<span class=\"number\">1.0</span></span><br><span class=\"line\">Math.floor(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2.0</span></span><br><span class=\"line\">Math.round(-<span class=\"number\">1.6</span>)=-<span class=\"number\">2</span></span><br><span class=\"line\">Math.ceil(-<span class=\"number\">1.6</span>)=-<span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"11，Java-Character-类\"><a href=\"#11，Java-Character-类\" class=\"headerlink\" title=\"11，Java Character 类\"></a>11，Java Character 类</h2><p>Character 类用于对单个字符进行操作。</p>\n<p>Character 类在对象中包装一个基本类型 <strong>char</strong> 的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// Unicode 字符表示形式</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">uniChar</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;\\u039A&#x27;</span>; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 字符数组</span></span><br><span class=\"line\"><span class=\"type\">char</span>[] charArray =&#123; <span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span> &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>然而，在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p>\n<p>Character类提供了一系列方法来操纵字符。你可以使用Character的构造方法创建一个Character类对象，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Character</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>在某些情况下，Java编译器会自动创建一个Character对象。</p>\n<p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;a&#x27; 装箱到 Character 对象 ch 中</span></span><br><span class=\"line\"><span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 原始字符 &#x27;x&#x27; 用 test 方法装箱</span></span><br><span class=\"line\"><span class=\"comment\">// 返回拆箱的值到 &#x27;c&#x27;</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> test(<span class=\"string\">&#x27;x&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-1-转义序列\"><a href=\"#11-1-转义序列\" class=\"headerlink\" title=\"11-1 转义序列\"></a>11-1 转义序列</h3><p>前面有反斜杠（\\）的字符代表转义字符，它对编译器来说是有特殊含义的。</p>\n<p>下面列表展示了Java的转义序列：</p>\n<p><img src=\"/images/image-20240228220904427.png\" alt=\"image-20240228220904427\"></p>\n<p><strong>实例</strong></p>\n<p>当打印语句遇到一个转义序列时，编译器可以正确地对其进行解释。</p>\n<p>以下实例转义双引号并输出：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;访问\\&quot;菜鸟教程!\\&quot;&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">访问&quot;菜鸟教程!&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-Character-方法\"><a href=\"#11-2-Character-方法\" class=\"headerlink\" title=\"11-2 Character 方法\"></a>11-2 Character 方法</h3><p>下面是Character类的方法：</p>\n<p><img src=\"/images/image-20240228220959034.png\" alt=\"image-20240228220959034\"></p>\n<h2 id=\"12，Java-String-类\"><a href=\"#12，Java-String-类\" class=\"headerlink\" title=\"12，Java String 类\"></a>12，Java String 类</h2><h3 id=\"12-1-创建字符串\"><a href=\"#12-1-创建字符串\" class=\"headerlink\" title=\"12-1 创建字符串\"></a>12-1 创建字符串</h3><p>创建字符串最简单的方式如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">greeting</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中遇到字符串常量时，这里的值是 “<strong>菜鸟教程</strong>“”，编译器会使用该值创建一个 String 对象。</p>\n<p>和其它对象一样，可以使用关键字和构造方法来创建 String 对象。</p>\n<p>String 类有 11 种构造方法，这些方法提供不同的参数来初始化字符串，比如提供一个字符数组参数:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] helloArray = &#123; <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>&#125;;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">helloString</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(helloArray);  </span><br><span class=\"line\">      System.out.println( helloString );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runoob</span><br></pre></td></tr></table></figure>\n\n<p>**注意:**String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了（详看笔记部分解析）。</p>\n<p>如果需要对字符串做很多修改，那么应该选择使用 <a href=\"http://it028.com/java-stringbuffer.html\">StringBuffer &amp; StringBuilder 类</a>。</p>\n<h3 id=\"12-2-字符串长度\"><a href=\"#12-2-字符串长度\" class=\"headerlink\" title=\"12-2 字符串长度\"></a>12-2 字符串长度</h3><p>用于获取有关对象的信息的方法称为访问器方法。</p>\n<p>String 类的一个访问器方法是 length() 方法，它返回字符串对象包含的字符数。</p>\n<p>下面的代码执行后，len 变量等于 14:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">site</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;www.runoob.com&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> site.length();</span><br><span class=\"line\">        System.out.println( <span class=\"string\">&quot;菜鸟教程网址长度 : &quot;</span> + len );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程网址长度 : 14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-3-连接字符串\"><a href=\"#12-3-连接字符串\" class=\"headerlink\" title=\"12-3 连接字符串\"></a>12-3 连接字符串</h3><p>String 类提供了连接两个字符串的方法：</p>\n<p>string1.concat(string2);</p>\n<p>返回 string2 连接 string1 的新字符串。也可以对字符串常量使用 concat() 方法，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;我的名字是 &quot;.concat(&quot;Runoob&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>更常用的是使用’+’操作符来连接字符串，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello,&quot; + &quot; runoob&quot; + &quot;!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Hello, runoob!&quot;</span><br></pre></td></tr></table></figure>\n\n<p>下面是一个例子:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// StringDemo.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StringDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;     </span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">string1</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;菜鸟教程网址：&quot;</span>;     </span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1、&quot;</span> + string1 + <span class=\"string\">&quot;www.runoob.com&quot;</span>);  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1、菜鸟教程网址：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-4-创建格式化字符串\"><a href=\"#12-4-创建格式化字符串\" class=\"headerlink\" title=\"12-4 创建格式化字符串\"></a>12-4 创建格式化字符串</h3><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p>\n<p>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。</p>\n<p>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p>\n<p>如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.printf(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                  <span class=\"string\">&quot;is %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<p>你也可以这样写</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String fs;</span><br><span class=\"line\">fs = String.format(<span class=\"string\">&quot;浮点型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot;%f, 整型变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %d, 字符串变量的值为 &quot;</span> +</span><br><span class=\"line\">                   <span class=\"string\">&quot; %s&quot;</span>, floatVar, intVar, stringVar);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"12-5-String-方法\"><a href=\"#12-5-String-方法\" class=\"headerlink\" title=\"12-5 String 方法\"></a>12-5 String 方法</h3><p>下面是 String 类支持的方法，更多详细，参看 [Java String API](javascript:if(confirm(‘<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html\">https://www.runoob.com/manual/jdk1.6//images/lang/postgresql-autoincrement.html</a>‘) 文档:</p>\n<p><img src=\"/images/image-20240228221437713.png\" alt=\"image-20240228221437713\"></p>\n<h2 id=\"13，Java-StringBuffer-和-StringBuilder-类\"><a href=\"#13，Java-StringBuffer-和-StringBuilder-类\" class=\"headerlink\" title=\"13，Java StringBuffer 和 StringBuilder 类\"></a>13，Java StringBuffer 和 StringBuilder 类</h2><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>\n<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>\n<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>\n<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Test.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuffer</span> <span class=\"variable\">sBuffer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>(<span class=\"string\">&quot;菜鸟教程官网：&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;www&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.runoob&quot;</span>);</span><br><span class=\"line\">    sBuffer.append(<span class=\"string\">&quot;.com&quot;</span>);</span><br><span class=\"line\">    System.out.println(sBuffer);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">菜鸟教程官网：www.runoob.com</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"13-1-StringBuffer-方法\"><a href=\"#13-1-StringBuffer-方法\" class=\"headerlink\" title=\"13-1 StringBuffer 方法\"></a>13-1 StringBuffer 方法</h3><p>以下是 StringBuffer 类支持的主要方法</p>\n<p><img src=\"/images/image-20240228221542960.png\" alt=\"image-20240228221542960\"></p>\n<p>下面的列表里的方法和 String 类的方法类似：</p>\n<p><img src=\"/images/image-20240228221620605.png\" alt=\"image-20240228221620605\"></p>\n<h2 id=\"14，Java数组\"><a href=\"#14，Java数组\" class=\"headerlink\" title=\"14，Java数组\"></a>14，Java数组</h2><h3 id=\"14-1-声明数组变量\"><a href=\"#14-1-声明数组变量\" class=\"headerlink\" title=\"14-1 声明数组变量\"></a>14-1 声明数组变量</h3><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明数组变量的语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar;   <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\">dataType arrayRefVar[];  <span class=\"comment\">// 效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意:</strong> 建议使用 <strong>dataType[] arrayRefVar</strong> 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C&#x2F;C++ 语言 ，在Java中采用是为了让 C&#x2F;C++ 程序员能够快速理解java语言。</p>\n<p>下面是这两种语法的代码示例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">double</span>[] myList;         <span class=\"comment\">// 首选的方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">或</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">double</span> myList[];         <span class=\"comment\">//  效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-2-创建数组\"><a href=\"#14-2-创建数组\" class=\"headerlink\" title=\"14-2 创建数组\"></a>14-2 创建数组</h3><p>Java语言使用new操作符来创建数组，语法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>上面的语法语句做了两件事：</p>\n<ul>\n<li>一、使用 dataType[arraySize] 创建了一个数组。</li>\n<li>二、把新创建的数组的引用赋值给变量 arrayRefVar。</li>\n</ul>\n<p>数组变量的声明，和创建数组可以用一条语句完成，如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = new dataType[arraySize];</span><br></pre></td></tr></table></figure>\n\n<p>另外，你还可以使用如下的方式创建数组。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataType[] arrayRefVar = &#123;value0, value1, ..., valuek&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>数组的元素是通过索引访问的。数组索引从 0 开始，所以索引值从 0 到 arrayRefVar.length-1。</p>\n<p><strong>实例</strong></p>\n<p>下面的语句首先声明了一个数组变量 myList，接着创建了一个包含 10 个 double 类型元素的数组，并且把它的引用赋值给 myList 变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestArray.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 数组大小</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 定义数组</span></span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = <span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[size];</span><br><span class=\"line\">      myList[<span class=\"number\">0</span>] = <span class=\"number\">5.6</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">1</span>] = <span class=\"number\">4.5</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">2</span>] = <span class=\"number\">3.3</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">3</span>] = <span class=\"number\">13.2</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">4</span>] = <span class=\"number\">4.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">5</span>] = <span class=\"number\">34.33</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">6</span>] = <span class=\"number\">34.0</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">7</span>] = <span class=\"number\">45.45</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">8</span>] = <span class=\"number\">99.993</span>;</span><br><span class=\"line\">      myList[<span class=\"number\">9</span>] = <span class=\"number\">11123</span>;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;总和为： &quot;</span> + total);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">总和为： 11367.373</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-3-处理数组\"><a href=\"#14-3-处理数组\" class=\"headerlink\" title=\"14-3 处理数组\"></a>14-3 处理数组</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。</p>\n<p><strong>示例</strong></p>\n<p>该实例完整地展示了如何创建、初始化和操纵数组：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         System.out.println(myList[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 计算所有元素的总和</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         total += myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Total is &quot;</span> + total);</span><br><span class=\"line\">      <span class=\"comment\">// 查找最大元素</span></span><br><span class=\"line\">      <span class=\"type\">double</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> myList[<span class=\"number\">0</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; myList.length; i++) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (myList[i] &gt; max) max = myList[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Max is &quot;</span> + max);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.9</span></span><br><span class=\"line\"><span class=\"number\">2.9</span></span><br><span class=\"line\"><span class=\"number\">3.4</span></span><br><span class=\"line\"><span class=\"number\">3.5</span></span><br><span class=\"line\">Total is <span class=\"number\">11.7</span></span><br><span class=\"line\">Max is <span class=\"number\">3.5</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-4-For-Each-循环\"><a href=\"#14-4-For-Each-循环\" class=\"headerlink\" title=\"14-4 For-Each 循环\"></a>14-4 For-Each 循环</h3><p>JDK 1.5 引进了一种新的循环类型，被称为 For-Each 循环或者加强型循环，它能在不使用下标的情况下遍历数组。</p>\n<p>语法格式如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(type element: array)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    System.out.println(element);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>实例</strong></p>\n<p>该实例用来显示数组 myList 中的所有元素：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestArray.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestArray</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">double</span>[] myList = &#123;<span class=\"number\">1.9</span>, <span class=\"number\">2.9</span>, <span class=\"number\">3.4</span>, <span class=\"number\">3.5</span>&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 打印所有数组元素</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">double</span> element: myList) &#123;</span><br><span class=\"line\">         System.out.println(element);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.9</span><br><span class=\"line\">2.9</span><br><span class=\"line\">3.4</span><br><span class=\"line\">3.5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-5-数组作为函数的参数\"><a href=\"#14-5-数组作为函数的参数\" class=\"headerlink\" title=\"14-5 数组作为函数的参数\"></a>14-5 数组作为函数的参数</h3><p>数组可以作为参数传递给方法。</p>\n<p>例如，下面的例子就是一个打印 int 数组中元素的方法:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printArray</span><span class=\"params\">(<span class=\"type\">int</span>[] array)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; array.length; i++) &#123;</span><br><span class=\"line\">    System.out.print(array[i] + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面例子调用 printArray 方法打印出 3，1，2，6，4 和 2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printArray(<span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[]&#123;<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span>, <span class=\"number\">2</span>&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-6-数组作为函数的返回值\"><a href=\"#14-6-数组作为函数的返回值\" class=\"headerlink\" title=\"14-6 数组作为函数的返回值\"></a>14-6 数组作为函数的返回值</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] reverse(<span class=\"type\">int</span>[] list) &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[list.length];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = result.length - <span class=\"number\">1</span>; i &lt; list.length; i++, j--) &#123;</span><br><span class=\"line\">    result[j] = list[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-7-多维数组\"><a href=\"#14-7-多维数组\" class=\"headerlink\" title=\"14-7 多维数组\"></a>14-7 多维数组</h3><p>多维数组可以看成是数组的数组，比如二维数组就是一个特殊的一维数组，其每一个元素都是一个一维数组，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String str[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>][<span class=\"number\">4</span>];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"14-7-1-多维数组的动态初始化（以二维数组为例）\"><a href=\"#14-7-1-多维数组的动态初始化（以二维数组为例）\" class=\"headerlink\" title=\"14-7-1 多维数组的动态初始化（以二维数组为例）\"></a>14-7-1 多维数组的动态初始化（以二维数组为例）</h4><ol>\n<li>直接为每一维分配空间，格式如下：</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[][] typeName = <span class=\"keyword\">new</span> <span class=\"title class_\">type</span>[typeLength1][typeLength2];</span><br></pre></td></tr></table></figure>\n\n<p>type 可以为基本数据类型和复合数据类型，arraylength1 和 arraylength2 必须为正整数，arraylength1 为行数，arraylength2 为列数。</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> a[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>][<span class=\"number\">3</span>];</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p>二维数组 a 可以看成一个两行三列的数组。</p>\n<p>2，从最高维开始，分别为每一维分配空间，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s[][] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>][];</span><br><span class=\"line\">s[<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">s[<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[<span class=\"number\">3</span>];</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Good&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">0</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Luck&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;to&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;you&quot;</span>);</span><br><span class=\"line\">s[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;!&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>解析：</p>\n<p><strong>s[0]&#x3D;new String[2]</strong> 和 <strong>s[1]&#x3D;new String[3]</strong> 是为最高维分配引用空间，也就是为最高维限制其能保存数据的最长的长度，然后再为其每个数组元素单独分配空间 <strong>s0&#x3D;new String(“Good”)</strong> 等操作。</p>\n<h4 id=\"14-7-2-多维数组的引用（以二维数组为例）\"><a href=\"#14-7-2-多维数组的引用（以二维数组为例）\" class=\"headerlink\" title=\"14-7-2 多维数组的引用（以二维数组为例）\"></a>14-7-2 多维数组的引用（以二维数组为例）</h4><p>对二维数组中的每个元素，引用方式为 <strong>arrayName[index1][index2]</strong>，例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num[<span class=\"number\">1</span>][<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"14-8-Arrays-类\"><a href=\"#14-8-Arrays-类\" class=\"headerlink\" title=\"14-8 Arrays 类\"></a>14-8 Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p>\n<p>具有以下功能：</p>\n<ul>\n<li>给数组赋值：通过 fill 方法。</li>\n<li>对数组排序：通过 sort 方法,按升序。</li>\n<li>比较数组：通过 equals 方法比较数组中元素值是否相等。</li>\n<li>查找数组元素：通过 binarySearch 方法能对排序好的数组进行二分查找法操作。</li>\n</ul>\n<p>具体说明请查看下表：</p>\n<p><img src=\"/images/image-20240228222507296.png\" alt=\"image-20240228222507296\"></p>\n<h2 id=\"15，Java-日期时间\"><a href=\"#15，Java-日期时间\" class=\"headerlink\" title=\"15，Java 日期时间\"></a>15，Java 日期时间</h2><p>java.util 包提供了 Date 类来封装当前的日期和时间。 Date 类提供两个构造函数来实例化 Date 对象。</p>\n<p>第一个构造函数使用当前日期和时间来初始化对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date( )</span><br></pre></td></tr></table></figure>\n\n<p>第二个构造函数接收一个参数，该参数是从1970年1月1日起的毫秒数。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date(long millisec)</span><br></pre></td></tr></table></figure>\n\n<p>Date对象创建以后，可以调用下面的方法。</p>\n<p><img src=\"/images/image-20240228222725206.png\" alt=\"image-20240228222725206\"></p>\n<h3 id=\"15-1-获取当前日期时间\"><a href=\"#15-1-获取当前日期时间\" class=\"headerlink\" title=\"15-1 获取当前日期时间\"></a>15-1 获取当前日期时间</h3><p>Java中获取当前日期和时间很简单，使用 Date 对象的 toString() 方法来打印当前日期和时间，如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用 toString() 函数显示日期时间</span></span><br><span class=\"line\">       System.out.println(date.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Mon May <span class=\"number\">04</span> 09:<span class=\"number\">51</span>:<span class=\"number\">52</span> CDT <span class=\"number\">2013</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-2-日期比较\"><a href=\"#15-2-日期比较\" class=\"headerlink\" title=\"15-2 日期比较\"></a>15-2 日期比较</h3><p>Java使用以下三种方法来比较两个日期：</p>\n<ul>\n<li>使用 getTime() 方法获取两个日期（自1970年1月1日经历的毫秒数值），然后比较这两个值。</li>\n<li>使用方法 before()，after() 和 equals()。例如，一个月的12号比18号早，则 new Date(99, 2, 12).before(new Date (99, 2, 18)) 返回true。</li>\n<li>使用 compareTo() 方法，它是由 Comparable 接口定义的，Date 类实现了这个接口。</li>\n</ul>\n<h3 id=\"15-3-使用-SimpleDateFormat-格式化日期\"><a href=\"#15-3-使用-SimpleDateFormat-格式化日期\" class=\"headerlink\" title=\"15-3 使用 SimpleDateFormat 格式化日期\"></a>15-3 使用 SimpleDateFormat 格式化日期</h3><p>SimpleDateFormat 是一个以语言环境敏感的方式来格式化和分析日期的类。SimpleDateFormat 允许你选择任何用户自定义日期时间格式来运行。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>  java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">Date</span> <span class=\"variable\">dNow</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( );</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd hh:mm:ss&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;当前时间为: &quot;</span> + ft.format(dNow));</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SimpleDateFormat ft = new SimpleDateFormat (&quot;yyyy-MM-dd hh:mm:ss&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>这一行代码确立了转换的格式，其中 yyyy 是完整的公元年，MM 是月份，dd 是日期，HH:mm:ss 是时、分、秒。</p>\n<p><strong>注意</strong>:有的格式大写，有的格式小写，例如 MM 是月份，mm 是分；HH 是 24 小时制，而 hh 是 12 小时制。</p>\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当前时间为: 2018-09-06 10:16:34</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-4-日期和时间的格式化编码\"><a href=\"#15-4-日期和时间的格式化编码\" class=\"headerlink\" title=\"15-4 日期和时间的格式化编码\"></a>15-4 日期和时间的格式化编码</h3><p>时间模式字符串用来指定时间格式。在此模式中，所有的 ASCII 字母被保留为模式字母，定义如下：</p>\n<p><img src=\"/images/image-20240228222933035.png\" alt=\"image-20240228222933035\"></p>\n<h3 id=\"15-5-使用printf格式化日期\"><a href=\"#15-5-使用printf格式化日期\" class=\"headerlink\" title=\"15-5 使用printf格式化日期\"></a>15-5 使用printf格式化日期</h3><p>printf 方法可以很轻松地格式化时间和日期。使用两个字母格式，它以 <strong>%t</strong> 开头并且以下面表格中的一个字母结尾。</p>\n<p><img src=\"/images/image-20240228223002094.png\" alt=\"image-20240228223002094\"></p>\n<p><strong>实例</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">     <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"> </span><br><span class=\"line\">     <span class=\"comment\">//c的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;全部日期和时间信息：%tc%n&quot;</span>,date);          </span><br><span class=\"line\">    <span class=\"comment\">//f的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;年-月-日格式：%tF%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//d的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;月/日/年格式：%tD%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//r的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS PM格式（12时制）：%tr%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//t的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM:SS格式（24时制）：%tT%n&quot;</span>,date);  </span><br><span class=\"line\">    <span class=\"comment\">//R的使用  </span></span><br><span class=\"line\">    System.out.printf(<span class=\"string\">&quot;HH:MM格式（24时制）：%tR&quot;</span>,date);  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全部日期和时间信息：星期一 九月 10 10:43:36 CST 2012  </span><br><span class=\"line\">年-月-日格式：2012-09-10  </span><br><span class=\"line\">月/日/年格式：09/10/12  </span><br><span class=\"line\">HH:MM:SS PM格式（12时制）：10:43:36 上午  </span><br><span class=\"line\">HH:MM:SS格式（24时制）：10:43:36  </span><br><span class=\"line\">HH:MM格式（24时制）：10:43  </span><br></pre></td></tr></table></figure>\n\n<p>如果你需要重复提供日期，那么利用这种方式来格式化它的每一部分就有点复杂了。因此，可以利用一个格式化字符串指出要被格式化的参数的索引。</p>\n<p>索引必须紧跟在%后面，而且必须以$结束。例如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 使用toString()显示日期和时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%1$s %2$tB %2$td, %2$tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>或者，你可以使用 &lt; 标志。它表明先前被格式化的参数要被再次使用。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// 初始化 Date 对象</span></span><br><span class=\"line\">       <span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"comment\">// 显示格式化时间</span></span><br><span class=\"line\">       System.out.printf(<span class=\"string\">&quot;%s %tB %&lt;te, %&lt;tY&quot;</span>, </span><br><span class=\"line\">                         <span class=\"string\">&quot;Due date:&quot;</span>, date);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Due date: February 09, 2014</span><br></pre></td></tr></table></figure>\n\n<p>定义日期格式的转换符可以使日期通过指定的转换符生成新字符串。这些日期转换符如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">       Date date=<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();                                      </span><br><span class=\"line\">        <span class=\"comment\">//b的使用，月份简称  </span></span><br><span class=\"line\">        String str=String.format(Locale.US,<span class=\"string\">&quot;英文月份简称：%tb&quot;</span>,date);       </span><br><span class=\"line\">        System.out.println(str);                                                                              </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份简称：%tb%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//B的使用，月份全称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文月份全称：%tB&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地月份全称：%tB%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//a的使用，星期简称  </span></span><br><span class=\"line\">        str=String.format(Locale.US,<span class=\"string\">&quot;英文星期的简称：%ta&quot;</span>,date);  </span><br><span class=\"line\">        System.out.println(str);  </span><br><span class=\"line\">        <span class=\"comment\">//A的使用，星期全称  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;本地星期的简称：%tA%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//C的使用，年前两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的前两位数字（不足两位前面补0）：%tC%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//y的使用，年后两位  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;年的后两位数字（不足两位前面补0）：%ty%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//j的使用，一年的天数  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;一年中的天数（即年的第几天）：%tj%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//m的使用，月份  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的月份（不足两位前面补0）：%tm%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//d的使用，日（二位，不够补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;两位数字的日（不足两位前面补0）：%td%n&quot;</span>,date);  </span><br><span class=\"line\">        <span class=\"comment\">//e的使用，日（一位不补零）  </span></span><br><span class=\"line\">        System.out.printf(<span class=\"string\">&quot;月份的日（前面不补0）：%te&quot;</span>,date);  </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">英文月份简称：May</span><br><span class=\"line\">本地月份简称：五月</span><br><span class=\"line\">英文月份全称：May</span><br><span class=\"line\">本地月份全称：五月</span><br><span class=\"line\">英文星期的简称：Thu</span><br><span class=\"line\">本地星期的简称：星期四</span><br><span class=\"line\">年的前两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">20</span></span><br><span class=\"line\">年的后两位数字（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">17</span></span><br><span class=\"line\">一年中的天数（即年的第几天）：<span class=\"number\">124</span></span><br><span class=\"line\">两位数字的月份（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">05</span></span><br><span class=\"line\">两位数字的日（不足两位前面补<span class=\"number\">0</span>）：<span class=\"number\">04</span></span><br><span class=\"line\">月份的日（前面不补<span class=\"number\">0</span>）：<span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"15-6-解析字符串为时间\"><a href=\"#15-6-解析字符串为时间\" class=\"headerlink\" title=\"15-6 解析字符串为时间\"></a>15-6 解析字符串为时间</h3><p>SimpleDateFormat 类有一些附加的方法，特别是parse()，它试图按照给定的SimpleDateFormat 对象的格式化存储来解析字符串。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.text.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DateDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">ft</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span> (<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">input</span> <span class=\"operator\">=</span> args.length == <span class=\"number\">0</span> ? <span class=\"string\">&quot;1818-11-11&quot;</span> : args[<span class=\"number\">0</span>]; </span><br><span class=\"line\"> </span><br><span class=\"line\">      System.out.print(input + <span class=\"string\">&quot; Parses as &quot;</span>); </span><br><span class=\"line\"> </span><br><span class=\"line\">      Date t; </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">          t = ft.parse(input); </span><br><span class=\"line\">          System.out.println(t); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (ParseException e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Unparseable using &quot;</span> + ft); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ java DateDemo</span><br><span class=\"line\">1818-11-11 Parses as Wed Nov 11 00:00:00 GMT 1818</span><br><span class=\"line\">$ java DateDemo 2007-12-01</span><br><span class=\"line\">2007-12-01 Parses as Sat Dec 01 00:00:00 GMT 2007</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-7-Java-休眠-sleep\"><a href=\"#15-7-Java-休眠-sleep\" class=\"headerlink\" title=\"15-7 Java 休眠(sleep)\"></a>15-7 Java 休眠(sleep)</h3><p>sleep()使当前线程进入停滞状态（阻塞当前线程），让出CPU的使用、目的是不让当前线程独自霸占该进程所获的CPU资源，以留一定时间给其他线程执行的机会。</p>\n<p>你可以让程序休眠一毫秒的时间或者到您的计算机的寿命长的任意段时间。例如，下面的程序会休眠3秒：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SleepDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123; </span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">1000</span>*<span class=\"number\">3</span>);   <span class=\"comment\">// 休眠3秒</span></span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123; </span><br><span class=\"line\">          System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>); </span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thu Sep 17 10:20:30 CST 2015</span><br><span class=\"line\"></span><br><span class=\"line\">Thu Sep 17 10:20:33 CST 2015</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-8-测量时间\"><a href=\"#15-8-测量时间\" class=\"headerlink\" title=\"15-8 测量时间\"></a>15-8 测量时间</h3><p>下面的一个例子表明如何测量时间间隔（以毫秒为单位）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DiffDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         Thread.sleep(<span class=\"number\">5</span>*<span class=\"number\">60</span>*<span class=\"number\">10</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>( ) + <span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis( );</span><br><span class=\"line\">         <span class=\"type\">long</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> end - start;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Difference is : &quot;</span> + diff);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Got an exception!&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">47</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Fri Jan 08 09:<span class=\"number\">48</span>:<span class=\"number\">50</span> CST <span class=\"number\">2016</span></span><br><span class=\"line\"></span><br><span class=\"line\">Difference is : <span class=\"number\">3019</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-9-Calendar类\"><a href=\"#15-9-Calendar类\" class=\"headerlink\" title=\"15-9 Calendar类\"></a>15-9 Calendar类</h3><p>我们现在已经能够格式化并创建一个日期对象了，但是我们如何才能设置和获取日期数据的特定部分呢，比如说小时，日，或者分钟? 我们又如何在日期的这些部分加上或者减去值呢? 答案是使用Calendar 类。</p>\n<p>Calendar类的功能要比Date类强大很多，而且在实现方式上也比Date类要复杂一些。</p>\n<p>Calendar类是一个抽象类，在实际使用时实现特定的子类的对象，创建对象的过程对程序员来说是透明的，只需要使用getInstance方法创建即可。</p>\n<h4 id=\"15-9-1-创建一个代表系统当前日期的Calendar对象\"><a href=\"#15-9-1-创建一个代表系统当前日期的Calendar对象\" class=\"headerlink\" title=\"15-9-1 创建一个代表系统当前日期的Calendar对象\"></a>15-9-1 创建一个代表系统当前日期的Calendar对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Calendar.getInstance();<span class=\"comment\">//默认是当前日期</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-2-创建一个指定日期的Calendar对象\"><a href=\"#15-9-2-创建一个指定日期的Calendar对象\" class=\"headerlink\" title=\"15-9-2 创建一个指定日期的Calendar对象\"></a>15-9-2 创建一个指定日期的Calendar对象</h4><p>使用Calendar类代表特定的时间，需要首先创建一个Calendar的对象，然后再设定该对象中的年月日参数来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个代表2009年6月12日的Calendar对象</span></span><br><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\">c1.set(<span class=\"number\">2009</span>, <span class=\"number\">6</span> - <span class=\"number\">1</span>, <span class=\"number\">12</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"15-9-3-Calendar类对象字段类型\"><a href=\"#15-9-3-Calendar类对象字段类型\" class=\"headerlink\" title=\"15-9-3 Calendar类对象字段类型\"></a>15-9-3 Calendar类对象字段类型</h4><p>Calendar类中用以下这些常量表示不同的意义，jdk内的很多类其实都是采用的这种思想</p>\n<p><img src=\"/http://localhost:4000//image-20240228225026914.png\" alt=\"image-20240228225026914\"></p>\n<h4 id=\"15-9-4-Calendar类对象信息的设置\"><a href=\"#15-9-4-Calendar类对象信息的设置\" class=\"headerlink\" title=\"15-9-4 Calendar类对象信息的设置\"></a>15-9-4 Calendar类对象信息的设置</h4><p><strong>Set设置</strong></p>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>调用：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public final void set(int year,int month,int date)</span><br><span class=\"line\">c1.set(2009, 6, 12);//把Calendar对象c1的年月日分别设这为：2009、6、12</span><br></pre></td></tr></table></figure>\n\n<p>利用字段类型设置</p>\n<p>如果只设定某个字段，例如日期的值，则可以使用如下set方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void set(int field,int value)</span><br></pre></td></tr></table></figure>\n\n<p>把 c1对象代表的日期设置为10号，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.DATE,10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象代表的年份设置为2008年，其他的所有数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.set(Calendar.YEAR,2008);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性set的意义以此类推</p>\n<p><strong>Add设置</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Calendar c1 = Calendar.getInstance();</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期加上10，也就是c1也就表示为10天后的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, 10);</span><br></pre></td></tr></table></figure>\n\n<p>把c1对象的日期减去10，也就是c1也就表示为10天前的日期，其它所有的数值会被重新计算</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c1.add(Calendar.DATE, -10);</span><br></pre></td></tr></table></figure>\n\n<p>其他字段属性的add的意义以此类推</p>\n<h4 id=\"15-9-5-Calendar类对象信息的获得\"><a href=\"#15-9-5-Calendar类对象信息的获得\" class=\"headerlink\" title=\"15-9-5 Calendar类对象信息的获得\"></a>15-9-5 Calendar类对象信息的获得</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Calendar</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Calendar.getInstance();</span><br><span class=\"line\"><span class=\"comment\">// 获得年份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">year</span> <span class=\"operator\">=</span> c1.get(Calendar.YEAR);</span><br><span class=\"line\"><span class=\"comment\">// 获得月份</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">month</span> <span class=\"operator\">=</span> c1.get(Calendar.MONTH) + <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 获得日期</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> c1.get(Calendar.DATE);</span><br><span class=\"line\"><span class=\"comment\">// 获得小时</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">hour</span> <span class=\"operator\">=</span> c1.get(Calendar.HOUR_OF_DAY);</span><br><span class=\"line\"><span class=\"comment\">// 获得分钟</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">minute</span> <span class=\"operator\">=</span> c1.get(Calendar.MINUTE);</span><br><span class=\"line\"><span class=\"comment\">// 获得秒</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> c1.get(Calendar.SECOND);</span><br><span class=\"line\"><span class=\"comment\">// 获得星期几（注意（这个与Date类是不同的）：1代表星期日、2代表星期1、3代表星期二，以此类推）</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">day</span> <span class=\"operator\">=</span> c1.get(Calendar.DAY_OF_WEEK);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"15-10-GregorianCalendar类\"><a href=\"#15-10-GregorianCalendar类\" class=\"headerlink\" title=\"15-10 GregorianCalendar类\"></a>15-10 GregorianCalendar类</h3><p>Calendar类实现了公历日历，GregorianCalendar是Calendar类的一个具体实现。</p>\n<p>Calendar 的getInstance（）方法返回一个默认用当前的语言环境和时区初始化的GregorianCalendar对象。GregorianCalendar定义了两个字段：AD和BC。这是代表公历定义的两个时代。</p>\n<p>下面列出GregorianCalendar对象的几个构造方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225136150.png\" alt=\"image-20240228225136150\"></p>\n<p>这里是GregorianCalendar 类提供的一些有用的方法列表：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225205976.png\" alt=\"image-20240228225205976\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GregorianCalendarDemo</span> &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      String months[] = &#123;</span><br><span class=\"line\">      <span class=\"string\">&quot;Jan&quot;</span>, <span class=\"string\">&quot;Feb&quot;</span>, <span class=\"string\">&quot;Mar&quot;</span>, <span class=\"string\">&quot;Apr&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;May&quot;</span>, <span class=\"string\">&quot;Jun&quot;</span>, <span class=\"string\">&quot;Jul&quot;</span>, <span class=\"string\">&quot;Aug&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;Sep&quot;</span>, <span class=\"string\">&quot;Oct&quot;</span>, <span class=\"string\">&quot;Nov&quot;</span>, <span class=\"string\">&quot;Dec&quot;</span>&#125;;</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"type\">int</span> year;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化 Gregorian 日历</span></span><br><span class=\"line\">      <span class=\"comment\">// 使用当前时间和日期</span></span><br><span class=\"line\">      <span class=\"comment\">// 默认为本地时间和时区</span></span><br><span class=\"line\">      <span class=\"type\">GregorianCalendar</span> <span class=\"variable\">gcalendar</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">GregorianCalendar</span>();</span><br><span class=\"line\">      <span class=\"comment\">// 显示当前时间和日期的信息</span></span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Date: &quot;</span>);</span><br><span class=\"line\">      System.out.print(months[gcalendar.get(Calendar.MONTH)]);</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot; &quot;</span> + gcalendar.get(Calendar.DATE) + <span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      System.out.println(year = gcalendar.get(Calendar.YEAR));</span><br><span class=\"line\">      System.out.print(<span class=\"string\">&quot;Time: &quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.HOUR) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.print(gcalendar.get(Calendar.MINUTE) + <span class=\"string\">&quot;:&quot;</span>);</span><br><span class=\"line\">      System.out.println(gcalendar.get(Calendar.SECOND));</span><br><span class=\"line\">      </span><br><span class=\"line\">      <span class=\"comment\">// 测试当前年份是否为闰年</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span>(gcalendar.isLeapYear(year)) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;当前年份不是闰年&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Date: Apr 22 2009</span><br><span class=\"line\">Time: 11:25:27</span><br><span class=\"line\">当前年份不是闰年</span><br></pre></td></tr></table></figure>\n\n<p>关于 Calender 类的完整列表，你可以参考标准的 <a href=\"http://it028.com/index-10.htm\">Java文档</a>。</p>\n<h2 id=\"16，Java-正则表达式\"><a href=\"#16，Java-正则表达式\" class=\"headerlink\" title=\"16，Java 正则表达式\"></a>16，Java 正则表达式</h2><p>正则表达式定义了字符串的模式。</p>\n<p>正则表达式可以用来搜索、编辑或处理文本。</p>\n<p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p>\n<h3 id=\"16-1-正则表达式实例\"><a href=\"#16-1-正则表达式实例\" class=\"headerlink\" title=\"16-1 正则表达式实例\"></a>16-1 正则表达式实例</h3><p>一个字符串其实就是一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 “Hello World” 字符串。</p>\n<p><strong>.</strong>（点号）也是一个正则表达式，它匹配任何一个字符如：”a” 或 “1”。</p>\n<p>下表列出了一些正则表达式的实例及描述：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225320769.png\" alt=\"image-20240228225320769\"></p>\n<p>Java 正则表达式和 Perl 的是最为相似的。</p>\n<p>java.util.regex 包主要包括以下三个类：</p>\n<ul>\n<li><p>Pattern 类：</p>\n<p>pattern 对象是一个正则表达式的编译表示。Pattern 类没有公共构造方法。要创建一个 Pattern 对象，你必须首先调用其公共静态编译方法，它返回一个 Pattern 对象。该方法接受一个正则表达式作为它的第一个参数。</p>\n</li>\n<li><p>Matcher 类：</p>\n<p>Matcher 对象是对输入字符串进行解释和匹配操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p>\n</li>\n<li><p>PatternSyntaxException：</p>\n<p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p>\n</li>\n</ul>\n<p>以下实例中使用了正则表达式 <strong>.*runoob.*</strong> 用于查找字符串中是否包了 <strong>runoob</strong> 子串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RegexExample1</span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">content</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;I am noob &quot;</span> +</span><br><span class=\"line\">        <span class=\"string\">&quot;from runoob.com.&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.*runoob.*&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">isMatch</span> <span class=\"operator\">=</span> Pattern.matches(pattern, content);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;字符串中是否包含了 &#x27;runoob&#x27; 子字符串? &quot;</span> + isMatch);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>实例输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">字符串中是否包含了 &#x27;runoob&#x27; 子字符串? true</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"16-2-捕获组\"><a href=\"#16-2-捕获组\" class=\"headerlink\" title=\"16-2 捕获组\"></a>16-2 捕获组</h3><p>捕获组是把多个字符当一个单独单元进行处理的方法，它通过对括号内的字符分组来创建。</p>\n<p>例如，正则表达式 (dog) 创建了单一分组，组里包含”d”，”o”，和”g”。</p>\n<p>捕获组是通过从左至右计算其开括号来编号。例如，在表达式（（A）（B（C））），有四个这样的组：</p>\n<ul>\n<li>((A)(B(C)))</li>\n<li>(A)</li>\n<li>(B(C))</li>\n<li>(C)</li>\n</ul>\n<p>可以通过调用 matcher 对象的 groupCount 方法来查看表达式有多少个分组。groupCount 方法返回一个 int 值，表示matcher对象当前有多个捕获组。</p>\n<p>还有一个特殊的组（group(0)），它总是代表整个表达式。该组不包括在 groupCount 的返回值中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 按指定模式在字符串查找</span></span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">line</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;This order was placed for QT3000! OK?&quot;</span>;</span><br><span class=\"line\">      <span class=\"type\">String</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;(\\\\D*)(\\\\d+)(.*)&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 创建 Pattern 对象</span></span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> Pattern.compile(pattern);</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 现在创建 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> r.matcher(line);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (m.find( )) &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">0</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">1</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">2</span>) );</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Found value: &quot;</span> + m.group(<span class=\"number\">3</span>) ); </span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;NO MATCH&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Found value: This order was placed for QT3000! OK?</span><br><span class=\"line\">Found value: This order was placed for QT</span><br><span class=\"line\">Found value: 3000</span><br><span class=\"line\">Found value: ! OK?</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"16-3-正则表达式语法\"><a href=\"#16-3-正则表达式语法\" class=\"headerlink\" title=\"16-3 正则表达式语法\"></a>16-3 正则表达式语法</h3><p>在其他语言中，<strong>\\</strong> 表示：<strong>我想要在正则表达式中插入一个普通的（字面上的）反斜杠，请不要给它任何特殊的意义。</strong></p>\n<p>在 Java 中，<strong>\\</strong> 表示：<strong>我要插入一个正则表达式的反斜线，所以其后的字符具有特殊的意义。</strong></p>\n<p>所以，在其他的语言中（如Perl），一个反斜杠 **** 就足以具有转义的作用，而在 Java 中正则表达式中则需要有两个反斜杠才能被解析为其他语言中的转义作用。也可以简单的理解在 Java 的正则表达式中，两个 <strong>\\</strong> 代表其他语言中的一个 ****，这也就是为什么表示一位数字的正则表达式是 <strong>\\d</strong>，而表示一个普通的反斜杠是 <strong>\\\\</strong>。</p>\n<p><img src=\"/http://localhost:4000//image-20240228225546405.png\" alt=\"image-20240228225546405\"></p>\n<h3 id=\"16-4-Matcher-类的方法\"><a href=\"#16-4-Matcher-类的方法\" class=\"headerlink\" title=\"16-4 Matcher 类的方法\"></a>16-4 Matcher 类的方法</h3><h4 id=\"16-4-1-索引方法\"><a href=\"#16-4-1-索引方法\" class=\"headerlink\" title=\"16-4-1 索引方法\"></a>16-4-1 索引方法</h4><p>索引方法提供了有用的索引值，精确表明输入字符串中在哪能找到匹配：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225637596.png\" alt=\"image-20240228225637596\"></p>\n<h4 id=\"16-4-2-研究方法\"><a href=\"#16-4-2-研究方法\" class=\"headerlink\" title=\"16-4-2 研究方法\"></a>16-4-2 研究方法</h4><p>研究方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225700596.png\" alt=\"image-20240228225700596\"></p>\n<h4 id=\"16-4-3-替换方法\"><a href=\"#16-4-3-替换方法\" class=\"headerlink\" title=\"16-4-3 替换方法\"></a>16-4-3 替换方法</h4><p>替换方法是替换输入字符串里文本的方法：</p>\n<p><img src=\"/http://localhost:4000//image-20240228225727777.png\" alt=\"image-20240228225727777\"></p>\n<h4 id=\"16-4-4-start-和-end-方法\"><a href=\"#16-4-4-start-和-end-方法\" class=\"headerlink\" title=\"16-4-4 start 和 end 方法\"></a>16-4-4 start 和 end 方法</h4><p>下面是一个对单词 “cat” 出现在输入字符串中出现次数进行计数的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;\\\\bcat\\\\b&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span></span><br><span class=\"line\">                                    <span class=\"string\">&quot;cat cat cat cattie cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">       <span class=\"keyword\">while</span>(m.find()) &#123;</span><br><span class=\"line\">         count++;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Match number &quot;</span>+count);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;start(): &quot;</span>+m.start());</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;end(): &quot;</span>+m.end());</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Match number <span class=\"number\">1</span></span><br><span class=\"line\">start(): <span class=\"number\">0</span></span><br><span class=\"line\">end(): <span class=\"number\">3</span></span><br><span class=\"line\">Match number <span class=\"number\">2</span></span><br><span class=\"line\">start(): <span class=\"number\">4</span></span><br><span class=\"line\">end(): <span class=\"number\">7</span></span><br><span class=\"line\">Match number <span class=\"number\">3</span></span><br><span class=\"line\">start(): <span class=\"number\">8</span></span><br><span class=\"line\">end(): <span class=\"number\">11</span></span><br><span class=\"line\">Match number <span class=\"number\">4</span></span><br><span class=\"line\">start(): <span class=\"number\">19</span></span><br><span class=\"line\">end(): <span class=\"number\">22</span></span><br></pre></td></tr></table></figure>\n\n<p>可以看到这个例子是使用单词边界，以确保字母 “c” “a” “t” 并非仅是一个较长的词的子串。它也提供了一些关于输入字符串中匹配发生位置的有用信息。</p>\n<p>Start 方法返回在以前的匹配操作期间，由给定组所捕获的子序列的初始索引，end 方法最后一个匹配字符的索引加 1。</p>\n<h4 id=\"16-4-5-matches-和-lookingAt-方法\"><a href=\"#16-4-5-matches-和-lookingAt-方法\" class=\"headerlink\" title=\"16-4-5 matches 和 lookingAt 方法\"></a>16-4-5 matches 和 lookingAt 方法</h4><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。</p>\n<p>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p>\n<p>这两个方法经常在输入字符串的开始使用。</p>\n<p>我们通过下面这个例子，来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// RegexMatches.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;foo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fooooooooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT2</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;ooooofoooooooooooo&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Pattern pattern;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Matcher matcher2;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">( String args[] )</span>&#123;</span><br><span class=\"line\">       pattern = Pattern.compile(REGEX);</span><br><span class=\"line\">       matcher = pattern.matcher(INPUT);</span><br><span class=\"line\">       matcher2 = pattern.matcher(INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current REGEX is: &quot;</span>+REGEX);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT is: &quot;</span>+INPUT);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Current INPUT2 is: &quot;</span>+INPUT2);</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher.lookingAt());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;matches(): &quot;</span>+matcher.matches());</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;lookingAt(): &quot;</span>+matcher2.lookingAt());</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Current REGEX is: foo</span><br><span class=\"line\">Current INPUT is: fooooooooooooooooo</span><br><span class=\"line\">Current INPUT2 is: ooooofoooooooooooo</span><br><span class=\"line\">lookingAt(): true</span><br><span class=\"line\">matches(): false</span><br><span class=\"line\">lookingAt(): false</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-6-replaceFirst-和-replaceAll-方法\"><a href=\"#16-4-6-replaceFirst-和-replaceAll-方法\" class=\"headerlink\" title=\"16-4-6 replaceFirst 和 replaceAll 方法\"></a>16-4-6 replaceFirst 和 replaceAll 方法</h4><p>replaceFirst 和 replaceAll 方法用来替换匹配正则表达式的文本。不同的是，replaceFirst 替换首次匹配，replaceAll 替换所有匹配。</p>\n<p>下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dog&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;The dog says meow. &quot;</span> +</span><br><span class=\"line\">                                    <span class=\"string\">&quot;All dogs say meow.&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;cat&quot;</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">       <span class=\"comment\">// get a matcher object</span></span><br><span class=\"line\">       <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT); </span><br><span class=\"line\">       INPUT = m.replaceAll(REPLACE);</span><br><span class=\"line\">       System.out.println(INPUT);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The cat says meow. All cats say meow.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-7-appendReplacement-和-appendTail-方法\"><a href=\"#16-4-7-appendReplacement-和-appendTail-方法\" class=\"headerlink\" title=\"16-4-7 appendReplacement 和 appendTail 方法\"></a>16-4-7 appendReplacement 和 appendTail 方法</h4><p>Matcher 类也提供了appendReplacement 和 appendTail 方法用于文本替换：</p>\n<p>看下面的例子来解释这个功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RegexMatches.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Matcher;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.regex.Pattern;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RegexMatches</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REGEX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a*b&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">INPUT</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;aabfooaabfooabfoobkkk&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">String</span> <span class=\"variable\">REPLACE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;-&quot;</span>;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Pattern</span> <span class=\"variable\">p</span> <span class=\"operator\">=</span> Pattern.compile(REGEX);</span><br><span class=\"line\">      <span class=\"comment\">// 获取 matcher 对象</span></span><br><span class=\"line\">      <span class=\"type\">Matcher</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> p.matcher(INPUT);</span><br><span class=\"line\">      <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(m.find())&#123;</span><br><span class=\"line\">         m.appendReplacement(sb,REPLACE);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      m.appendTail(sb);</span><br><span class=\"line\">      System.out.println(sb.toString());</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-foo-foo-foo-kkk</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"16-4-8-PatternSyntaxException-类的方法\"><a href=\"#16-4-8-PatternSyntaxException-类的方法\" class=\"headerlink\" title=\"16-4-8 PatternSyntaxException 类的方法\"></a>16-4-8 PatternSyntaxException 类的方法</h4><p>PatternSyntaxException 是一个非强制异常类，它指示一个正则表达式模式中的语法错误。</p>\n<p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p>\n<p><img src=\"/http://localhost:4000//image-20240228230136771.png\" alt=\"image-20240228230136771\"></p>\n<h2 id=\"17，Java-方法\"><a href=\"#17，Java-方法\" class=\"headerlink\" title=\"17，Java 方法\"></a>17，Java 方法</h2><p>在前面几个章节中我们经常使用到 <strong>System.out.println()</strong>，那么它是什么呢？</p>\n<ul>\n<li>println() 是一个方法。</li>\n<li>System 是系统类。</li>\n<li>out 是标准输出对象。</li>\n</ul>\n<p>这句话的用法是调用系统类 System 中的标准输出对象 out 中的方法 println()。</p>\n<h3 id=\"17-1-那么什么是方法呢？\"><a href=\"#17-1-那么什么是方法呢？\" class=\"headerlink\" title=\"17-1 那么什么是方法呢？\"></a>17-1 那么什么是方法呢？</h3><p>Java方法是语句的集合，它们在一起执行一个功能。</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<h3 id=\"17-2-方法的优点\"><a href=\"#17-2-方法的优点\" class=\"headerlink\" title=\"17-2 方法的优点\"></a>17-2 方法的优点</h3><ul>\n<li>\\1. 使程序变得更简短而清晰。</li>\n<li>\\2. 有利于程序维护。</li>\n<li>\\3. 可以提高程序开发的效率。</li>\n<li>\\4. 提高了代码的重用性。</li>\n</ul>\n<h3 id=\"17-3-方法的命名规则\"><a href=\"#17-3-方法的命名规则\" class=\"headerlink\" title=\"17-3 方法的命名规则\"></a>17-3 方法的命名规则</h3><ul>\n<li>1.方法的名字的第一个单词应以小写字母作为开头，后面的单词则用大写字母开头写，不使用连接符。例如：<strong>addPerson</strong>。</li>\n<li>2.下划线可能出现在 JUnit 测试方法名称中用以分隔名称的逻辑组件。一个典型的模式是：<strong>test<MethodUnderTest>_<state></state></MethodUnderTest></strong>，例如 <strong>testPop_emptyStack</strong>。</li>\n</ul>\n<hr>\n<h3 id=\"17-4-方法的定义\"><a href=\"#17-4-方法的定义\" class=\"headerlink\" title=\"17-4 方法的定义\"></a>17-4 方法的定义</h3><p>一般情况下，定义一个方法包含以下语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">修饰符 返回值类型 方法名(参数类型 参数名)&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    方法体</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> 返回值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法包含一个方法头和一个方法体。下面是一个方法的所有部分：</p>\n<ul>\n<li>**修饰符：**修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</li>\n<li><strong>返回值类型 ：<strong>方法可能会返回值。returnValueType 是方法返回值的数据类型。有些方法执行所需的操作，但没有返回值。在这种情况下，returnValueType 是关键字</strong>void</strong>。</li>\n<li>**方法名：**是方法的实际名称。方法名和参数表共同构成方法签名。</li>\n<li>**参数类型：**参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</li>\n<li>**方法体：**方法体包含具体的语句，定义该方法的功能。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">(<span class=\"type\">int</span> birthday)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>参数可以有多个：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">float</span> <span class=\"title function_\">interest</span><span class=\"params\">(<span class=\"type\">float</span> principal, <span class=\"type\">int</span> year)</span>&#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong> 在一些其它语言中方法指过程和函数。一个返回非void类型返回值的方法称为函数；一个返回void类型返回值的方法叫做过程。</p>\n<p>下面的方法包含 2 个参数 num1 和 num2，它返回这两个参数的最大值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** 返回两个整型变量数据的较大值 */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">int</span> result;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">      result = num1;</span><br><span class=\"line\">   <span class=\"keyword\">else</span></span><br><span class=\"line\">      result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-5-方法调用\"><a href=\"#17-5-方法调用\" class=\"headerlink\" title=\"17-5 方法调用\"></a>17-5 方法调用</h3><p>Java 支持两种调用方法的方式，根据方法是否返回值来选择。</p>\n<p>当程序调用一个方法时，程序的控制权交给了被调用的方法。当被调用方法的返回语句执行或者到达方法体闭括号时候交还控制权给程序。</p>\n<p>当方法返回一个值的时候，方法调用通常被当做一个值。例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">larger</span> <span class=\"operator\">=</span> max(<span class=\"number\">30</span>, <span class=\"number\">40</span>);</span><br></pre></td></tr></table></figure>\n\n<p>如果方法返回值是void，方法调用一定是一条语句。例如，方法println返回void。下面的调用是个语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">System.out.println(<span class=\"string\">&quot;欢迎访问菜鸟教程！&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>下面的例子演示了如何定义一个方法，以及如何调用它：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestMax.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestMax</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">/** 主方法 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">5</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> max(i, j);</span><br><span class=\"line\">      System.out.println( i + <span class=\"string\">&quot; 和 &quot;</span> + j + <span class=\"string\">&quot; 比较，最大值是：&quot;</span> + k);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">/** 返回两个整数变量较大的值 */</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> num1, <span class=\"type\">int</span> num2)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> result;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">         result = num1;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">         result = num2;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> result; </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">5 和 2 比较，最大值是：5</span><br></pre></td></tr></table></figure>\n\n<p>这个程序包含 main 方法和 max 方法。main 方法是被 JVM 调用的，除此之外，main 方法和其它方法没什么区别。</p>\n<p>main 方法的头部是不变的，如例子所示，带修饰符 public 和 static,返回 void 类型值，方法名字是 main,此外带个一个 String[] 类型参数。String[] 表明参数是字符串数组。</p>\n<h3 id=\"17-6-void-关键字\"><a href=\"#17-6-void-关键字\" class=\"headerlink\" title=\"17-6 void 关键字\"></a>17-6 void 关键字</h3><p>本节说明如何声明和调用一个 void 方法。</p>\n<p>下面的例子声明了一个名为 printGrade 的方法，并且调用它来打印给定的分数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TestVoidMethod.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestVoidMethod</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    printGrade(<span class=\"number\">78.5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printGrade</span><span class=\"params\">(<span class=\"type\">double</span> score)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">90.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;A&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">80.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;B&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">70.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;C&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (score &gt;= <span class=\"number\">60.0</span>) &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;D&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&#x27;F&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C</span><br></pre></td></tr></table></figure>\n\n<p>这里printGrade方法是一个void类型方法，它不返回值。</p>\n<p>一个void方法的调用一定是一个语句。 所以，它被在main方法第三行以语句形式调用。就像任何以分号结束的语句一样。</p>\n<hr>\n<h3 id=\"17-7-通过值传递参数\"><a href=\"#17-7-通过值传递参数\" class=\"headerlink\" title=\"17-7 通过值传递参数\"></a>17-7 通过值传递参数</h3><p>调用一个方法时候需要提供参数，你必须按照参数列表指定的顺序提供。</p>\n<p>例如，下面的方法连续n次打印一个消息：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestVoidMethod.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nPrintln</span><span class=\"params\">(String message, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">    System.out.println(message);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<p>下面的例子演示按值传递的效果。</p>\n<p>该程序创建一个方法，该方法用于交换两个变量。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// TestPassByValue.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TestPassByValue</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换前 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                        num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 调用swap方法</span></span><br><span class=\"line\">    swap(num1, num2);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;交换后 num1 的值为：&quot;</span> +</span><br><span class=\"line\">                       num1 + <span class=\"string\">&quot; ，num2 的值为：&quot;</span> + num2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">/** 交换两个变量的方法 */</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> n1, <span class=\"type\">int</span> n2)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t进入 swap 方法&quot;</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换前 n1 的值为：&quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">    <span class=\"comment\">// 交换 n1 与 n2的值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> n1;</span><br><span class=\"line\">    n1 = n2;</span><br><span class=\"line\">    n2 = temp;</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;\\t\\t交换后 n1 的值为 &quot;</span> + n1</span><br><span class=\"line\">                         + <span class=\"string\">&quot;，n2 的值：&quot;</span> + n2);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">交换前 num1 的值为：1 ，num2 的值为：2</span><br><span class=\"line\">    进入 swap 方法</span><br><span class=\"line\">        交换前 n1 的值为：1，n2 的值：2</span><br><span class=\"line\">        交换后 n1 的值为 2，n2 的值：1</span><br><span class=\"line\">交换后 num1 的值为：1 ，num2 的值为：2</span><br></pre></td></tr></table></figure>\n\n<p>传递两个参数调用swap方法。有趣的是，方法被调用后，实参的值并没有改变。</p>\n<hr>\n<h3 id=\"17-8-方法的重载\"><a href=\"#17-8-方法的重载\" class=\"headerlink\" title=\"17-8 方法的重载\"></a>17-8 方法的重载</h3><p>上面使用的max方法仅仅适用于int型数据。但如果你想得到两个浮点类型数据的最大值呢？</p>\n<p>解决方法是创建另一个有相同名字但参数不同的方法，如下面代码所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">double</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">double</span> num1, <span class=\"type\">double</span> num2)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (num1 &gt; num2)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">  <span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你调用max方法时传递的是int型参数，则 int型参数的max方法就会被调用；</p>\n<p>如果传递的是double型参数，则double类型的max方法体会被调用，这叫做方法重载；</p>\n<p>就是说一个类的两个方法拥有相同的名字，但是有不同的参数列表。</p>\n<p>Java编译器根据方法签名判断哪个方法应该被调用。</p>\n<p>方法重载可以让程序更清晰易读。执行密切相关任务的方法应该使用相同的名字。</p>\n<p>重载的方法必须拥有不同的参数列表。你不能仅仅依据修饰符或者返回类型的不同来重载方法。</p>\n<h3 id=\"17-9-变量作用域\"><a href=\"#17-9-变量作用域\" class=\"headerlink\" title=\"17-9 变量作用域\"></a>17-9 变量作用域</h3><ul>\n<li>变量的范围是程序中该变量可以被引用的部分。</li>\n<li>方法内定义的变量被称为局部变量。</li>\n<li>局部变量的作用范围从声明开始，直到包含它的块结束。</li>\n<li>局部变量必须声明才可以使用。</li>\n<li>方法的参数范围涵盖整个方法。参数实际上是一个局部变量。</li>\n<li>for循环的初始化部分声明的变量，其作用范围在整个循环。</li>\n<li>但循环体内声明的变量其适用范围是从它声明到循环体结束。它包含如下所示的变量声明：</li>\n<li>你可以在一个方法里，不同的非嵌套块中多次声明一个具有相同的名称局部变量，但你不能在嵌套块内两次声明局部变量。</li>\n</ul>\n<h3 id=\"17-10-命令行参数的使用\"><a href=\"#17-10-命令行参数的使用\" class=\"headerlink\" title=\"17-10 命令行参数的使用\"></a>17-10 命令行参数的使用</h3><p>有时候你希望运行一个程序时候再传递给它消息。这要靠传递命令行参数给main()函数实现。</p>\n<p>命令行参数是在执行程序时候紧跟在程序名字后面的信息。</p>\n<p>下面的程序打印所有的命令行参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CommandLine.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CommandLine</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123; </span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;args.length; i++)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;args[&quot;</span> + i + <span class=\"string\">&quot;]: &quot;</span> + args[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如下所示，运行这个程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac CommandLine.java </span><br><span class=\"line\">$ java CommandLine this is a command line 200 -100</span><br><span class=\"line\">args[0]: this</span><br><span class=\"line\">args[1]: is</span><br><span class=\"line\">args[2]: a</span><br><span class=\"line\">args[3]: command</span><br><span class=\"line\">args[4]: line</span><br><span class=\"line\">args[5]: 200</span><br><span class=\"line\">args[6]: -100</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"17-11-构造方法\"><a href=\"#17-11-构造方法\" class=\"headerlink\" title=\"17-11 构造方法\"></a>17-11 构造方法</h3><ul>\n<li>当一个对象被创建时候，构造方法用来初始化该对象。构造方法和它所在类的名字相同，但构造方法没有返回值。</li>\n<li>通常会使用构造方法给一个类的实例变量赋初值，或者执行其它必要的步骤来创建一个完整的对象。</li>\n<li>不管你是否自定义构造方法，所有的类都有构造方法，因为Java自动提供了一个默认构造方法，默认构造方法的访问修改符和类的访问修改符相同(类为 public，构造函数也为 public；类改为 protected，构造函数也改为 protected)。</li>\n<li>一旦你定义了自己的构造方法，默认构造方法就会失效。</li>\n</ul>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass() &#123;</span><br><span class=\"line\">    x = <span class=\"number\">10</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>();</span><br><span class=\"line\">      System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大多时候需要一个有参数的构造方法。</p>\n<p><strong>实例</strong></p>\n<p>下面是一个使用构造方法的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一个简单的构造函数</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> x;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"comment\">// 以下是构造函数</span></span><br><span class=\"line\">  MyClass(<span class=\"type\">int</span> i ) &#123;</span><br><span class=\"line\">    x = i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你可以像下面这样调用构造方法来初始化一个对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ConsDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ConsDemo</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">10</span> );</span><br><span class=\"line\">    <span class=\"type\">MyClass</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyClass</span>( <span class=\"number\">20</span> );</span><br><span class=\"line\">    System.out.println(t1.x + <span class=\"string\">&quot; &quot;</span> + t2.x);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 20</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-12-可变参数\"><a href=\"#17-12-可变参数\" class=\"headerlink\" title=\"17-12 可变参数\"></a>17-12 可变参数</h3><p>JDK 1.5 开始，Java支持传递同类型的可变参数给一个方法。</p>\n<p>方法的可变参数的声明如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typeName... parameterName</span><br></pre></td></tr></table></figure>\n\n<p>在方法声明中，在指定参数类型后加一个省略号(…) 。</p>\n<p>一个方法中只能指定一个可变参数，它必须是方法的最后一个参数。任何普通的参数必须在它之前声明。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">VarargsDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 调用可变参数的方法</span></span><br><span class=\"line\">        printMax(<span class=\"number\">34</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">56.5</span>);</span><br><span class=\"line\">        printMax(<span class=\"keyword\">new</span> <span class=\"title class_\">double</span>[]&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">( <span class=\"type\">double</span>... numbers)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numbers.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;No argument passed&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> numbers[<span class=\"number\">0</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;  numbers.length; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numbers[i] &gt;  result) &#123;</span><br><span class=\"line\">                result = numbers[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;The max value is &quot;</span> + result);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The max value is 56.5</span><br><span class=\"line\">The max value is 3.0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"17-13-finalize-方法\"><a href=\"#17-13-finalize-方法\" class=\"headerlink\" title=\"17-13 finalize() 方法\"></a>17-13 finalize() 方法</h3><p>Java 允许定义这样的方法，它在对象被垃圾收集器析构(回收)之前调用，这个方法叫做 finalize( )，它用来清除回收对象。</p>\n<p>例如，你可以使用 finalize() 来确保一个对象打开的文件被关闭了。</p>\n<p>在 finalize() 方法里，你必须指定在对象销毁时候要执行的操作。</p>\n<p>finalize() 一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 在这里终结代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键字 protected 是一个限定符，它确保 finalize() 方法不会被该类以外的代码调用。</p>\n<p>当然，Java 的内存回收可以由 JVM 来自动完成。如果你手动使用，则可以使用上面的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// FinalizationDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FinalizationDemo</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">1</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">2</span>);  </span><br><span class=\"line\">    <span class=\"type\">Cake</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cake</span>(<span class=\"number\">3</span>);  </span><br><span class=\"line\">      </span><br><span class=\"line\">    c2 = c3 = <span class=\"literal\">null</span>;  </span><br><span class=\"line\">    System.gc(); <span class=\"comment\">//调用Java垃圾收集器</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cake</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Object</span> &#123;  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;  </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">Cake</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">this</span>.id = id;  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is created&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">    </span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> java.lang.Throwable &#123;  </span><br><span class=\"line\">    <span class=\"built_in\">super</span>.finalize();  </span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;Cake Object &quot;</span> + id + <span class=\"string\">&quot;is disposed&quot;</span>);  </span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上代码，输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac FinalizationDemo.java </span><br><span class=\"line\">$ java FinalizationDemo</span><br><span class=\"line\">Cake Object 1is created</span><br><span class=\"line\">Cake Object 2is created</span><br><span class=\"line\">Cake Object 3is created</span><br><span class=\"line\">Cake Object 3is disposed</span><br><span class=\"line\">Cake Object 2is disposed</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"18，Java-流-Stream-、文件-File-和IO\"><a href=\"#18，Java-流-Stream-、文件-File-和IO\" class=\"headerlink\" title=\"18，Java 流(Stream)、文件(File)和IO\"></a>18，Java 流(Stream)、文件(File)和IO</h2><ul>\n<li>Java.io 包几乎包含了所有操作输入、输出需要的类。所有这些流类代表了输入源和输出目标。</li>\n<li>Java.io 包中的流支持很多种格式，比如：基本类型、对象、本地化字符集等等。</li>\n<li>一个流可以理解为一个数据的序列。输入流表示从一个源读取数据，输出流表示向一个目标写数据。</li>\n<li>Java 为 I&#x2F;O 提供了强大的而灵活的支持，使其更广泛地应用到文件传输和网络编程中。</li>\n<li>但本节讲述最基本的和流与 I&#x2F;O 相关的功能。我们将通过一个个例子来学习这些功能。</li>\n</ul>\n<h3 id=\"18-1-读取控制台输入\"><a href=\"#18-1-读取控制台输入\" class=\"headerlink\" title=\"18-1 读取控制台输入\"></a>18-1 读取控制台输入</h3><p>Java 的控制台输入由 System.in 完成。</p>\n<p>为了获得一个绑定到控制台的字符流，你可以把 System.in 包装在一个 BufferedReader 对象中来创建一个字符流。</p>\n<p>下面是创建 BufferedReader 的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> </span><br><span class=\"line\">                      <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br></pre></td></tr></table></figure>\n\n<p>BufferedReader 对象创建后，我们便可以使用 read() 方法从控制台读取一个字符，或者用 readLine() 方法读取一个字符串。</p>\n<h3 id=\"18-2-从控制台读取多字符输入\"><a href=\"#18-2-从控制台读取多字符输入\" class=\"headerlink\" title=\"18-2 从控制台读取多字符输入\"></a>18-2 从控制台读取多字符输入</h3><p>从 BufferedReader 对象读取一个字符要使用 read() 方法，它的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">read</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>每次调用 read() 方法，它从输入流读取一个字符并把该字符作为整数值返回。 当流结束的时候返回 -1。该方法抛出 IOException。</p>\n<p>下面的程序示范了用 read() 方法从控制台不断读取字符直到用户输入 “q”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// BRRead.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRRead</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> c;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;输入字符, 按下 &#x27;q&#x27; 键退出。&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 读取字符</span></span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            c = (<span class=\"type\">char</span>) br.read();</span><br><span class=\"line\">            System.out.println(c);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (c != <span class=\"string\">&#x27;q&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入字符, 按下 &#x27;q&#x27; 键退出。</span><br><span class=\"line\">runoob</span><br><span class=\"line\">r</span><br><span class=\"line\">u</span><br><span class=\"line\">n</span><br><span class=\"line\">o</span><br><span class=\"line\">o</span><br><span class=\"line\">b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">q</span><br><span class=\"line\">q</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-3-从控制台读取字符串\"><a href=\"#18-3-从控制台读取字符串\" class=\"headerlink\" title=\"18-3 从控制台读取字符串\"></a>18-3 从控制台读取字符串</h3><p>从标准输入读取一个字符串需要使用 BufferedReader 的 readLine() 方法。</p>\n<p>它的一般格式是：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String <span class=\"title function_\">readLine</span><span class=\"params\">( )</span> <span class=\"keyword\">throws</span> IOException</span><br></pre></td></tr></table></figure>\n\n<p>下面的程序读取和显示字符行直到你输入了单词”end”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//使用 BufferedReader 在控制台读取字符</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BRReadLines</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 使用 System.in 创建 BufferedReader</span></span><br><span class=\"line\">        <span class=\"type\">BufferedReader</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BufferedReader</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(System.in));</span><br><span class=\"line\">        String str;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter lines of text.&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Enter &#x27;end&#x27; to quit.&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            str = br.readLine();</span><br><span class=\"line\">            System.out.println(str);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span> (!str.equals(<span class=\"string\">&quot;end&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter lines of text.</span><br><span class=\"line\">Enter &#x27;end&#x27; to quit.</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line one</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">This is line two</span><br><span class=\"line\">end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>JDK 5 后的版本我们也可以使用 [Java Scanner](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-c-cpp.html\">https://www.runoob.com//images/sqlite-c-cpp.html</a>‘) 类来获取控制台的输入。</p>\n</blockquote>\n<h3 id=\"18-4-控制台输出\"><a href=\"#18-4-控制台输出\" class=\"headerlink\" title=\"18-4 控制台输出\"></a>18-4 控制台输出</h3><p>在此前已经介绍过，控制台的输出由 print( ) 和 println() 完成。这些方法都由类 PrintStream 定义，System.out 是该类对象的一个引用。</p>\n<p>PrintStream 继承了 OutputStream类，并且实现了方法 write()。这样，write() 也可以用来往控制台写操作。</p>\n<p>PrintStream 定义 write() 的最简单格式如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">write</span><span class=\"params\">(<span class=\"type\">int</span> byteval)</span></span><br></pre></td></tr></table></figure>\n\n<p>该方法将 byteval 的低八位字节写到流中。</p>\n<p>下面的例子用 write() 把字符 “A” 和紧跟着的换行符输出到屏幕：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WriteDemo.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//演示 System.out.write().</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WriteDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> b;</span><br><span class=\"line\">        b = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">        System.out.write(b);</span><br><span class=\"line\">        System.out.write(<span class=\"string\">&#x27;\\n&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行以上实例在输出窗口输出 “A” 字符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n\n<p>**注意：**write() 方法不经常使用，因为 print() 和 println() 方法用起来更为方便。</p>\n<h3 id=\"18-5-读写文件\"><a href=\"#18-5-读写文件\" class=\"headerlink\" title=\"18-5 读写文件\"></a>18-5 读写文件</h3><p>如前所述，一个流被定义为一个数据序列。输入流用于从源读取数据，输出流用于向目标写数据。</p>\n<h4 id=\"18-5-1-FileInputStream\"><a href=\"#18-5-1-FileInputStream\" class=\"headerlink\" title=\"18-5-1 FileInputStream\"></a>18-5-1 FileInputStream</h4><ul>\n<li>该流用于从文件读取数据，它的对象可以用关键字 new 来创建。</li>\n<li>有多种构造方法可用来创建对象。</li>\n<li>可以使用字符串类型的文件名来创建一个输入流对象来读取文件：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">InputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>也可以使用一个文件对象来创建一个输入流对象来读取文件。我们首先得使用 File() 方法来创建一个文件对象：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); <span class=\"type\">InputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建了InputStream对象，就可以使用下面的方法来读取流或者进行其他的流操作。</li>\n</ul>\n<p><img src=\"/http://localhost:4000//image-20240228231544486.png\" alt=\"image-20240228231544486\"></p>\n<p>除了 InputStream 外，还有一些其他的输入流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-php.html\">https://www.runoob.com//images/sqlite-php.html</a>‘)</li>\n<li>[DataInputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-perl.html\">https://www.runoob.com//images/sqlite-perl.html</a>‘)</li>\n</ul>\n<hr>\n<h4 id=\"18-5-2-FileOutputStream\"><a href=\"#18-5-2-FileOutputStream\" class=\"headerlink\" title=\"18-5-2 FileOutputStream\"></a>18-5-2 FileOutputStream</h4><p>该类用来创建一个文件并向文件中写数据。</p>\n<p>如果该流在打开文件进行输出前，目标文件不存在，那么该流会创建该文件。</p>\n<p>有两个构造方法可以用来创建 FileOutputStream 对象。</p>\n<p>使用字符串类型的文件名来创建一个输出流对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用一个文件对象来创建一个输出流来写文件。我们首先得使用File()方法来创建一个文件对象：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;C://images/hello&quot;</span>); </span><br><span class=\"line\"><span class=\"type\">OutputStream</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br></pre></td></tr></table></figure>\n\n<p>创建OutputStream 对象完成后，就可以使用下面的方法来写入流或者进行其他的流操作。</p>\n<p><img src=\"/http://localhost:4000//image-20240228231647489.png\" alt=\"image-20240228231647489\"></p>\n<p>除了OutputStream外，还有一些其他的输出流，更多的细节参考下面链接：</p>\n<ul>\n<li>[ByteArrayOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-python.html\">https://www.runoob.com//images/sqlite-python.html</a>‘)</li>\n<li>[DataOutputStream](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/execute_sql_online.php\">https://www.runoob.com//images/execute_sql_online.php</a>‘)</li>\n</ul>\n<p>下面是一个演示 InputStream 和 OutputStream 用法的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// fileStreamTest.java 文件代码：</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">byte</span> bWrite[] = &#123; <span class=\"number\">11</span>, <span class=\"number\">21</span>, <span class=\"number\">3</span>, <span class=\"number\">40</span>, <span class=\"number\">5</span> &#125;;</span><br><span class=\"line\">            <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; x &lt; bWrite.length; x++) &#123;</span><br><span class=\"line\">                os.write(bWrite[x]); <span class=\"comment\">// writes the bytes</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            os.close();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(<span class=\"string\">&quot;test.txt&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> is.available();</span><br><span class=\"line\"> </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                System.out.print((<span class=\"type\">char</span>) is.read() + <span class=\"string\">&quot;  &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            is.close();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            System.out.print(<span class=\"string\">&quot;Exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的程序首先创建文件test.txt，并把给定的数字以二进制形式写进该文件，同时输出到控制台上。</p>\n<p>以上代码由于是二进制写入，可能存在乱码，你可以使用以下代码实例来解决乱码问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fileStreamTest2.java 文件代码：</span><br><span class=\"line\"><span class=\"comment\">//文件名 :fileStreamTest2.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">fileStreamTest2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;a.txt&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">FileOutputStream</span> <span class=\"variable\">fop</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileOutputStream对象,文件不存在会自动新建</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">OutputStreamWriter</span> <span class=\"variable\">writer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">OutputStreamWriter</span>(fop, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建OutputStreamWriter对象,参数可以指定编码,默认为操作系统默认编码,windows上是gbk</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;中文输入&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 写入到缓冲区</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;\\r\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 换行</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.append(<span class=\"string\">&quot;English&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 刷新缓存冲,写入到文件,如果下面已经没有写入的内容了,直接close也会写入</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        writer.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭写入流,同时会把缓冲区内容写入文件,所以上面的注释掉</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fop.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输出流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">FileInputStream</span> <span class=\"variable\">fip</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(f);</span><br><span class=\"line\">        <span class=\"comment\">// 构建FileInputStream对象</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">InputStreamReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InputStreamReader</span>(fip, <span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 构建InputStreamReader对象,编码与写入相同</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">StringBuffer</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuffer</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (reader.ready()) &#123;</span><br><span class=\"line\">            sb.append((<span class=\"type\">char</span>) reader.read());</span><br><span class=\"line\">            <span class=\"comment\">// 转成char加到StringBuffer对象中</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(sb.toString());</span><br><span class=\"line\">        reader.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭读取流</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        fip.close();</span><br><span class=\"line\">        <span class=\"comment\">// 关闭输入流,释放系统资源</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"18-6-文件和I-O\"><a href=\"#18-6-文件和I-O\" class=\"headerlink\" title=\"18-6 文件和I&#x2F;O\"></a>18-6 文件和I&#x2F;O</h3><p>还有一些关于文件和I&#x2F;O的类，我们也需要知道：</p>\n<ul>\n<li>[File Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/book.sqlite3.php\">https://www.runoob.com//images/book.sqlite3.php</a>‘)</li>\n<li>[FileReader Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite-jdbc\">https://www.runoob.com//images/sqlite-jdbc</a>‘)</li>\n<li>[FileWriter Class(类)](javascript:if(confirm(‘<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>  \\n\\n���ļ��޷��� Teleport Ultra ����, ��Ϊ ������, �����������, ����Ŀ����ֹͣ��  \\n\\n�����ڷ������ϴ���?’))window.location&#x3D;’<a href=\"https://www.runoob.com//images/sqlite3.html\">https://www.runoob.com//images/sqlite3.html</a>‘)</li>\n</ul>\n<hr>\n<h3 id=\"18-7-Java中的目录\"><a href=\"#18-7-Java中的目录\" class=\"headerlink\" title=\"18-7 Java中的目录\"></a>18-7 Java中的目录</h3><h4 id=\"18-7-1-创建目录：\"><a href=\"#18-7-1-创建目录：\" class=\"headerlink\" title=\"18-7-1 创建目录：\"></a>18-7-1 创建目录：</h4><p>File类中有两个方法可以用来创建文件夹：</p>\n<ul>\n<li>**mkdir( )**方法创建一个文件夹，成功则返回true，失败则返回false。失败表明File对象指定的路径已经存在，或者由于整个路径还不存在，该文件夹不能被创建。</li>\n<li>**mkdirs()**方法创建一个文件夹和它的所有父文件夹。</li>\n</ul>\n<p>下面的例子创建 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”文件夹：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CreateDir.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateDir</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp/user//images/bin&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"comment\">// 现在创建目录</span></span><br><span class=\"line\">        d.mkdirs();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译并执行上面代码来创建目录 “&#x2F;tmp&#x2F;user&#x2F;&#x2F;images&#x2F;bin”。</p>\n<p><strong>注意：</strong> Java 在 UNIX 和 Windows 自动按约定分辨文件路径分隔符。如果你在 Windows 版本的 Java 中使用分隔符 (&#x2F;) ，路径依然能够被正确解析。</p>\n<h4 id=\"18-7-2-读取目录\"><a href=\"#18-7-2-读取目录\" class=\"headerlink\" title=\"18-7-2 读取目录\"></a>18-7-2 读取目录</h4><p>一个目录其实就是一个 File 对象，它包含其他文件和文件夹。</p>\n<p>如果创建一个 File 对象并且它是一个目录，那么调用 isDirectory() 方法会返回 true。</p>\n<p>可以通过调用该对象上的 list() 方法，来提取它包含的文件和文件夹的列表。</p>\n<p>下面展示的例子说明如何使用 list() 方法来检查一个文件夹中包含的内容：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// DirList.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirList</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">dirname</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;/tmp&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">f1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f1.isDirectory()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;目录 &quot;</span> + dirname);</span><br><span class=\"line\">            String s[] = f1.list();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length; i++) &#123;</span><br><span class=\"line\">                <span class=\"type\">File</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(dirname + <span class=\"string\">&quot;/&quot;</span> + s[i]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个目录&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    System.out.println(s[i] + <span class=\"string\">&quot; 是一个文件&quot;</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(dirname + <span class=\"string\">&quot; 不是一个目录&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">目录 /tmp</span><br><span class=\"line\">bin 是一个目录</span><br><span class=\"line\">lib 是一个目录</span><br><span class=\"line\">demo 是一个目录</span><br><span class=\"line\">test.txt 是一个文件</span><br><span class=\"line\">README 是一个文件</span><br><span class=\"line\">index.html 是一个文件</span><br><span class=\"line\">include 是一个目录</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"18-7-3-删除目录或文件\"><a href=\"#18-7-3-删除目录或文件\" class=\"headerlink\" title=\"18-7-3 删除目录或文件\"></a>18-7-3 删除目录或文件</h4><p>删除文件可以使用 <strong>java.io.File.delete()</strong> 方法。</p>\n<p>以下代码会删除目录 <strong>&#x2F;tmp&#x2F;&#x2F;images&#x2F;</strong>，需要注意的是当删除某一目录时，必须保证该目录下没有其他文件才能正确删除，否则将删除失败。</p>\n<p>测试目录结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/tmp//images/</span><br><span class=\"line\">|-- 1.log</span><br><span class=\"line\">|-- test</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DeleteFileDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里修改为自己的测试目录</span></span><br><span class=\"line\">        <span class=\"type\">File</span> <span class=\"variable\">folder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;/tmp//images/&quot;</span>);</span><br><span class=\"line\">        deleteFolder(folder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// 删除文件及目录</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteFolder</span><span class=\"params\">(File folder)</span> &#123;</span><br><span class=\"line\">        File[] files = folder.listFiles();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (files != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (File f : files) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (f.isDirectory()) &#123;</span><br><span class=\"line\">                    deleteFolder(f);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    f.delete();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        folder.delete();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"19，Java-Scanner-类\"><a href=\"#19，Java-Scanner-类\" class=\"headerlink\" title=\"19，Java Scanner 类\"></a>19，Java Scanner 类</h2><p>java.util.Scanner 是 Java5 的新特征，我们可以通过 Scanner 类来获取用户的输入。</p>\n<p>下面是创建 Scanner 对象的基本语法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Scanner</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们演示一个最简单的数据输入，并通过 Scanner 类的 next() 与 nextLine() 方法获取输入的字符串，在读取前我们一般需要 使用 hasNext 与 hasNextLine 判断是否还有输入的数据：</p>\n<h3 id=\"19-1-使用-next-方法：\"><a href=\"#19-1-使用-next-方法：\" class=\"headerlink\" title=\"19-1 使用 next 方法：\"></a>19-1 使用 next 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner; </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// next方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;next方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNext()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str1</span> <span class=\"operator\">=</span> scan.next();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str1);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">next方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串并未输出，接下来我们看 nextLine。</p>\n<h3 id=\"19-2-使用-nextLine-方法：\"><a href=\"#19-2-使用-nextLine-方法：\" class=\"headerlink\" title=\"19-2 使用 nextLine 方法：\"></a>19-2 使用 nextLine 方法：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// nextLine方式接收字符串</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;nextLine方式接收：&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否还有输入</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextLine()) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str2</span> <span class=\"operator\">=</span> scan.nextLine();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的数据为：&quot;</span> + str2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">nextLine方式接收：</span><br><span class=\"line\">runoob com</span><br><span class=\"line\">输入的数据为：runoob com</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 com 字符串输出。</p>\n<h3 id=\"19-3-next-与-nextLine-区别\"><a href=\"#19-3-next-与-nextLine-区别\" class=\"headerlink\" title=\"19-3 next() 与 nextLine() 区别\"></a>19-3 next() 与 nextLine() 区别</h3><p>next():</p>\n<ul>\n<li>1、一定要读取到有效字符后才可以结束输入。</li>\n<li>2、对输入有效字符之前遇到的空白，next() 方法会自动将其去掉。</li>\n<li>3、只有输入有效字符后才将其后面输入的空白作为分隔符或者结束符。</li>\n<li>next() 不能得到带有空格的字符串。</li>\n</ul>\n<p>nextLine()：</p>\n<ul>\n<li>1、以Enter为结束符,也就是说 nextLine()方法返回的是输入回车之前的所有字符。</li>\n<li>2、可以获得空白。</li>\n</ul>\n<p>如果要输入 int 或 float 类型的数据，在 Scanner 类中也有支持，但是在输入之前最好先使用 hasNextXxx() 方法进行验证，再使用 nextXxx() 来读取：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\">        <span class=\"comment\">// 从键盘接收数据</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">float</span> <span class=\"variable\">f</span> <span class=\"operator\">=</span> <span class=\"number\">0.0f</span>;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入整数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextInt()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是整数</span></span><br><span class=\"line\">            i = scan.nextInt();</span><br><span class=\"line\">            <span class=\"comment\">// 接收整数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;整数数据：&quot;</span> + i);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是整数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.print(<span class=\"string\">&quot;输入小数：&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (scan.hasNextFloat()) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 判断输入的是否是小数</span></span><br><span class=\"line\">            f = scan.nextFloat();</span><br><span class=\"line\">            <span class=\"comment\">// 接收小数</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;小数数据：&quot;</span> + f);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 输入错误的信息</span></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;输入的不是小数！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\">输入整数：12</span><br><span class=\"line\">整数数据：12</span><br><span class=\"line\">输入小数：1.2</span><br><span class=\"line\">小数数据：1.2</span><br></pre></td></tr></table></figure>\n\n<p>以下实例我们可以输入多个数字，并求其总和与平均数，每输入一个数字用回车确认，通过输入非数字来结束输入并输出执行结果：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// ScannerDemo.java 文件代码：</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Scanner;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ScannerDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Scanner</span> <span class=\"variable\">scan</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Scanner</span>(System.in);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"type\">double</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (scan.hasNextDouble()) &#123;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> scan.nextDouble();</span><br><span class=\"line\">            m = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">            sum = sum + x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的和为&quot;</span> + sum);</span><br><span class=\"line\">        System.out.println(m + <span class=\"string\">&quot;个数的平均值是&quot;</span> + (sum / m));</span><br><span class=\"line\">        scan.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行以上程序输出结果为：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javac ScannerDemo.java</span><br><span class=\"line\">$ java ScannerDemo</span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"><span class=\"number\">23</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">21.4</span></span><br><span class=\"line\">end</span><br><span class=\"line\"><span class=\"number\">4</span>个数的和为<span class=\"number\">71.4</span></span><br><span class=\"line\"><span class=\"number\">4</span>个数的平均值是<span class=\"number\">17.85</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"20，Java异常处理\"><a href=\"#20，Java异常处理\" class=\"headerlink\" title=\"20，Java异常处理\"></a>20，Java异常处理</h2><p>异常是程序中的一些错误，但并不是所有的错误都是异常，并且错误有时候是可以避免的。</p>\n<p>比如说，你的代码少了一个分号，那么运行出来结果是提示是错误 java.lang.Error；如果你用System.out.println(11&#x2F;0)，那么你是因为你用0做了除数，会抛出 java.lang.ArithmeticException 的异常。</p>\n<p>异常发生的原因有很多，通常包含以下几大类：</p>\n<ul>\n<li>用户输入了非法数据。</li>\n<li>要打开的文件不存在。</li>\n<li>网络通信时连接中断，或者JVM内存溢出。</li>\n</ul>\n<p>这些异常有的是因为用户错误引起，有的是程序错误引起的，还有其它一些是因为物理错误引起的。-</p>\n<p>要理解Java异常处理是如何工作的，你需要掌握以下三种类型的异常：</p>\n<ul>\n<li>**检查性异常：**最具代表的检查性异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>\n<li><strong>运行时异常：</strong> 运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>\n<li><strong>错误：</strong> 错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们在编译也检查</li>\n</ul>\n<h3 id=\"20-1-异常方法\"><a href=\"#20-1-异常方法\" class=\"headerlink\" title=\"20-1 异常方法\"></a>20-1 异常方法</h3><p><img src=\"/http://localhost:4000//image-20240228232401552.png\" alt=\"image-20240228232401552\"></p>\n<h3 id=\"20-2-捕获异常\"><a href=\"#20-2-捕获异常\" class=\"headerlink\" title=\"20-2 捕获异常\"></a>20-2 捕获异常</h3><p>使用 try 和 catch 关键字可以捕获异常。try&#x2F;catch 代码块放在异常可能发生的地方。</p>\n<p>try&#x2F;catch代码块中的代码称为保护代码，使用 try&#x2F;catch 的语法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(ExceptionName e1)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"comment\">//Catch 块</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Catch 语句包含要捕获异常类型的声明。当保护代码块中发生一个异常时，try 后面的 catch 块就会被检查。</p>\n<p>如果发生的异常包含在 catch 块中，异常会被传递到该 catch 块，这和传递一个参数到方法是一样。</p>\n<p>下面的例子中声明有两个元素的一个数组，当代码试图访问数组的第三个元素的时候就会抛出一个异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ExcepTest.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名 : ExcepTest.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">         <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Out of the block&quot;</span>);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上代码编译运行输出结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">Out of the block</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-3-多重捕获块\"><a href=\"#20-3-多重捕获块\" class=\"headerlink\" title=\"20-3 多重捕获块\"></a>20-3 多重捕获块</h3><p>一个 try 代码块后面跟随多个 catch 代码块的情况就叫多重捕获。</p>\n<p>多重捕获块的语法如下所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>上面的代码段包含了 3 个 catch块。</li>\n<li>可以在 try 语句后面添加任意数量的 catch 块。</li>\n<li>如果保护代码中发生异常，异常被抛给第一个 catch 块。</li>\n<li>如果抛出异常的数据类型与 ExceptionType1 匹配，它在这里就会被捕获。</li>\n<li>如果不匹配，它会被传递给第二个 catch 块。</li>\n<li>如此，直到异常被捕获或者通过所有的 catch 块。</li>\n</ul>\n<p>该实例展示了怎么使用多重 try&#x2F;catch。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    file = <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(fileName);</span><br><span class=\"line\">    x = (<span class=\"type\">byte</span>) file.read();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(FileNotFoundException f) &#123; <span class=\"comment\">// Not valid!</span></span><br><span class=\"line\">    f.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span>(IOException i) &#123;</span><br><span class=\"line\">    i.printStackTrace();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-4-throws-throw-关键字：\"><a href=\"#20-4-throws-throw-关键字：\" class=\"headerlink\" title=\"20-4 throws&#x2F;throw 关键字：\"></a>20-4 throws&#x2F;throw 关键字：</h3><p>如果一个方法没有捕获到一个检查性异常，那么该方法必须使用 throws 关键字来声明。throws 关键字放在方法签名的尾部。</p>\n<p>也可以使用 throw 关键字抛出一个异常，无论它是新实例化的还是刚捕获到的。</p>\n<p>下面方法的声明抛出一个 RemoteException 异常：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RemoteException</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>一个方法可以声明抛出多个异常，多个异常之间用逗号隔开。</p>\n<p>例如，下面的方法声明抛出 RemoteException 和 InsufficientFundsException：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">className</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span> RemoteException,</span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"comment\">// Method implementation</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">//Remainder of class definition</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-5-finally关键字\"><a href=\"#20-5-finally关键字\" class=\"headerlink\" title=\"20-5 finally关键字\"></a>20-5 finally关键字</h3><ul>\n<li>finally 关键字用来创建在 try 代码块后面执行的代码块。</li>\n<li>无论是否发生异常，finally 代码块中的代码总会被执行。</li>\n<li>在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</li>\n<li>finally 代码块出现在 catch 代码块最后，语法如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">1</span> 异常的变量名<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span>(异常类型<span class=\"number\">2</span> 异常的变量名<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;<span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 程序代码</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ExcepTest.java 文件代码：</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExcepTest</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String args[])</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a[] = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Access element three :&quot;</span> + a[<span class=\"number\">3</span>]);</span><br><span class=\"line\">    &#125;<span class=\"keyword\">catch</span>(ArrayIndexOutOfBoundsException e)&#123;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;Exception thrown  :&quot;</span> + e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>&#123;</span><br><span class=\"line\">       a[<span class=\"number\">0</span>] = <span class=\"number\">6</span>;</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;First element value: &quot;</span> +a[<span class=\"number\">0</span>]);</span><br><span class=\"line\">       System.out.println(<span class=\"string\">&quot;The finally statement is executed&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以上实例编译运行结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception thrown  :java.lang.ArrayIndexOutOfBoundsException: 3</span><br><span class=\"line\">First element value: 6</span><br><span class=\"line\">The finally statement is executed</span><br></pre></td></tr></table></figure>\n\n<p>注意下面事项：</p>\n<ul>\n<li>catch 不能独立于 try 存在。</li>\n<li>在 try&#x2F;catch 后面添加 finally 块并非强制性要求的。</li>\n<li>try 代码后不能既没 catch 块也没 finally 块。</li>\n<li>try, catch, finally 块之间不能添加任何代码。</li>\n</ul>\n<h3 id=\"20-6-声明自定义异常\"><a href=\"#20-6-声明自定义异常\" class=\"headerlink\" title=\"20-6 声明自定义异常\"></a>20-6 声明自定义异常</h3><p>在 Java 中你可以自定义异常。编写自己的异常类时需要记住下面的几点。</p>\n<ul>\n<li>所有异常都必须是 Throwable 的子类。</li>\n<li>如果希望写一个检查性异常类，则需要继承 Exception 类。</li>\n<li>如果你想写一个运行时异常类，那么需要继承 RuntimeException 类。</li>\n</ul>\n<p>可以像下面这样定义自己的异常类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span>&#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>只继承Exception 类来创建的异常类是检查性异常类。</li>\n<li>下面的 InsufficientFundsException 类是用户定义的异常类，它继承自 Exception。</li>\n<li>一个异常类和其它任何类一样，包含有变量和方法。</li>\n</ul>\n<p>以下实例是一个银行账户的模拟，通过银行卡的号码完成识别，可以进行存钱和取钱的操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// InsufficientFundsException.java 文件代码：</span></span><br><span class=\"line\"><span class=\"comment\">// 文件名InsufficientFundsException.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//自定义异常类，继承Exception类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InsufficientFundsException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//此处的amount用来储存当出现异常（取出钱多于余额时）所缺乏的钱</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">double</span> amount;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">InsufficientFundsException</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.amount = amount;</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getAmount</span><span class=\"params\">()</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了展示如何使用我们自定义的异常类，</p>\n<p>在下面的 CheckingAccount 类中包含一个 withdraw() 方法抛出一个 InsufficientFundsException 异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 文件名称 CheckingAccount.java</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//此类模拟银行账户</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CheckingAccount</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">//balance为余额，number为卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">double</span> balance;</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"type\">int</span> number;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"title function_\">CheckingAccount</span><span class=\"params\">(<span class=\"type\">int</span> number)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.number = number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：存钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deposit</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      balance += amount;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：取钱</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">withdraw</span><span class=\"params\">(<span class=\"type\">double</span> amount)</span> <span class=\"keyword\">throws</span></span><br><span class=\"line\">                              InsufficientFundsException</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(amount &lt;= balance)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         balance -= amount;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         <span class=\"type\">double</span> <span class=\"variable\">needs</span> <span class=\"operator\">=</span> amount - balance;</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InsufficientFundsException</span>(needs);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回余额</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">getBalance</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> balance;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  <span class=\"comment\">//方法：返回卡号</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getNumber</span><span class=\"params\">()</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> number;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面的 BankDemo 程序示范了如何调用 CheckingAccount 类的 deposit() 和 withdraw() 方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//文件名称 BankDemo.java</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BankDemo</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String [] args)</span></span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"type\">CheckingAccount</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CheckingAccount</span>(<span class=\"number\">101</span>);</span><br><span class=\"line\">      System.out.println(<span class=\"string\">&quot;Depositing $500...&quot;</span>);</span><br><span class=\"line\">      c.deposit(<span class=\"number\">500.00</span>);</span><br><span class=\"line\">      <span class=\"keyword\">try</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $100...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">100.00</span>);</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;\\nWithdrawing $600...&quot;</span>);</span><br><span class=\"line\">         c.withdraw(<span class=\"number\">600.00</span>);</span><br><span class=\"line\">      &#125;<span class=\"keyword\">catch</span>(InsufficientFundsException e)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">         System.out.println(<span class=\"string\">&quot;Sorry, but you are short $&quot;</span></span><br><span class=\"line\">                                  + e.getAmount());</span><br><span class=\"line\">         e.printStackTrace();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>编译上面三个文件，并运行程序 BankDemo，得到结果如下所示：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Depositing $500...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $100...</span><br><span class=\"line\"></span><br><span class=\"line\">Withdrawing $600...</span><br><span class=\"line\">Sorry, but you are short $200.0</span><br><span class=\"line\">InsufficientFundsException</span><br><span class=\"line\">        at CheckingAccount.withdraw(CheckingAccount.java:25)</span><br><span class=\"line\">        at BankDemo.main(BankDemo.java:13)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"20-7-通用异常\"><a href=\"#20-7-通用异常\" class=\"headerlink\" title=\"20-7 通用异常\"></a>20-7 通用异常</h3><p>在Java中定义了两种类型的异常和错误。</p>\n<ul>\n<li><strong>JVM(Java**<strong>虚拟机</strong></strong>)** **异常：**由 JVM 抛出的异常或错误。例如：NullPointerException 类，ArrayIndexOutOfBoundsException 类，ClassCastException 类。</li>\n<li>**程序级异常：**由程序或者API程序抛出的异常。例如 IllegalArgumentException 类，IllegalStateException 类。</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/hello/1.png","post":"cm92vmg0t0000k7q19yirchpd","slug":"1.png","modified":1,"renderable":0},{"_id":"source/_posts/hello/java-HelloWorld.gif","post":"cm92vmg0t0000k7q19yirchpd","slug":"java-HelloWorld.gif","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228195010033.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228195010033.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228200611781.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228200611781.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228200803273.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228200803273.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228202210130.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228202210130.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228212912288.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228212912288.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228213115946.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228213115946.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228213253912.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228213253912.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228213402353.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228213402353.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228213543244.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228213543244.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228213815636.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228213815636.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228220453132.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228220453132.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228220635826.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228220635826.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228220904427.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228220904427.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228220959034.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228220959034.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228221437713.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228221437713.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228221542960.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228221542960.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228221620605.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228221620605.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228222507296.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228222507296.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228222725206.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228222725206.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228222933035.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228222933035.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228223002094.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228223002094.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225026914.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225026914.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225136150.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225136150.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225205976.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225205976.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225320769.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225320769.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225546405.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225546405.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225637596.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225637596.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225700596.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225700596.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228225727777.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228225727777.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228230136771.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228230136771.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228231544486.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228231544486.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228231647489.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228231647489.png","modified":1,"renderable":0},{"_id":"source/_posts/java/image-20240228232401552.png","post":"cm92vmg180001k7q1hztb40pa","slug":"image-20240228232401552.png","modified":1,"renderable":0},{"_id":"source/_posts/java/java-HelloWorld.gif","post":"cm92vmg180001k7q1hztb40pa","slug":"java-HelloWorld.gif","modified":1,"renderable":0}],"PostCategory":[],"PostTag":[],"Tag":[]}}